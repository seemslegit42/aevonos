
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  password                String?
  firstName               String?
  lastName                String?
  emailVerified           DateTime?
  image                   String?
  role                    UserRole               @default(OPERATOR)
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  agentAlias              String?
  unlockedChaosCardKeys   String[]
  accounts                Account[]
  sessions                Session[]
  ownedWorkspace          Workspace?             @relation("WorkspaceOwner")
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  transactions            Transaction[]
  instrumentDiscoveries   InstrumentDiscovery[]
  pulseProfile            PulseProfile?
  conversation            Conversation?
  
  // Rite of Invocation fields
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  corePainIndex           Float?
  
  // Reclamation Rite
  reclamationGraceUntil   DateTime?

  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  lastLoginAt             DateTime?
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

model Workspace {
  id                String               @id @default(cuid())
  name              String
  ownerId           String               @unique
  owner             User                 @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members           User[]               @relation("WorkspaceMembers")
  planTier          PlanTier             @default(Apprentice)
  credits           Decimal              @default(100.0)
  agentActionsUsed  Int                  @default(0)
  overageEnabled    Boolean              @default(true)
  unlockedAppIds    String[]
  agents            Agent[]
  contacts          Contact[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  transactions      Transaction[]
  instrumentDiscoveries InstrumentDiscovery[]
  integrations      Integration[]
  activeSystemEffects ActiveSystemEffect[]
  conversations     Conversation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean       @default(true)
  triggerType String        @default("api") // e.g., 'api', 'schedule', 'event'
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Transaction {
  id              String             @id @default(cuid())
  workspaceId     String
  workspace       Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId          String?
  user            User?              @relation(fields: [userId], references: [id], onDelete:SetNull)
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus  @default(PENDING)
  createdAt       DateTime           @default(now())
  
  // For Folly Instruments
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?
  boonAmount      Decimal?
  judasFactor     Decimal?
  userPsyche      UserPsyche?
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
}

model ChaosCard {
  key          String  @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model InstrumentDiscovery {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId     String
  workspace       Workspace   @relation(fields: [workspaceId], references: [id])
  instrumentId    String      // e.g., MicroApp ID or Chaos Card key
  converted       Boolean     @default(false)
  dtt             Int?        // Discovery-to-Tribute time in minutes
  nudgeSentAt     DateTime?
  firstViewedAt   DateTime    @default(now())

  @@unique([userId, instrumentId])
}


enum PulseInteractionType {
  WIN
  LOSS
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

model PulseProfile {
  id                      String        @id @default(cuid())
  userId                  String        @unique
  user                    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Base Sine Rhythm Engine (SRE) params
  baselineLuck            Float         @default(0.4)
  amplitude               Float         @default(0.15)
  frequency               Float         @default(0.01)
  phaseOffset             Float
  
  // Dynamic State
  lastEventTimestamp      DateTime      @default(now())
  consecutiveLosses       Int           @default(0)
  lastResolvedPhase       PulsePhase    @default(EQUILIBRIUM)
  lastInteractionType     PulseInteractionType @default(WIN)
  
  // Dynamic Psychological State
  frustration             Float         @default(0.1)
  flowState               Float         @default(0.1)
  riskAversion            Float         @default(0.5)

  // One-time buffs
  loadedDieBuffCount      Int           @default(0)
  nextTributeGuaranteedWin Boolean      @default(false)
  hadesBargainActive      Boolean      @default(false)

  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

model ActiveSystemEffect {
    id                      String        @id @default(cuid())
    workspaceId             String
    workspace               Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    cardKey                 String
    expiresAt               DateTime
    createdAt               DateTime      @default(now())
}

model Integration {
    id                        String          @id @default(cuid())
    workspaceId               String
    workspace                 Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    integrationManifestId     String          // Corresponds to the ID in the static manifest
    name                      String          // User-defined name for this instance
    status                    IntegrationStatus @default(active)
    configDetails             Json            // Encrypted API keys, etc.

    createdAt                 DateTime        @default(now())
    updatedAt                 DateTime        @updatedAt
}

enum IntegrationStatus {
  active
  inactive
  error
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Json[]    // Array of serialized LangChain messages
  updatedAt   DateTime  @updatedAt
}
