
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------------------
// CORE TENANCY MODELS
// --------------------------------------------------
model User {
  id                    String    @id @default(cuid())
  email                 String?   @unique
  password              String?
  firstName             String?   @map("first_name")
  lastName              String?   @map("last_name")
  role                  UserRole  @default(OPERATOR)
  agentAlias            String?   @map("agent_alias")
  psyche                UserPsyche
  corePainIndex         Int?      @map("core_pain_index")
  foundingVow           String?   @map("founding_vow")
  foundingGoal          String?   @map("founding_goal")
  foundingBenediction   String?   @map("founding_benediction")
  firstWhisper          String?   @map("first_whisper")
  reclamationGraceUntil DateTime? @map("reclamation_grace_until")
  emailVerified         DateTime? @map("email_verified")
  lastLoginAt           DateTime? @default(now()) @map("last_login_at")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  ownedWorkspaces       Workspace[]           @relation("WorkspaceOwner")
  workspaces            Workspace[]           @relation("WorkspaceMembers")
  transactions          Transaction[]
  conversations         Conversation[]
  ownedChaosCards       ChaosCard[]
  instrumentDiscoveries InstrumentDiscovery[]
  pulseProfile          PulseProfile?
  accounts              Account[]
  sessions              Session[]

  @@map("users")
}

model Workspace {
  id                    String               @id @default(cuid())
  name                  String
  ownerId               String               @map("owner_id")
  planTier              PlanTier             @default(Apprentice) @map("plan_tier")
  credits               Decimal              @default(0.0)
  agentActionsUsed      Int                  @default(0) @map("agent_actions_used")
  overageEnabled        Boolean              @default(false) @map("overage_enabled")
  unlockedAppIds        String[]             @map("unlocked_app_ids")
  createdAt             DateTime             @default(now()) @map("created_at")
  updatedAt             DateTime             @updatedAt @map("updated_at")
  owner                 User                 @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members               User[]               @relation("WorkspaceMembers")
  agents                Agent[]
  contacts              Contact[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  securityAlerts        SecurityAlert[]
  transactions          Transaction[]
  threatFeeds           ThreatFeed[]
  activeSystemEffects   ActiveSystemEffect[]
  conversations         Conversation[]
  instrumentDiscoveries InstrumentDiscovery[]
  integrations          Integration[]

  @@map("workspaces")
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

// --------------------------------------------------
// AGENT & WORKFLOW MODELS
// --------------------------------------------------
model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus @default(idle)
  configuration Json?
  workspaceId   String      @map("workspace_id")
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@map("agents")
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Workflow {
  id           String          @id @default(cuid())
  name         String
  isActive     Boolean         @default(true)
  triggerType  String          @default("api")
  definition   Json
  runs         WorkflowRun[]
  workspaceId  String          @map("workspace_id")
  workspace    Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")

  @@map("workflows")
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?             @map("trigger_payload")
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now()) @map("started_at")
  finishedAt     DateTime?         @map("finished_at")
  workflowId     String            @map("workflow_id")
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String            @map("workspace_id")
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workflow_runs")
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

// --------------------------------------------------
// ECONOMIC ENGINE MODELS (OBELISK PAY & KLEPSYDRA)
// --------------------------------------------------
model Transaction {
  id              String          @id @default(cuid())
  workspaceId     String          @map("workspace_id")
  userId          String?         @map("user_id")
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus @default(COMPLETED)
  instrumentId    String?         @map("instrument_id") // ID of ChaosCard, etc.
  luckWeight      Float?          @map("luck_weight")
  tributeAmount   Decimal?        @map("tribute_amount")
  boonAmount      Decimal?        @map("boon_amount")
  outcome         String?
  judasFactor     Decimal?        @map("judas_factor")
  userPsyche      UserPsyche?     @map("user_psyche")
  createdAt       DateTime        @default(now()) @map("created_at")
  workspace       Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user            User?           @relation(fields: [userId], references: [id])

  @@map("transactions")
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model PulseProfile {
  id                  String  @id @default(cuid())
  userId              String  @unique @map("user_id")
  baselineLuck        Float   @default(0.4) @map("baseline_luck")
  amplitude           Float   @default(0.15)
  frequency           Float   @default(0.01)
  phaseOffset         Float   @map("phase_offset")
  lastEventTimestamp  DateTime @default(now()) @map("last_event_timestamp")
  consecutiveLosses   Int     @default(0) @map("consecutive_losses")
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM) @map("last_resolved_phase")
  lastInteractionType PulseInteractionType @default(WIN) @map("last_interaction_type")
  frustration         Float   @default(0)
  flowState           Float   @default(0) @map("flow_state")
  riskAversion        Float   @default(0.5) @map("risk_aversion")
  
  // Buffs
  loadedDieBuffCount Int @default(0) @map("loaded_die_buff_count")
  nextTributeGuaranteedWin Boolean @default(false) @map("next_tribute_guaranteed_win")
  hadesBargainActive Boolean @default(false) @map("hades_bargain_active")

  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pulse_profiles")
}

enum PulsePhase {
    CREST
    TROUGH
    EQUILIBRIUM
}

enum PulseInteractionType {
    WIN
    LOSS
}


model ChaosCard {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String
  cardClass   ChaosCardClass
  cost        Int
  systemEffect String
  createdAt   DateTime @default(now()) @map("created_at")
  owners      User[]

  @@map("chaos_cards")
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

model ActiveSystemEffect {
    id String @id @default(cuid())
    workspaceId String @map("workspace_id")
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    cardKey String @map("card_key")
    createdAt DateTime @default(now()) @map("created_at")
    expiresAt DateTime @map("expires_at")
    
    @@map("active_system_effects")
}

model InstrumentDiscovery {
    id String @id @default(cuid())
    userId String @map("user_id")
    workspaceId String @map("workspace_id")
    instrumentId String @map("instrument_id")
    firstViewedAt DateTime @default(now()) @map("first_viewed_at")
    nudgeSentAt DateTime? @map("nudge_sent_at")
    converted Boolean @default(false)
    dtt Int? @map("dtt")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    
    @@unique([userId, instrumentId])
    @@map("instrument_discoveries")
}

// --------------------------------------------------
// UTILITY & APPLICATION MODELS
// --------------------------------------------------
model Contact {
  id          String   @id @default(cuid())
  firstName   String?  @map("first_name")
  lastName    String?  @map("last_name")
  email       String?
  phone       String?
  workspaceId String   @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([workspaceId, email])
  @@map("contacts")
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String            @map("workspace_id")
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("security_alerts")
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

model ThreatFeed {
    id          String @id @default(cuid())
    url         String
    workspaceId String @map("workspace_id")
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    
    @@map("threat_feeds")
}

model IntegrationManifest {
    id String @id @default(cuid())
    name String
    description String
    authMethod String
    
    instances Integration[]
    
    @@map("integration_manifests")
}

enum IntegrationStatus {
    active
    inactive
    error
}

model Integration {
    id String @id @default(cuid())
    name String
    status IntegrationStatus @default(inactive)
    configDetails Json
    integrationManifestId String @map("integration_manifest_id")
    manifest IntegrationManifest @relation(fields: [integrationManifestId], references: [id])
    
    workspaceId String @map("workspace_id")
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    
    @@map("integrations")
}


model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  workspaceId String   @map("workspace_id")
  messages    Json
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("conversations")
}


// --------------------------------------------------
// AUTH MODELS (NEXT-AUTH)
// --------------------------------------------------
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
