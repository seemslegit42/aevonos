// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================================
// Core Tenancy & User Models
// ===================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  firstName String?
  lastName String?
  role      UserRole @default(OPERATOR)
  psyche    UserPsyche @default(ZEN_ARCHITECT)
  
  // Customization
  agentAlias String? @default("BEEP")
  unlockedChaosCardKeys String[]

  // Narrative
  foundingVow String?
  foundingGoal String?
  foundingBenediction String?
  firstWhisper String?
  firstCommand String?
  
  // Game Mechanics
  corePainIndex Int @default(0) // A shadow metric of user's core pain
  hasAbyssalScar Boolean @default(false)
  reclamationGraceUntil DateTime?

  // Relations
  workspaces    Workspace[] @relation("WorkspaceMembers")
  ownedWorkspace Workspace? @relation("WorkspaceOwner")
  pulseProfile  PulseProfile?
  transactions  Transaction[]
  contributions Contribution[]
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  ownerId   String   @unique
  owner     User     @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Plan & Billing
  planTier        PlanTier @default(Apprentice)
  credits         Decimal  @default(0.0)
  potential       Decimal @default(0.0) // Meta-asset for "Age of Ascension"
  agentActionsUsed Int      @default(0)
  overageEnabled  Boolean  @default(false)
  
  // Customization & Unlocks
  unlockedAppIds String[]

  // Relations
  members       User[]   @relation("WorkspaceMembers")
  agents        Agent[]
  securityAlerts SecurityAlert[]
  contacts      Contact[]
  transactions  Transaction[]
  threatFeeds   ThreatFeed[]
  securityEdicts SecurityEdict[]
  integrations  Integration[]
  activeSystemEffects ActiveSystemEffect[]
  pulseEngineConfig PulseEngineConfig?
  workflows     Workflow[]
  workflowRuns  WorkflowRun[]
  contributions Contribution[]
  products      Product[]
  suppliers     Supplier[]
  purchaseOrders PurchaseOrder[]
}

// ===================================
// Agentic & Workflow Models
// ===================================

model Agent {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Workflow {
  id             String @id @default(cuid())
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id])
  name           String
  definition     Json
  isActive       Boolean @default(true)
  triggerType    String @default("api")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  runs           WorkflowRun[]
}

model WorkflowRun {
  id              String @id @default(cuid())
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id])
  workflowId      String
  workflow        Workflow @relation(fields: [workflowId], references: [id])
  status          WorkflowRunStatus @default(pending)
  triggerPayload  Json?
  startedAt       DateTime @default(now())
  finishedAt      DateTime?
  output          Json?
  log             Json[]
}


// ===================================
// Economic Engine Models
// ===================================

model Transaction {
  id              String           @id @default(cuid())
  workspaceId     String
  workspace       Workspace        @relation(fields: [workspaceId], references: [id])
  userId          String?          // User who initiated the transaction
  user            User?            @relation(fields: [userId], references: [id])
  agentId         String?          // Agent that performed the action
  type            TransactionType
  amount          Decimal          // Net change for DEBIT/CREDIT, net result for TRIBUTE
  description     String
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime         @default(now())
  aegisSignature  String?          // Aegis signature for integrity
  
  // Fields for Folly Instruments
  instrumentId    String?          // e.g., 'SISYPHUS_ASCENT'
  luckWeight      Float?           // User's luck value at time of transaction
  outcome         String?          // e.g., 'win', 'loss', 'pity_boon'
  tributeAmount   Decimal?         // The gross amount paid for the tribute
  boonAmount      Decimal?         // The gross amount won from the tribute
  judasFactor     Decimal?         // The reduction factor in a "hollow win"
  userPsyche      UserPsyche?      // User's psyche at the time of transaction

  // Fields for Real-World Transmutations
  isTransmutation   Boolean @default(false)
  realWorldAmount   Decimal?
  realWorldCurrency String?
  vendorName        String?
  transmutationTithe Decimal?
}

model PulseProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  
  // Sine-Rhythm Engine (SRE) Parameters
  amplitude   Float    @default(0.15) // How high/low the luck wave goes
  frequency   Float    @default(0.01) // How fast the luck wave oscillates
  phaseOffset Float    // Ensures users aren't all on the same wave
  baselineLuck Float   @default(0.5) // The user's base chance of a good outcome

  // Dynamic State
  lastEventTimestamp DateTime @default(now())
  consecutiveLosses  Int      @default(0)
  lastResolvedPhase PulsePhase?
  lastInteractionType PulseInteractionType?
  
  // Psychological State (0.0 to 1.0)
  frustration  Float @default(0.1)
  flowState    Float @default(0.1)
  riskAversion Float @default(0.5)

  // One-time buffs from Mercenary Cards
  nextTributeGuaranteedWin Boolean? @default(false)
  loadedDieBuffCount Int? @default(0)
  hadesBargainActive Boolean? @default(false)
}

// Log for meta-asset accrual during "Age of Ascension"
model PotentialAccrualLog {
  id               String @id @default(cuid())
  workspaceId      String
  userId           String
  instrumentId     String
  luckWeight       Float
  potentialAwarded Decimal
  aegisSignature   String?
  narrativeContext String
  createdAt        DateTime @default(now())
}


// Configuration for the Pulse Engine, managed by the Architect
model PulseEngineConfig {
  id                      String @id @default(cuid())
  workspaceId             String @unique
  workspace               Workspace @relation(fields: [workspaceId], references: [id])
  pityThreshold           Int     @default(5) // Consecutive losses before pity boon
  judasAlgorithmChance    Float   @default(0.1) // Chance of "hollow win"
  aethericEchoChance      Float   @default(0.25) // Chance of showing "what could have been"
  festivalTriggerPercent  Int     @default(20) // % drop in tribute velocity to trigger event
  transmutationTithe      Decimal @default(0.18) // 18% tithe on real-world transmutations
}


// ===================================
// Utility & Application Models
// ===================================

model Contact {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SecurityAlert {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  userId      String?     // User associated with the alert, if applicable
  type        String      // e.g., 'Anomalous Login', 'Data Access Violation'
  explanation String
  riskLevel   SecurityRiskLevel
  timestamp   DateTime    @default(now())
  actionableOptions Json
}

model ThreatFeed {
  id           String    @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  url          String
  createdAt    DateTime  @default(now())
}

model SecurityEdict {
  id           String    @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  description  String
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
}


model Integration {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  integrationManifestId String // The UUID from the static manifest file
  name        String    // User-provided name, e.g., "Primary Slack"
  status      IntegrationStatus @default(active)
  configDetails Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  messages    Json[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, workspaceId])
}

model InstrumentDiscovery {
  id            String   @id @default(cuid())
  userId        String
  workspaceId   String
  instrumentId  String   // e.g., 'spectre-intelligence-suite' or 'GEOLOGIC_TIME'
  firstViewedAt DateTime @default(now())
  converted     Boolean  @default(false)
  dtt           Int?     // Discovery-to-Tribute time in minutes
  nudgeSentAt   DateTime?

  @@unique([userId, instrumentId])
}

model ChaosCard {
  id          String @id @default(cuid())
  key         String @unique // e.g., GEOLOGIC_TIME
  name        String
  description String
  cardClass   ChaosCardClass
  cost        Int
  systemEffect String?
}

model ActiveSystemEffect {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  cardKey     String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
}

model GlobalAgenticEvent {
  id                  String @id @default(cuid())
  eventName           String
  status              EventStatus @default(ACTIVE)
  createdAt           DateTime @default(now())
  expiresAt           DateTime
  poolTarget          Decimal
  currentPool         Decimal @default(0.0)
  winningWorkspaceId  String?
  shardReward         String
  contributions       Contribution[]
}

model Contribution {
  id             String @id @default(cuid())
  amount         Decimal
  createdAt      DateTime @default(now())
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id])
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  eventId        String
  event          GlobalAgenticEvent @relation(fields: [eventId], references: [id])
}

// Basic models for a simple inventory system
model Product {
  id          String @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  name        String
  description String?
  stockLevel  Int
  purchaseOrderItems PurchaseOrderItem[]
}

model Supplier {
  id          String @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  name        String
  contactEmail String?
  purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
  id           String @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  supplierId   String
  supplier     Supplier @relation(fields: [supplierId], references: [id])
  status       PurchaseOrderStatus @default(PENDING)
  createdAt    DateTime @default(now())
  items        PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              String @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  productId       String
  product         Product @relation(fields: [productId], references: [id])
  quantity        Int
}


// ===================================
// Enums
// ===================================
enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE // Special type for Folly Instruments
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
    WIN
    LOSS
    COMMAND_SUCCESS
    COMMAND_FAILURE
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

enum PurchaseOrderStatus {
  PENDING
  SUBMITTED
  COMPLETED
  CANCELLED
}
