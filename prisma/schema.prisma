// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  firstName             String?
  lastName              String?
  role                  UserRole               @default(OPERATOR)
  psyche                UserPsyche             @default(ZEN_ARCHITECT)
  agentAlias            String?
  lastLoginAt           DateTime?
  reclamationGraceUntil DateTime?
  corePainIndex         Int?
  foundingVow           String?
  foundingGoal          String?
  foundingBenediction   String?
  firstWhisper          String?
  firstCommand          String?
  unlockedChaosCardKeys String[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  workspaces            Workspace[]            @relation("WorkspaceMembers")
  transactions          Transaction[]
  contributions         Contribution[]
  pulseProfile          PulseProfile?
  conversations         Conversation[]
  securityAlerts        SecurityAlert[]
  instrumentDiscoveries InstrumentDiscovery[]
}

model Workspace {
  id                String                 @id @default(cuid())
  name              String
  owner             User                   @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId           String                 @unique
  planTier          PlanTier               @default(Apprentice)
  credits           Decimal                @default(100.0)
  potential         Decimal                @default(0.0)
  agentActionsUsed  Int                    @default(0)
  overageEnabled    Boolean                @default(true)
  unlockedAppIds    String[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  members           User[]                 @relation("WorkspaceMembers")
  contacts          Contact[]
  agents            Agent[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  securityEdicts    SecurityEdict[]
  transactions      Transaction[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  pulseEngineConfig PulseEngineConfig?
  conversations     Conversation[]
  contributions     Contribution[]
  activeEffects     ActiveSystemEffect[]
}

// Establishes a many-to-many relationship between users and workspaces.
relation WorkspaceMembers on User {
  fields: [id]
  references: [id]
}

// Explicitly defines the one-to-many relationship for the owner.
relation WorkspaceOwner on Workspace {
  fields: [ownerId]
  references: [id]
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@index([workspaceId])
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String // e.g., 'winston-wolfe', 'dr-syntax'
  description String?
  status      AgentStatus @default(idle)
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  transactions Transaction[]

  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  user              User?             @relation(fields: [userId], references: [id])
  userId            String?

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@index([workspaceId])
}

model SecurityEdict {
  id          String   @id @default(cuid())
  description String
  isActive    Boolean  @default(true)
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime @default(now())

  @@index([workspaceId])
}


model Transaction {
  id                 String            @id @default(cuid())
  workspace          Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId        String
  user               User?             @relation(fields: [userId], references: [id])
  userId             String?
  agent              Agent?            @relation(fields: [agentId], references: [id])
  agentId            String?
  instrumentId       String?
  type               TransactionType
  amount             Decimal
  description        String
  status             TransactionStatus @default(COMPLETED)
  createdAt          DateTime          @default(now())
  aegisSignature     String?
  // Klepsydra-specific fields for TRIBUTE transactions
  luckWeight         Float?
  outcome            String?
  tributeAmount      Decimal?
  boonAmount         Decimal?
  judasFactor        Decimal?
  userPsyche         UserPsyche?
  isTransmutation    Boolean           @default(false)
  realWorldAmount    Decimal?
  realWorldCurrency  String?
  vendorName         String?

  @@index([workspaceId])
  @@index([userId])
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  definition   Json
  isActive     Boolean       @default(true)
  triggerType  String        @default("api") // 'api', 'schedule', 'event'
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  runs         WorkflowRun[]

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workflowId     String
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  status         WorkflowRunStatus
  startedAt      DateTime
  finishedAt     DateTime?
  triggerPayload Json?
  log            Json?
  output         Json?

  @@index([workflowId])
}

model PulseEngineConfig {
  id                   String  @id @default(cuid())
  workspace            Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId          String @unique
  pityThreshold        Int     @default(7)
  festivalTriggerPercent Int   @default(20)
  transmutationTithe   Decimal @default(0.18)
}


model PulseProfile {
  id                       String               @id @default(cuid())
  user                     User                 @relation(fields: [userId], references: [id])
  userId                   String               @unique
  amplitude                Float                @default(0.15)
  frequency                Float                @default(0.01)
  phaseOffset              Float
  baselineLuck             Float                @default(0.4)
  lastEventTimestamp       DateTime             @default(now())
  consecutiveLosses        Int                  @default(0)
  lastResolvedPhase        PulsePhase?
  lastInteractionType      PulseInteractionType?
  frustration              Float                @default(0.1)
  flowState                Float                @default(0.1)
  riskAversion             Float                @default(0.5)
  nextTributeGuaranteedWin Boolean?
  loadedDieBuffCount       Int?
  hadesBargainActive       Boolean?
}


model PotentialAccrualLog {
  id               String   @id @default(cuid())
  workspaceId      String
  userId           String
  instrumentId     String
  luckWeight       Float
  potentialAwarded Decimal
  createdAt        DateTime @default(now())
  aegisSignature   String
  narrativeContext String

  @@index([workspaceId, userId])
}


model Conversation {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  messages    Json // Array of serialized BaseMessage objects
  updatedAt   DateTime  @updatedAt
}

model ChaosCard {
  key          String        @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String?
  createdAt    DateTime      @default(now())
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  cardKey     String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime

  @@index([workspaceId])
}

model InstrumentDiscovery {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  workspaceId    String
  instrumentId   String // The ID from the artifact manifest
  firstViewedAt  DateTime @default(now())
  converted      Boolean  @default(false)
  nudgeSentAt    DateTime?
  dtt            Int? // Discovery-to-Tribute time in minutes

  @@index([userId])
}

model GlobalAgenticEvent {
  id                 String       @id @default(cuid())
  eventName          String
  status             EventStatus  @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal      @default(0)
  createdAt          DateTime     @default(now())
  expiresAt          DateTime
  shardReward        String // The key of the ChaosCard or MicroApp
  winningWorkspaceId String?
  contributions      Contribution[]
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  user        User               @relation(fields: [userId], references: [id])
  userId      String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  workspaceId String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  eventId     String
  createdAt   DateTime           @default(now())

  @@index([eventId])
}

model Integration {
  id                    String            @id @default(cuid())
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId           String
  integrationManifestId String
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([workspaceId])
}


enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  FAILED
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}
