
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole  @default(OPERATOR)
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  agentAlias              String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime? // For the Rite of Reclamation
  firstWhisper            String?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  corePainIndex           Int?

  workspaces              Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[] @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  ownedChaosCards         ChaosCard[] @relation("UserOwnedChaosCards")
  instrumentDiscoveries   InstrumentDiscovery[]
  conversations           Conversation[]
}

model Workspace {
  id                String      @id @default(cuid())
  name              String
  owner             User        @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId           String
  planTier          PlanTier    @default(Apprentice)
  credits           Decimal     @default(0)
  potential         Decimal     @default(0)
  agentActionsUsed  Int         @default(0)
  overageEnabled    Boolean     @default(true)
  unlockedAppIds    String[]    @default([])

  members           User[]      @relation("WorkspaceMembers")
  agents            Agent[]
  contacts          Contact[]
  transactions      Transaction[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  integrations      Integration[]
  instrumentDiscoveries InstrumentDiscovery[]
  activeSystemEffects ActiveSystemEffect[]
  conversations     Conversation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Agent {
  id           String      @id @default(cuid())
  name         String
  type         String
  description  String?
  status       AgentStatus @default(idle)
  
  workspace    Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Contact {
  id          String   @id @default(cuid())
  email       String?  @unique
  firstName   String?
  lastName    String?
  phone       String?

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Transaction {
  id                String            @id @default(cuid())
  type              TransactionType
  amount            Decimal           // Net change to balance.
  description       String
  status            TransactionStatus @default(COMPLETED)
  
  tributeAmount     Decimal?          // Gross amount of the tribute before boon
  boonAmount        Decimal?          // Gross amount of the boon awarded
  instrumentId      String?           // ID of Chaos Card or Folly Instrument
  luckWeight        Float?            // User's luck value at time of tribute
  outcome           String?           // e.g., 'win', 'loss', 'pity_boon'
  potentialChange   Decimal?          @default(0)
  userPsyche        UserPsyche?       // User's psyche at time of tribute

  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId       String
  user              User?             @relation(fields: [userId], references: [id])
  userId            String?

  createdAt         DateTime          @default(now())
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

model SecurityAlert {
  id                String             @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime           @default(now())
  actionableOptions String[]

  workspace         Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId       String
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  lastFetched DateTime?

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model Workflow {
  id           String      @id @default(cuid())
  name         String
  definition   Json
  isActive     Boolean     @default(true)
  triggerType  String      @default("api")

  workspace    Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String
  runs         WorkflowRun[]

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json
  output         Json?
  log            Json?
  
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId     String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId    String

  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

enum IntegrationStatus {
  active
  paused
  error
}

model Integration {
    id                      String            @id @default(cuid())
    workspaceId             String
    workspace               Workspace         @relation(fields: [workspaceId], references: [id])
    integrationManifestId   String // UUID linking to the static manifest
    name                    String
    status                  IntegrationStatus @default(active)
    configDetails           Json? // Store credentials like API keys here, encrypted
    createdAt               DateTime          @default(now())
    updatedAt               DateTime          @updatedAt
}

model Conversation {
    id          String @id @default(cuid())
    userId      String @unique
    user        User   @relation(fields: [userId], references: [id])
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    messages    Json[]
    updatedAt   DateTime @updatedAt
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}

model PulseProfile {
    id                      String    @id @default(cuid())
    user                    User      @relation(fields: [userId], references: [id])
    userId                  String    @unique

    // Sine-Rhythm Engine Parameters
    baselineLuck            Float     @default(0.4) // Center point of the luck wave
    amplitude               Float     @default(0.15) // How high/low the wave goes
    frequency               Float     @default(0.01) // How fast the wave oscillates
    phaseOffset             Float     // Random starting point on the wave
    
    // State Tracking
    lastEventTimestamp      DateTime  @default(now())
    consecutiveLosses       Int       @default(0)
    lastResolvedPhase       PulsePhase @default(EQUILIBRIUM)
    lastInteractionType     PulseInteractionType?

    // Psychological State (PCE) - normalized 0-1
    frustration             Float     @default(0)
    flowState               Float     @default(0)
    riskAversion            Float     @default(0.5)

    // Buffs / Special States
    loadedDieBuffCount      Int?      @default(0)
    nextTributeGuaranteedWin Boolean? @default(false)
    hadesBargainActive      Boolean?  @default(false)

    createdAt               DateTime  @default(now())
    updatedAt               DateTime  @updatedAt
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

model ChaosCard {
  id              String         @id @default(cuid())
  key             String         @unique // e.g., GEOLOGIC_TIME
  name            String
  description     String
  cardClass       ChaosCardClass
  cost            Int
  systemEffect    String
  
  owners          User[]         @relation("UserOwnedChaosCards")
}

model ActiveSystemEffect {
    id          String    @id @default(cuid())
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    cardKey     String // Key of the Chaos Card that created the effect
    createdAt   DateTime  @default(now())
    expiresAt   DateTime
}

model InstrumentDiscovery {
    id              String @id @default(cuid())
    userId          String
    user            User   @relation(fields: [userId], references: [id])
    workspaceId     String
    workspace       Workspace @relation(fields: [workspaceId], references: [id])
    
    instrumentId    String // Can be a MicroApp ID or ChaosCard key
    firstViewedAt   DateTime @default(now())
    converted       Boolean @default(false)
    dtt             Int? // Discovery-to-Tribute Time in minutes
    
    nudgeSentAt     DateTime?
    
    @@unique([userId, instrumentId])
}
