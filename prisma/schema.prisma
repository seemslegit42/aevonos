// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// -------------------------------------
// ENUMS
// -------------------------------------

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}


// -------------------------------------
// MODELS
// -------------------------------------

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password              String? // Auth handled by Firebase, but may be used for seeding
  firstName             String?
  lastName              String?
  role                  UserRole  @default(OPERATOR)
  psyche                UserPsyche @default(ZEN_ARCHITECT)
  agentAlias            String?   @default("BEEP")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  lastLoginAt           DateTime?
  unlockedChaosCardKeys String[]
  hasAbyssalScar        Boolean   @default(false)
  foundingVow           String?
  foundingGoal          String?
  corePainIndex         Float?
  foundingBenediction   String?
  firstWhisper          String?
  firstCommand          String?
  reclamationGraceUntil DateTime?
  canSeeArchive         Boolean   @default(false)
  boons                 Json      @default("[]")

  workspaces            Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces       Workspace[] @relation("WorkspaceOwner")
  transactions          Transaction[]
  pulseProfile          PulseProfile?
  conversation          Conversation?
  discoveries           InstrumentDiscovery[]
  integrations          Integration[]
  contributions         Contribution[]
  securityAlerts        SecurityAlert[]
  sigil                 SovereignSigil?
}

model Workspace {
  id                    String    @id @default(cuid())
  name                  String
  ownerId               String
  owner                 User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members               User[]    @relation("WorkspaceMembers")
  planTier              PlanTier  @default(Apprentice)
  credits               Decimal   @default(100.0)
  potential             Decimal   @default(0.0)
  agentActionsUsed      Int       @default(0)
  unlockedAppIds        String[]  @default([])
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  overageEnabled        Boolean   @default(false)

  agents                Agent[]
  contacts              Contact[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  securityAlerts        SecurityAlert[]
  threatFeeds           ThreatFeed[]
  securityEdicts        SecurityEdict[]
  transactions          Transaction[]
  integrations          Integration[]
  conversation          Conversation[]
  discoveries           InstrumentDiscovery[]
  activeSystemEffects   ActiveSystemEffect[]
  potentialAccrualLogs  PotentialAccrualLog[]
  contributions         Contribution[]

  @@index([ownerId])
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([workspaceId])
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, email])
  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?             @relation(fields: [userId], references: [id])

  @@index([workspaceId])
}

model Transaction {
  id                  String            @id @default(cuid())
  workspaceId         String
  workspace           Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId              String?
  user                User?             @relation(fields: [userId], references: [id])
  type                TransactionType
  amount              Decimal
  description         String
  status              TransactionStatus @default(PENDING)
  createdAt           DateTime          @default(now())
  aegisSignature      String?
  instrumentId        String?
  luckWeight          Float?
  outcome             String?
  boonAmount          Decimal?
  tributeAmount       Decimal?
  judasFactor         Decimal?
  userPsyche          UserPsyche?
  isTransmutation     Boolean           @default(false)
  realWorldAmount     Float?
  realWorldCurrency   String?
  vendorName          String?
  transmutationTithe  Decimal?

  @@index([workspaceId])
  @@index([userId])
}

model PulseProfile {
  id                         String                @id @default(cuid())
  userId                     String                @unique
  user                       User                  @relation(fields: [userId], references: [id])
  baselineLuck               Float                 @default(0.4)
  amplitude                  Float                 @default(0.15)
  frequency                  Float                 @default(0.01)
  phaseOffset                Float
  consecutiveLosses          Int                   @default(0)
  lastEventTimestamp         DateTime              @default(now())
  lastResolvedPhase          PulsePhase            @default(EQUILIBRIUM)
  lastInteractionType        PulseInteractionType  @default(COMMAND_SUCCESS)
  frustration                Float                 @default(0.0)
  flowState                  Float                 @default(0.0)
  riskAversion               Float                 @default(0.5)
  loadedDieBuffCount         Int                   @default(0)
  nextTributeGuaranteedWin   Boolean               @default(false)
  hadesBargainActive         Boolean               @default(false)
}

model ChaosCard {
  id           String       @id @default(cuid())
  key          String       @unique // e.g., GEOLOGIC_TIME
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Float
  systemEffect String?
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  cardKey     String
  expiresAt   DateTime
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId  String    // Corresponds to an artifact ID
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false)
  dtt           Int? // Discovery-to-Tribute time in minutes
  nudgeSentAt   DateTime?
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Json     @default("[]")
  updatedAt   DateTime @updatedAt
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  definition   Json
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  workflowRuns WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json
  output         Json?
  log            Json[]
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model ThreatFeed {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  url         String
}

model SecurityEdict {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  userId                String
  user                  User              @relation(fields: [userId], references: [id])
  integrationManifestId String // This will be a UUID from our manifests config
  name                  String // User-defined name for this instance
  status                IntegrationStatus @default(active)
  configDetails         Json // Encrypted credentials and settings
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model PotentialAccrualLog {
  id               String    @id @default(cuid())
  workspaceId      String
  workspace        Workspace @relation(fields: [workspaceId], references: [id])
  userId           String
  instrumentId     String
  createdAt        DateTime  @default(now())
  luckWeight       Float
  potentialAwarded Decimal
  narrativeContext String?
  aegisSignature   String?
}

model SovereignSigil {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model Renunciation {
  id                String   @id @default(cuid())
  userId            String
  renouncedItemType String
  renouncedItemName String
  valueInX          BigInt
  createdAt         DateTime @default(now())
  aegisSignature    String
}

model GlobalAgenticEvent {
  id                 String       @id @default(cuid())
  eventName          String
  status             EventStatus  @default(ACTIVE)
  expiresAt          DateTime
  poolTarget         Decimal
  currentPool        Decimal      @default(0)
  shardReward        String? // e.g., A Chaos Card ID
  winningWorkspaceId String?
  createdAt          DateTime     @default(now())

  contributions Contribution[]
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  createdAt   DateTime           @default(now())
}
