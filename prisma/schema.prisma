// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model User {
  id                    String     @id @default(cuid())
  email                 String     @unique
  password              String
  firstName             String?
  lastName              String?
  role                  UserRole   @default(OPERATOR)
  psyche                UserPsyche @default(ZEN_ARCHITECT)
  agentAlias            String?
  lastLoginAt           DateTime?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  foundingVow           String?
  foundingGoal          String?
  corePainIndex         Int?
  foundingBenediction   String?
  reclamationGraceUntil DateTime?

  workspaces            Workspace[]           @relation("WorkspaceMembers")
  ownedWorkspaces       Workspace[]           @relation("WorkspaceOwner")
  transactions          Transaction[]
  conversations         Conversation[]
  ownedChaosCards       ChaosCard[]
  pulseProfile          PulseProfile?
  instrumentDiscoveries InstrumentDiscovery[]
}

model Workspace {
  id                 String               @id @default(cuid())
  name               String
  ownerId            String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  planTier           PlanTier             @default(Apprentice)
  credits            Decimal              @default(0.0)
  agentActionsUsed   Int                  @default(0)
  overageEnabled     Boolean              @default(false)
  unlockedAppIds     String[]             @default([])
  owner              User                 @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members            User[]               @relation("WorkspaceMembers")
  agents             Agent[]
  contacts           Contact[]
  transactions       Transaction[]
  securityAlerts     SecurityAlert[]
  workflows          Workflow[]
  workflowRuns       WorkflowRun[]
  conversations      Conversation[]
  threatFeeds        ThreatFeed[]
  integrations       Integration[]
  instrumentDiscoveries InstrumentDiscovery[]
  activeSystemEffects ActiveSystemEffect[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, email])
}

model Transaction {
  id           String            @id @default(cuid())
  workspaceId  String
  userId       String?
  agentId      String?
  type         TransactionType
  amount       Decimal
  description  String
  status       TransactionStatus @default(PENDING)
  createdAt    DateTime          @default(now())
  instrumentId String?
  luckWeight   Float?
  outcome      String?
  boonAmount   Decimal?
  userPsyche   UserPsyche?
  workspace    Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user         User?             @relation(fields: [userId], references: [id])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean       @default(true)
  triggerType String        @default("api")
  workspaceId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  status         WorkflowRunStatus
  startedAt      DateTime
  finishedAt     DateTime?
  triggerPayload Json?
  output         Json?
  log            Json?
  workspaceId    String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  messages    Json
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ChaosCard {
  id           String         @id @default(cuid())
  key          String         @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  owners       User[]
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  cardKey     String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, cardKey])
}

model PulseProfile {
  id                 String     @id @default(cuid())
  userId             String     @unique
  baselineLuck       Float      @default(0.5)
  amplitude          Float      @default(0.15)
  frequency          Float      @default(0.01)
  phaseOffset        Float
  lastEventTimestamp DateTime   @default(now())
  consecutiveLosses  Int        @default(0)
  lastResolvedPhase  PulsePhase @default(EQUILIBRIUM)
  user               User       @relation(fields: [userId], references: [id])
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  workspaceId   String
  instrumentId  String
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false)
  dtt           Int?
  nudgeSentAt   DateTime?
  user          User      @relation(fields: [userId], references: [id])
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, instrumentId])
}
