// datasource db
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// generator client
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// ENUMS
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}


// MODELS

model User {
  id                      String   @id @default(cuid())
  email                   String   @unique
  firstName               String?
  lastName                String?
  role                    UserRole @default(OPERATOR)
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  agentAlias              String?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  firstCommand            String?
  corePainIndex           Float?
  canSeeArchive           Boolean  @default(false)
  boons                   Json     @default("[]")
  unlockedChaosCardKeys   String[]
  hasAbyssalScar          Boolean  @default(false)
  reclamationGraceUntil   DateTime?

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  lastLoginAt             DateTime?

  workspaces              Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[] @relation("WorkspaceOwner")

  pulseProfile            PulseProfile?
  transactions            Transaction[]
  contributions           Contribution[]
  securityAlerts          SecurityAlert[]
  discoveries             InstrumentDiscovery[]
  conversation            Conversation?
  renunciations           Renunciation[]
}

model Workspace {
  id                      String     @id @default(cuid())
  name                    String
  planTier                PlanTier   @default(Apprentice)
  credits                 Decimal    @default(100.0)
  potential               Decimal    @default(0.0)
  agentActionsUsed        Int        @default(0)
  unlockedAppIds          String[]
  overageEnabled          Boolean    @default(true)

  ownerId                 String
  owner                   User       @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members                 User[]     @relation("WorkspaceMembers")

  agents                  Agent[]
  contacts                Contact[]
  securityAlerts          SecurityAlert[]
  transactions            Transaction[]
  discoveries             InstrumentDiscovery[]
  conversations           Conversation[]
  threatFeeds             ThreatFeed[]
  securityEdicts          SecurityEdict[]
  integrations            Integration[]
  workflows               Workflow[]
  workflowRuns            WorkflowRun[]
  contributions           Contribution[]
  potentialAccrualLogs    PotentialAccrualLog[]
  activeSystemEffects     ActiveSystemEffect[]

  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
}

model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus @default(idle)

  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Contact {
  id           String    @id @default(cuid())
  firstName    String?
  lastName     String?
  email        String?
  phone        String?

  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  actionableOptions String[]

  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)

  timestamp         DateTime          @default(now())
}

model Transaction {
  id                      String            @id @default(cuid())
  type                    TransactionType
  amount                  Decimal
  description             String
  status                  TransactionStatus @default(PENDING)

  // For Tributes
  instrumentId            String?
  luckWeight              Float?
  outcome                 String?
  tributeAmount           Decimal?
  boonAmount              Decimal?
  judasFactor             Decimal?
  userPsyche              UserPsyche?

  // For Transmutations
  isTransmutation         Boolean?          @default(false)
  realWorldAmount         Decimal?
  realWorldCurrency       String?
  vendorName              String?
  transmutationTithe      Decimal?

  aegisSignature          String?

  workspaceId             String
  workspace               Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId                  String?
  user                    User?             @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt               DateTime          @default(now())
}

model PulseProfile {
  id                        String      @id @default(cuid())
  userId                    String      @unique
  user                      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  amplitude                 Float       @default(0.15)
  frequency                 Float       @default(0.01)
  phaseOffset               Float       @default(0)
  baselineLuck              Float       @default(0.4)

  lastEventTimestamp        DateTime    @default(now())
  consecutiveLosses         Int         @default(0)
  lastResolvedPhase         PulsePhase?
  lastInteractionType       PulseInteractionType?

  frustration               Float       @default(0.0)
  flowState                 Float       @default(0.0)
  riskAversion              Float       @default(0.5)

  nextTributeGuaranteedWin  Boolean?
  loadedDieBuffCount        Int?
  hadesBargainActive        Boolean?
}

model InstrumentDiscovery {
  id                      String      @id @default(cuid())
  instrumentId            String // e.g., 'spectre-intelligence-suite'
  converted               Boolean     @default(false)
  dtt                     Int? // Discovery-to-Tribute time in minutes
  nudgeSentAt             DateTime?

  userId                  String
  user                    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId             String
  workspace               Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  firstViewedAt           DateTime    @default(now())

  @@unique([userId, instrumentId])
}

model Conversation {
  id          String    @id @default(cuid())
  messages    Json      @default("[]") // Array of BaseMessage JSON objects

  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  updatedAt   DateTime  @updatedAt
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model SecurityEdict {
  id          String    @id @default(cuid())
  description String
  isActive    Boolean   @default(true)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
}

model Integration {
  id                    String            @id @default(cuid())
  name                  String
  integrationManifestId String // Maps to the manifest ID
  status                IntegrationStatus @default(active)
  configDetails         Json?

  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model Workflow {
  id            String   @id @default(cuid())
  name          String
  definition    Json
  isActive      Boolean  @default(true)
  triggerType   String   @default("api")

  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs          WorkflowRun[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?

  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model ChaosCard {
  key             String         @id
  name            String
  description     String
  cardClass       ChaosCardClass
  cost            Int
  systemEffect    String?
}

model Renunciation {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  renouncedItemType String // "X_CREDITS", "MICRO_APP"
  renouncedItemName String
  valueInX          Decimal
  createdAt         DateTime @default(now())
  aegisSignature    String
}

model GlobalAgenticEvent {
  id                  String      @id @default(cuid())
  eventName           String
  status              EventStatus @default(ACTIVE)
  poolTarget          Decimal
  currentPool         Decimal     @default(0)
  shardReward         String
  expiresAt           DateTime
  winningWorkspaceId  String?

  contributions       Contribution[]

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Contribution {
  id                  String      @id @default(cuid())
  amount              Decimal

  eventId             String
  event               GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  workspaceId         String
  workspace           Workspace          @relation(fields: [workspaceId], references: [id])
  userId              String
  user                User               @relation(fields: [userId], references: [id])

  createdAt           DateTime           @default(now())
}

model PotentialAccrualLog {
  id                  String      @id @default(cuid())
  instrumentId        String
  luckWeight          Float
  potentialAwarded    Decimal
  narrativeContext    String
  aegisSignature      String?

  userId              String
  workspaceId         String
  workspace           Workspace   @relation(fields: [workspaceId], references: [id])

  createdAt           DateTime    @default(now())
}

model ActiveSystemEffect {
  id                  String      @id @default(cuid())
  cardKey             String
  expiresAt           DateTime

  workspaceId         String      @unique // A workspace can only have one effect at a time
  workspace           Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt           DateTime    @default(now())
}
