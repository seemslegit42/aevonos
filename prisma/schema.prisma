// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                 @id @default(cuid())
  email                   String?                @unique
  password                String?
  firstName               String?
  lastName                String?
  emailVerified           DateTime?
  image                   String?
  role                    UserRole               @default(OPERATOR)
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  agentAlias              String?                @default("BEEP")
  lastLoginAt             DateTime?
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Float?
  foundingBenediction     String?
  firstWhisper            String?
  reclamationGraceUntil   DateTime?

  accounts                Account[]
  sessions                Session[]
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]            @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  ownedChaosCards         ChaosCard[]
  instrumentDiscoveries   InstrumentDiscovery[]

  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt

  @@map("users")
}

model Workspace {
  id                      String                 @id @default(cuid())
  name                    String
  planTier                PlanTier               @default(Apprentice)
  credits                 Decimal                @default(0.0)
  agentActionsUsed        Int                    @default(0)
  overageEnabled          Boolean                @default(true)
  unlockedAppIds          String[]               @default([])

  ownerId                 String
  owner                   User                   @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  
  members                 User[]                 @relation("WorkspaceMembers")
  agents                  Agent[]
  workflows               Workflow[]
  workflowRuns            WorkflowRun[]
  contacts                Contact[]
  securityAlerts          SecurityAlert[]
  threatFeeds             ThreatFeed[]
  transactions            Transaction[]
  conversations           Conversation[]
  activeSystemEffects     ActiveSystemEffect[]
  instrumentDiscoveries   InstrumentDiscovery[]
  
  // App-specific data models
  intelligenceCases       IntelligenceCase[]
  inventoryProducts       Product[]
  inventorySuppliers      Supplier[]
  inventoryPurchaseOrders PurchaseOrder[]
  fileSystemDirectories   Directory[]
  laheyLogEntries         LaheyLogEntry[]
  expenseEntries          ExpenseEntry[]
  receipts                Receipt[]
  patricktSagas           PatricktSaga[]

  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}


// AGENT & WORKFLOW MODELS
model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus @default(idle)
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id])
  configuration Json?
  lastHeartbeat DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workflow {
  id            String        @id @default(cuid())
  name          String
  isActive      Boolean       @default(true)
  triggerType   String        @default("api") // e.g., api, schedule, event
  definition    Json
  workspaceId   String
  workspace     Workspace     @relation(fields: [workspaceId], references: [id])
  runs          WorkflowRun[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json[]
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Json[]
  updatedAt   DateTime @updatedAt
}

// SECURITY MODELS (AEGIS)
model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, url])
}

// ECONOMIC MODELS (OBELISK & KLEPSYDRA)
model Transaction {
  id              String          @id @default(cuid())
  workspaceId     String
  workspace       Workspace       @relation(fields: [workspaceId], references: [id])
  userId          String?
  user            User?           @relation(fields: [userId], references: [id])
  agentId         String?
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus @default(PENDING)
  
  // Klepsydra Fields
  instrumentId    String?
  luckWeight      Float?
  tributeAmount   Decimal?
  outcome         String?
  boonAmount      Decimal?
  userPsyche      UserPsyche?

  createdAt       DateTime        @default(now())
}

model PulseProfile {
  id                    String        @id @default(cuid())
  userId                String        @unique
  user                  User          @relation(fields: [userId], references: [id])
  baselineLuck          Float         @default(0.5)
  amplitude             Float         @default(0.15)
  frequency             Float         @default(0.01)
  phaseOffset           Float
  consecutiveLosses     Int           @default(0)
  lastEventTimestamp    DateTime      @default(now())
  frustration           Float         @default(0)
  flowState             Float         @default(0)
  riskAversion          Float         @default(0.5)
  lastResolvedPhase     PulsePhase    @default(EQUILIBRIUM)
  lastInteractionType   PulseInteractionType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChaosCard {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String
  cardClass   ChaosCardClass
  cost        Int
  systemEffect String
  owners      User[]
}

model ActiveSystemEffect {
  id           String    @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  cardKey      String
  createdAt    DateTime  @default(now())
  expiresAt    DateTime
}

model InstrumentDiscovery {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId   String
  firstViewedAt  DateTime  @default(now())
  nudgeSentAt    DateTime?
  converted      Boolean   @default(false)
  dtt            Int? // Discovery to Tribute Time (in minutes)

  @@unique([userId, instrumentId])
}


// CRM MODELS
model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([workspaceId, email])
}


// --- MICRO-APP SPECIFIC DATA MODELS ---

// INFIDELITY RADAR
model IntelligenceCase {
  id              String   @id @default(cuid())
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id])
  targetName      String
  osintReport     Json?
  analysisResult  Json?
  decoyResult     Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// INVENTORY DAEMON
model Product {
  id            String   @id @default(cuid())
  name          String
  sku           String   @unique
  stockLevel    Int
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  purchaseOrders PurchaseOrder[]
}

model Supplier {
  id            String   @id @default(cuid())
  name          String
  contactEmail  String?
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
  id             String   @id @default(cuid())
  productId      String
  product        Product  @relation(fields: [productId], references: [id])
  supplierId     String
  supplier       Supplier @relation(fields: [supplierId], references: [id])
  quantity       Int
  status         String // e.g., PENDING, SHIPPED, RECEIVED
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id])
  createdAt      DateTime @default(now())
}

// FILE EXPLORER
model Directory {
  id          String      @id @default(cuid())
  name        String
  parentId    String?
  parent      Directory?  @relation("SubDirectories", fields: [parentId], references: [id])
  children    Directory[] @relation("SubDirectories")
  files       File[]
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime    @default(now())
}

model File {
  id          String    @id @default(cuid())
  name        String
  type        String // e.g., 'pdf', 'txt'
  size        Int
  directoryId String
  directory   Directory @relation(fields: [directoryId], references: [id])
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
}

// LAHEY SURVEILLANCE
model LaheyLogEntry {
  id              String   @id @default(cuid())
  employee        String
  timestamp       DateTime @default(now())
  event           String
  durationMinutes Int?
  shitstormIndex  Int
  laheyCommentary String
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id])
}

// LUCILLE BLUTH
model ExpenseEntry {
  id                  String   @id @default(cuid())
  description         String
  amount              Decimal
  category            String
  judgmentalRemark    String
  suggestedCategory   String?
  workspaceId         String
  workspace           Workspace @relation(fields: [workspaceId], references: [id])
  createdAt           DateTime @default(now())
}

// PAPER TRAIL P.I.
model Receipt {
  id              String   @id @default(cuid())
  vendor          String
  amount          Decimal
  date            DateTime
  lead            String
  imageUrl        String
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id])
  createdAt       DateTime @default(now())
}

// PATRICKT
model PatricktSaga {
  id             String @id @default(cuid())
  workspaceId    String @unique
  workspace      Workspace @relation(fields: [workspaceId], references: [id])
  martyrPoints   Int @default(0)
  forgivenessBank Int @default(100)
  events         Json[]
}


// ENUMS
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}

// INTEGRATIONS
model Integration {
  id                    String        @id @default(cuid())
  workspaceId           String
  workspace             Workspace     @relation(fields: [workspaceId], references: [id])
  integrationManifestId String
  name                  String
  status                IntegrationStatus @default(inactive)
  configDetails         Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum IntegrationStatus {
  active
  inactive
  error
}
