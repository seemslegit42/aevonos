
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================================
//  Auth.js Core Models
// ===================================

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
 
  @@unique([identifier, token])
}

// ===================================
//  AeVonOS Core Models
// ===================================

model User {
  id                    String    @id @default(cuid())
  name                  String?
  firstName             String?
  lastName              String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole  @default(OPERATOR)
  psyche                UserPsyche @default(ZEN_ARCHITECT)
  agentAlias            String?
  lastLoginAt           DateTime? @default(now())
  foundingVow           String?
  foundingGoal          String?
  corePainIndex         Int?
  foundingBenediction   String?
  firstWhisper          String?
  reclamationGraceUntil DateTime?

  // Auth Relations
  accounts      Account[]
  sessions      Session[]
  
  // Workspace Relations
  workspaces    Workspace[] @relation("Members")
  ownedWorkspace Workspace? @relation("Owner")

  // App & Economic Relations
  transactions      Transaction[]
  pulseProfile      PulseProfile?
  ownedChaosCards   ChaosCard[]
  instrumentDiscovery InstrumentDiscovery[]
  expenses          Expense[]
  scannedReceipts   ScannedReceipt[]
  loggedSagaEvents  LoggedSagaEvent[]
}

model Workspace {
  id                String    @id @default(cuid())
  name              String
  ownerId           String
  owner             User      @relation("Owner", fields: [ownerId], references: [id])
  members           User[]    @relation("Members")
  planTier          PlanTier  @default(Apprentice)
  credits           Decimal   @default(0)
  agentActionsUsed  Int       @default(0)
  overageEnabled    Boolean   @default(true)
  unlockedAppIds    String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  agents              Agent[]
  workflows           Workflow[]
  workflowRuns        WorkflowRun[]
  contacts            Contact[]
  conversations       Conversation[]
  threatFeeds         ThreatFeed[]
  securityAlerts      SecurityAlert[]
  transactions        Transaction[]
  instrumentDiscovery InstrumentDiscovery[]
  activeSystemEffects ActiveSystemEffect[]
  integrations        Integration[]
  
  // Micro-App Data Models
  directories         Directory[]
  files               File[]
  products            Product[]
  suppliers           Supplier[]
  purchaseOrders      PurchaseOrder[]
  intelligenceCases   IntelligenceCase[]
  activityLogs        ActivityLog[]
  expenses            Expense[]
  scannedReceipts     ScannedReceipt[]
  loggedSagaEvents    LoggedSagaEvent[]
}

model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Workflow {
  id             String        @id @default(cuid())
  name           String
  isActive       Boolean       @default(true)
  triggerType    String        @default("api")
  definition     Json
  workspaceId    String
  workspace      Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs           WorkflowRun[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model WorkflowRun {
  id              String             @id @default(cuid())
  workflowId      String
  workflow        Workflow           @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId     String
  workspace       Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status          WorkflowRunStatus
  log             Json?
  triggerPayload  Json?
  output          Json?
  startedAt       DateTime           @default(now())
  finishedAt      DateTime?
}

model Contact {
    id        String   @id @default(cuid())
    email     String?
    firstName String?
    lastName  String?
    phone     String?
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  messages    Json
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  updatedAt   DateTime @updatedAt
}

// ===================================
//  Security & Aegis Models
// ===================================

model ThreatFeed {
  id          String   @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

// ===================================
//  Economic Engine Models
// ===================================

model Transaction {
  id           String          @id @default(cuid())
  workspaceId  String
  workspace    Workspace       @relation(fields: [workspaceId], references: [id])
  userId       String?
  user         User?           @relation(fields: [userId], references: [id])
  agentId      String?
  type         TransactionType
  amount       Decimal
  description  String
  status       TransactionStatus
  createdAt    DateTime        @default(now())
  
  // Fields for Folly Instrument transactions
  instrumentId  String?
  luckWeight    Float?
  outcome       String?
  boonAmount    Decimal?
  userPsyche    UserPsyche?
}

model PulseProfile {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id])
  baselineLuck       Float
  amplitude          Float
  frequency          Float
  phaseOffset        Float
  consecutiveLosses  Int      @default(0)
  lastEventTimestamp DateTime @default(now())
  lastResolvedPhase  PulsePhase @default(EQUILIBRIUM)
}

model ChaosCard {
  id                String            @id @default(cuid())
  key               String            @unique // e.g., 'GEOLOGIC_TIME'
  name              String
  description       String
  cardClass         ChaosCardClass
  cost              Int
  systemEffect      String
  
  owners            User[]
}

model ActiveSystemEffect {
    id              String @id @default(cuid())
    workspaceId     String
    workspace       Workspace @relation(fields: [workspaceId], references: [id])
    cardKey         String
    createdAt       DateTime @default(now())
    expiresAt       DateTime
    
    @@unique([workspaceId, cardKey])
}

// ===================================
//  Ecosystem Models
// ===================================

model InstrumentDiscovery {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  workspaceId     String
  workspace       Workspace   @relation(fields: [workspaceId], references: [id])
  instrumentId    String      // ID of the MicroApp or ChaosCard
  firstViewedAt   DateTime    @default(now())
  converted       Boolean     @default(false)
  dtt             Int?        // Discovery-to-Tribute time in minutes
  nudgeSentAt     DateTime?
  
  @@unique([userId, instrumentId])
}

model Integration {
    id                String @id @default(cuid())
    workspaceId       String
    workspace         Workspace @relation(fields: [workspaceId], references: [id])
    integrationManifestId String
    name              String
    status            IntegrationStatus
    configDetails     Json
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
}

// ===================================
// Micro-App Data Models
// ===================================

// --- File Explorer ---
model Directory {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  parent   Directory? @relation("Subdirectories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String?

  subdirectories Directory[] @relation("Subdirectories")
  files          File[]
}

model File {
  id        String   @id @default(cuid())
  name      String
  fileType  String
  size      Int
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  directory   Directory @relation(fields: [directoryId], references: [id], onDelete: Cascade)
  directoryId String
}

// --- Inventory Daemon ---
model Product {
  id           String   @id @default(cuid())
  name         String
  sku          String   @unique
  stockLevel   Int
  reorderLevel Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  purchaseOrderLines PurchaseOrderLineItem[]
}

model Supplier {
    id        String   @id @default(cuid())
    name      String
    contactEmail String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    
    purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
    id        String   @id @default(cuid())
    status    String // e.g., 'Draft', 'Submitted', 'Fulfilled'
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    
    supplier   Supplier @relation(fields: [supplierId], references: [id])
    supplierId String

    lineItems PurchaseOrderLineItem[]
}

model PurchaseOrderLineItem {
    id        String   @id @default(cuid())
    quantity  Int
    unitPrice Decimal
    
    order   PurchaseOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId String

    product   Product @relation(fields: [productId], references: [id])
    productId String
}

// --- Infidelity Radar ---
model IntelligenceCase {
  id             String @id @default(cuid())
  targetName     String
  status         String // e.g., 'Active', 'Closed'
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId    String

  osintReport    Json?
  analysisReport Json?
  decoyReport    Json?
  dossierReport  Json?
}

// --- Lahey Surveillance ---
model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  event     String
  details   Json?
  timestamp DateTime @default(now())
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

// --- Lucille Bluth ---
model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Decimal
  category    String
  judgement   String?
  date        DateTime @default(now())
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// --- Paper Trail ---
model ScannedReceipt {
  id            String   @id @default(cuid())
  vendor        String
  amount        Decimal
  transactionDate DateTime
  lead          String?
  imageUrl      String?
  createdAt     DateTime @default(now())
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// --- Patrickt ---
model LoggedSagaEvent {
  id           String            @id @default(cuid())
  category     SagaEventCategory
  description  String
  martyrPoints Int
  createdAt    DateTime          @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

// ===================================
//  Enums
// ===================================

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
    PENDING
    COMPLETED
    FAILED
}

enum PulsePhase {
    CREST
    TROUGH
    EQUILIBRIUM
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum IntegrationStatus {
    active
    inactive
    error
}

enum SagaEventCategory {
  DRUG_DEALS
  FRIEND_BETRAYALS
  GIRLFRIEND_DRAMA
  CLASSIC_CHAOS
  REDEMPTION_ATTEMPTS
}
