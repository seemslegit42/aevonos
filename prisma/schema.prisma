// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(cuid())
  email                String        @unique
  password             String?
  firstName            String?
  lastName             String?
  role                 UserRole      @default(OPERATOR)
  lastLoginAt          DateTime?
  ownedChaosCards      ChaosCard[]
  pulseProfile         PulseProfile?
  transactions         Transaction[]
  workspacesOwned      Workspace[]   @relation("WorkspaceOwner")
  workspaceMemberships Workspace[]   @relation("WorkspaceMembers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id               String        @id @default(cuid())
  name             String
  ownerId          String
  owner            User          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members          User[]        @relation("WorkspaceMembers")
  agents           Agent[]
  securityAlerts   SecurityAlert[]
  contacts         Contact[]
  workflows        Workflow[]
  workflowRuns     WorkflowRun[]
  threatFeeds      ThreatFeed[]
  integrations     Integration[]
  transactions     Transaction[]
  planTier         PlanTier      @default(Apprentice)
  credits          Decimal       @default(0.0)
  agentActionsUsed Int           @default(0)
  overageEnabled   Boolean       @default(true)
  unlockedAppIds   String[]      @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model Workflow {
  id             String          @id @default(cuid())
  workspaceId    String
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name           String
  isActive       Boolean         @default(true)
  triggerType    String          @default("api")
  definition     Json
  runs           WorkflowRun[]
  
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  
  startedAt      DateTime?
  finishedAt     DateTime?

  @@index([workspaceId])
  @@index([workflowId])
}

model ThreatFeed {
  id          String   @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@index([workspaceId])
}

model Integration {
  id                    String @id @default(cuid())
  workspaceId           String
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String
  name                  String
  status                String
  configDetails         Json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model Transaction {
  id          String          @id @default(cuid())
  workspaceId String
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type        TransactionType
  amount      Decimal
  description String
  status      TransactionStatus @default(COMPLETED)
  userId      String?
  user        User?           @relation(fields: [userId], references: [id])
  agentId     String?

  createdAt DateTime @default(now())

  @@index([workspaceId])
  @@index([userId])
}

model ChaosCard {
  id            String   @id @default(cuid())
  key           String   @unique
  name          String
  description   String
  cardClass     ChaosCardClass
  cost          Int
  systemEffect  String
  ownedBy       User[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PulseProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Amplitude: Â± swing from base luck. 0.2 means a 20% swing.
  amplitude        Float    @default(0.2)
  // Frequency: How many full cycles per minute. 0.01 means 1 cycle every 100 minutes.
  frequency        Float    @default(0.01)
  // Phase Offset: Randomizes user start point in the sine wave to de-sync patterns.
  phaseOffset      Float    @default(0.0)
  lastWinTimestamp DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}
