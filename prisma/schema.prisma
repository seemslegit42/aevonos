// This is your Prisma schema file from the root directory,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  firstName               String?
  lastName                String?
  role                    UserRole  @default(OPERATOR)
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  agentAlias              String?
  unlockedChaosCardKeys   String[]  @default([])
  hasAbyssalScar          Boolean   @default(false)
  foundingVow             String?
  foundingGoal            String?
  firstWhisper            String?
  firstCommand            String?
  corePainIndex           Int?
  foundingBenediction     String?
  reclamationGraceUntil   DateTime?


  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  lastLoginAt             DateTime?

  workspaces              Workspace[] @relation("WorkspaceMembers")
  ownedWorkspace          Workspace?  @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  contributions           Contribution[]
  discoveries             InstrumentDiscovery[]
}

model Workspace {
  id                    String      @id @default(cuid())
  name                  String
  ownerId               String      @unique
  planTier              PlanTier    @default(Apprentice)
  credits               Decimal     @default(0)
  potential             Decimal     @default(0)
  agentActionsUsed      Int         @default(0)
  unlockedAppIds        String[]    @default([])
  
  owner                 User        @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members               User[]      @relation("WorkspaceMembers")
  
  agents                Agent[]
  contacts              Contact[]
  transactions          Transaction[]
  integrations          Integration[]
  securityAlerts        SecurityAlert[]
  threatFeeds           ThreatFeed[]
  securityEdicts        SecurityEdict[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  pulseEngineConfig     PulseEngineConfig?
  activeSystemEffects   ActiveSystemEffect[]
  
  contributions         Contribution[]
  winningEvent          GlobalAgenticEvent[]
  potentialAccrualLogs  PotentialAccrualLog[]
  discoveries           InstrumentDiscovery[]
}

model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus @default(idle)
  configuration Json?
  
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Contact {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String?
  phone         String?
  
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([workspaceId, email])
}

model Transaction {
  id                  String             @id @default(cuid())
  workspaceId         String
  workspace           Workspace          @relation(fields: [workspaceId], references: [id])
  type                TransactionType
  amount              Decimal            @db.Decimal(18, 4) // Supports both credit changes and tribute net results
  description         String
  status              TransactionStatus  @default(PENDING)
  aegisSignature      String?

  // Optional fields for tracking agent/user actions
  userId              String?
  user                User?              @relation(fields: [userId], references: [id])
  agentId             String?
  
  // Fields specific to Folly Instruments
  instrumentId        String?
  luckWeight          Float?
  outcome             String?
  tributeAmount       Decimal?           @db.Decimal(18, 4) // The gross amount of the tribute
  boonAmount          Decimal?           @db.Decimal(18, 4) // The gross amount of the boon
  userPsyche          UserPsyche?
  judasFactor         Decimal?           // The reduction factor in a "hollow win"
  
  // Fields for real-world transmutations
  isTransmutation     Boolean            @default(false)
  realWorldAmount     Decimal?           @db.Decimal(18, 2)
  realWorldCurrency   String?
  vendorName          String?
  transmutationTithe  Decimal?           @db.Decimal(18, 4)

  createdAt           DateTime           @default(now())
}

model Integration {
  id                      String              @id @default(cuid())
  workspaceId             String
  workspace               Workspace           @relation(fields: [workspaceId], references: [id])
  integrationManifestId   String              // Links to the static manifest ID in code
  name                    String              // User-defined name for this instance
  status                  IntegrationStatus   @default(active)
  configDetails           Json                // Encrypted API keys, etc.
  
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  
  @@unique([workspaceId, name])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  userId            String?           @map("user_id") // Optional user associated with the alert
}

model ThreatFeed {
  id            String    @id @default(cuid())
  url           String
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  createdAt     DateTime  @default(now())
}

model SecurityEdict {
  id            String    @id @default(cuid())
  description   String
  isActive      Boolean   @default(true)
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  createdAt     DateTime  @default(now())
}

model Workflow {
  id            String          @id @default(cuid())
  workspaceId   String
  workspace     Workspace       @relation(fields: [workspaceId], references: [id])
  name          String
  definition    Json
  isActive      Boolean         @default(true)
  triggerType   String          @default("api") // api, schedule, event
  
  runs          WorkflowRun[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workspaceId    String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model PulseProfile {
  id                       String               @id @default(cuid())
  userId                   String               @unique
  user                     User                 @relation(fields: [userId], references: [id])
  
  // Sine-Rhythm Engine Parameters
  amplitude                Float                @default(0.15)
  frequency                Float                @default(0.01)
  phaseOffset              Float
  baselineLuck             Float                @default(0.4)
  
  // State Trackers
  lastEventTimestamp       DateTime             @default(now())
  consecutiveLosses        Int                  @default(0)
  lastResolvedPhase        PulsePhase?
  lastInteractionType      PulseInteractionType?

  // Dynamic Psychological State
  frustration              Float                @default(0.1)
  flowState                Float                @default(0.1)
  riskAversion             Float                @default(0.5)

  // One-time buffs from Mercenary Cards
  nextTributeGuaranteedWin Boolean?
  loadedDieBuffCount       Int?
  hadesBargainActive       Boolean?
}

// Global settings for the Klepsydra Engine, tunable by the Architect
model PulseEngineConfig {
    id                      String   @id @default(cuid())
    workspaceId             String   @unique
    workspace               Workspace @relation(fields: [workspaceId], references: [id])
    pityThreshold           Int      @default(5)
    festivalTriggerPercent  Int      @default(20) // Percentage drop in Tribute Velocity that triggers event
    transmutationTithe      Decimal  @default(0.18) @db.Decimal(5, 4)
}

model ActiveSystemEffect {
  id            String    @id @default(cuid())
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  cardKey       String
  createdAt     DateTime  @default(now())
  expiresAt     DateTime
  
  @@index([workspaceId, expiresAt])
}

model Conversation {
  id            String    @id @default(cuid())
  userId        String
  workspaceId   String
  messages      Json      // Array of serialized BaseMessage objects
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([userId, workspaceId])
}

model ChaosCard {
  key             String          @id
  name            String
  description     String
  cardClass       ChaosCardClass
  cost            Int
  systemEffect    String
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

// Models for the Inventory Daemon Demo
model Product {
  id              String            @id @default(cuid())
  name            String
  description     String?
  stockLevel      Int               @default(0)
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id])
  
  purchaseOrderItems PurchaseOrderItem[]
}

model Supplier {
  id              String            @id @default(cuid())
  name            String
  contactEmail    String?
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id])
  
  purchaseOrders  PurchaseOrder[]
}

model PurchaseOrder {
  id              String              @id @default(cuid())
  workspaceId     String
  workspace       Workspace           @relation(fields: [workspaceId], references: [id])
  supplierId      String
  supplier        Supplier            @relation(fields: [supplierId], references: [id])
  status          PurchaseOrderStatus @default(PENDING)
  createdAt       DateTime            @default(now())
  
  items           PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  productId       String
  product         Product       @relation(fields: [productId], references: [id])
  quantity        Int
}

// Models for Global Agentic Events (GAE)
model GlobalAgenticEvent {
  id                   String        @id @default(cuid())
  eventName            String
  status               EventStatus   @default(ACTIVE)
  poolTarget           Decimal       @db.Decimal(18, 2)
  currentPool          Decimal       @default(0) @db.Decimal(18, 2)
  shardReward          String        // Key of the Chaos Card or System Effect
  expiresAt            DateTime
  winningWorkspaceId   String?
  winningWorkspace     Workspace?    @relation(fields: [winningWorkspaceId], references: [id])
  
  contributions        Contribution[]
}

model Contribution {
  id            String             @id @default(cuid())
  amount        Decimal            @db.Decimal(18, 2)
  workspaceId   String
  userId        String
  eventId       String
  createdAt     DateTime           @default(now())
  
  workspace     Workspace          @relation(fields: [workspaceId], references: [id])
  user          User               @relation(fields: [userId], references: [id])
  event         GlobalAgenticEvent @relation(fields: [eventId], references: [id])
}

model PotentialAccrualLog {
    id                String    @id @default(cuid())
    workspaceId       String
    userId            String
    instrumentId      String
    luckWeight        Float
    potentialAwarded  Decimal   @db.Decimal(18, 4)
    narrativeContext  String?
    aegisSignature    String?
    createdAt         DateTime  @default(now())
    
    workspace         Workspace @relation(fields: [workspaceId], references: [id])
}

// From NUDGE-ENGINE.md
// Tracks when a user first discovers an instrument in The Armory.
model InstrumentDiscovery {
  id             String    @id @default(cuid())
  userId         String
  workspaceId    String
  instrumentId   String // The ID from the artifact manifest
  firstViewedAt  DateTime  @default(now())
  converted      Boolean   @default(false) // Set to true when the instrument is acquired
  nudgeSentAt    DateTime? // Timestamp for when a nudge was sent for this discovery
  dtt            Int?      // Discovery-to-Tribute time in minutes

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, instrumentId])
  @@index([userId, converted, nudgeSentAt])
}


enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum UserPsyche {
    ZEN_ARCHITECT
    SYNDICATE_ENFORCER
    RISK_AVERSE_ARTISAN
}

enum PulsePhase {
    CREST
    TROUGH
    EQUILIBRIUM
}

enum PurchaseOrderStatus {
  PENDING
  ORDERED
  SHIPPED
  RECEIVED
  CANCELLED
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}
