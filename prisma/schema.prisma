// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator accelerate {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  workspaces Workspace[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Workspace {
  id               String   @id @default(cuid())
  name             String
  planTier         String   @default("Apprentice")
  agentActionsUsed Int      @default(0)
  overageEnabled   Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  contacts       Contact[]
  workflows      Workflow[]
  workflowRuns   WorkflowRun[]
  agents         Agent[]
  securityAlerts SecurityAlert[]
  integrations   Integration[]

  @@index([ownerId])
}

model Contact {
  id        String  @id @default(cuid())
  email     String?
  firstName String?
  lastName  String?
  phone     String?

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  isActive    Boolean       @default(true)
  triggerType String        @default("api")
  definition  Json
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  runs        WorkflowRun[]

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  @@index([workflowId])
  @@index([workspaceId])
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Agent {
  id                 String      @id @default(cuid())
  name               String
  description        String?
  status             AgentStatus @default(idle)
  lastActivityAt     DateTime?
  assignedWorkflowId String?

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model Integration {
  id                    String   @id @default(cuid())
  name                  String
  status                String // "active", "inactive", "error"
  configDetails         Json
  integrationManifestId String // UUID of the manifest type

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}
