// datasource db {
//   provider     = "postgresql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

// generator client {
//   provider = "prisma-client-js"
// }

// Core Tenancy
model User {
  id        String   @id
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  firstName String?
  lastName  String?
  role      UserRole @default(OPERATOR)
  psyche    UserPsyche @default(ZEN_ARCHITECT)
  agentAlias String? @default("BEEP")
  
  lastLoginAt DateTime?
  
  unlockedChaosCardKeys String[]
  reclamationGraceUntil DateTime?

  foundingVow String?
  foundingGoal String?
  corePainIndex Int?
  foundingBenediction String?
  firstWhisper String?
  firstCommand String?
  
  workspaces Workspace[] @relation("WorkspaceMembers")
  ownedWorkspace Workspace? @relation("WorkspaceOwner")
  transactions Transaction[]
  contributions Contribution[]
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  ownerId String @unique
  owner   User   @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  
  members User[] @relation("WorkspaceMembers")

  // Economic Engine Fields
  planTier        PlanTier @default(Apprentice)
  credits         Decimal  @default(0)
  potential       Decimal  @default(0)
  agentActionsUsed Int @default(0)
  overageEnabled  Boolean @default(true)
  unlockedAppIds  String[]

  // App & Agent Data
  agents Agent[]
  contacts Contact[]
  securityAlerts SecurityAlert[]
  integrations Integration[]
  threatFeeds ThreatFeed[]
  securityEdicts SecurityEdict[]
  activeSystemEffects ActiveSystemEffect[]
  pulseEngineConfig PulseEngineConfig?
  workflows Workflow[]
  workflowRuns WorkflowRun[]
  products Product[]
  suppliers Supplier[]
  purchaseOrders PurchaseOrder[]
  contributions Contribution[]
  transactions Transaction[]
  potentialAccrualLogs PotentialAccrualLog[]
  discoveries InstrumentDiscovery[]
}


// Agentic & Workflow Models
model Agent {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  type        String // e.g., 'winston-wolfe', 'dr-syntax'
  description String?
  status      AgentStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

model Workflow {
  id           String        @id @default(cuid())
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name         String
  definition   Json
  isActive     Boolean       @default(true)
  triggerType  String        @default("api") // e.g., 'api', 'schedule', 'event'
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  runs         WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus
  triggerPayload Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  log            Json?
  output         Json?
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

// Economic Engine Models (Obelisk Pay & Klepsydra)
model Transaction {
  id           String          @id @default(cuid())
  workspaceId  String
  workspace    Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId       String?
  user         User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  type         TransactionType
  amount       Decimal
  description  String
  status       TransactionStatus @default(PENDING)
  createdAt    DateTime        @default(now())
  
  aegisSignature String

  // Fields specific to Folly Instruments
  instrumentId        String?
  luckWeight          Float?
  outcome             String?
  tributeAmount       Decimal?
  boonAmount          Decimal?
  judasFactor         Decimal?
  
  // Fields for Transmutation
  isTransmutation Boolean @default(false)
  realWorldAmount Decimal?
  realWorldCurrency String?
  vendorName String?
  transmutationTithe Decimal?
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model PulseProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  amplitude         Float    @default(0.15)
  frequency         Float    @default(0.01)
  phaseOffset       Float
  baselineLuck      Float    @default(0.4)
  lastEventTimestamp DateTime @default(now())
  consecutiveLosses Int      @default(0)
  lastResolvedPhase PulsePhase?
  lastInteractionType PulseInteractionType?
  
  // Dynamic psychological state values
  frustration       Float    @default(0)
  flowState         Float    @default(0)
  riskAversion      Float    @default(0)

  // One-time buffs from Chaos Cards
  nextTributeGuaranteedWin Boolean?
  loadedDieBuffCount Int?
  hadesBargainActive Boolean?
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}


model PotentialAccrualLog {
  id               String    @id @default(cuid())
  workspaceId      String
  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId           String
  instrumentId     String
  potentialAwarded Decimal
  luckWeight       Float
  narrativeContext String
  aegisSignature   String
  createdAt        DateTime  @default(now())
}

model InstrumentDiscovery {
    id String @id @default(cuid())
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    instrumentId String
    firstViewedAt DateTime @default(now())
    converted Boolean @default(false)
    dtt Int? // Discovery to Tribute time in minutes
    nudgeSentAt DateTime?

    @@unique([userId, instrumentId])
}

model ActiveSystemEffect {
    id String @id @default(cuid())
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    cardKey String
    createdAt DateTime @default(now())
    expiresAt DateTime
}

model GlobalAgenticEvent {
  id String @id @default(cuid())
  eventName String
  status EventStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  expiresAt DateTime
  poolTarget Decimal
  currentPool Decimal @default(0)
  shardReward String // Key of Chaos Card or System Effect
  winningWorkspaceId String?
  
  contributions Contribution[]
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  FAILED
}

model Contribution {
  id String @id @default(cuid())
  amount Decimal
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId String
  event GlobalAgenticEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

// Utility & Application Models
model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?           
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

model ThreatFeed {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime @default(now())

  @@unique([workspaceId, url])
}

model SecurityEdict {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  description String
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
}


model ChaosCard {
  id          String       @id @default(cuid())
  key         String       @unique // e.g., 'GEOLOGIC_TIME'
  name        String
  description String
  cardClass   ChaosCardClass
  cost        Int
  systemEffect String
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}


model Integration {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String
  name String
  status IntegrationStatus @default(active)
  configDetails Json? // For API keys, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum IntegrationStatus {
  active
  inactive
  error
}


// Inventory Models
model Product {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name String
  description String?
  stockLevel Int
  
  purchaseOrderItems PurchaseOrderItem[]
}

model Supplier {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name String
  contactEmail String?
  
  purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  supplierId String
  supplier Supplier @relation(fields: [supplierId], references: [id])
  status PurchaseOrderStatus
  createdAt DateTime @default(now())
  
  items PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id String @id @default(cuid())
  purchaseOrderId String
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
  quantity Int
}

enum PurchaseOrderStatus {
  PENDING
  SUBMITTED
  FULFILLED
  CANCELLED
}

// User-level enums
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}
