// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String   @id @default(cuid())
  email                   String   @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole @default(OPERATOR)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  lastLoginAt             DateTime?
  agentAlias              String?
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  corePainIndex           Int?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  workspaces              Workspace[] @relation("WorkspaceMembers")
  transactions            Transaction[]
  contributions           Contribution[]
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
  unlockedChaosCardKeys   String[] @default([])
  reclamationGraceUntil   DateTime?

  @@index([email])
}

model Workspace {
  id                    String    @id @default(cuid())
  name                  String
  ownerId               String
  owner                 User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  planTier              PlanTier  @default(Apprentice)
  credits               Decimal   @default(100.0) @db.Decimal(10, 2)
  agentActionsUsed      Int       @default(0)
  overageEnabled        Boolean   @default(false)
  unlockedAppIds        String[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  members               User[]    @relation("WorkspaceMembers")
  agents                Agent[]
  contacts              Contact[]
  securityAlerts        SecurityAlert[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  conversations         Conversation[]
  transactions          Transaction[]
  threatFeeds           ThreatFeed[]
  activeSystemEffects   ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
  contributions         Contribution[]

  @@index([ownerId])
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  description String?
  type        String
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([workspaceId])
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String? // User who triggered the alert, if applicable
  
  @@index([workspaceId])
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  definition   Json          @db.JsonB
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  workflowRuns WorkflowRun[]
  
  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json
  output         Json?
  log            Json[]            @default([])
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  
  @@index([workflowId])
  @@index([workspaceId])
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId, workspaceId])
}

model Transaction {
  id              String           @id @default(cuid())
  workspaceId     String
  workspace       Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId          String?
  user            User?            @relation(fields: [userId], references: [id], onDelete: NoAction)
  type            TransactionType
  amount          Decimal          @db.Decimal(12, 2)
  description     String
  status          TransactionStatus @default(PENDING)
  instrumentId    String? // ID of the Micro-App, Chaos Card, or Folly Instrument
  luckWeight      Float?
  outcome         String?
  boonAmount      Decimal?         @db.Decimal(12, 2)
  userPsyche      UserPsyche?
  tributeAmount   Decimal?         @db.Decimal(12, 2)
  judasFactor     Decimal?         @db.Decimal(4, 3)
  createdAt       DateTime         @default(now())

  @@index([workspaceId])
  @@index([userId])
}

model Integration {
  id                    String             @id @default(cuid())
  workspaceId           String
  workspace             Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String             @map("integration_manifest_id") // Maps to the UUID in the manifest file
  name                  String // User-defined name for this instance
  status                IntegrationStatus  @default(active)
  configDetails         Json
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model PulseProfile {
  id                 String                @id @default(cuid())
  userId             String                @unique
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  baselineLuck       Float                 @default(0.4)
  amplitude          Float                 @default(0.15)
  frequency          Float                 @default(0.01)
  phaseOffset        Float                 @default(0)
  consecutiveLosses  Int                   @default(0)
  lastEventTimestamp DateTime              @default(now())
  lastResolvedPhase  PulsePhase            @default(EQUILIBRIUM)
  lastInteractionType PulseInteractionType @default(COMMAND_SUCCESS)
  frustration        Float                 @default(0.0)
  flowState          Float                 @default(0.0)
  riskAversion       Float                 @default(0.5)

  // One-time buffs
  nextTributeGuaranteedWin Boolean? @default(false)
  hadesBargainActive       Boolean? @default(false)
  loadedDieBuffCount       Int?     @default(0)
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId String
  firstViewedAt DateTime  @default(now())
  converted    Boolean   @default(false)
  dtt          Int?      // Discovery-to-Tribute time in minutes
  nudgeSentAt  DateTime?

  @@unique([userId, instrumentId])
}


model ChaosCard {
  key          String          @id // e.g., GEOLOGIC_TIME
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey     String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime

  @@index([workspaceId, expiresAt])
}

model GlobalAgenticEvent {
  id                 String      @id @default(cuid())
  eventName          String
  status             EventStatus @default(ACTIVE)
  poolTarget         Decimal     @db.Decimal(15, 2)
  currentPool        Decimal     @default(0) @db.Decimal(15, 2)
  shardReward        String // The ID of the Chaos Card reward
  winningWorkspaceId String?
  createdAt          DateTime    @default(now())
  expiresAt          DateTime
  contributions      Contribution[]
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal            @db.Decimal(15, 2)
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  createdAt   DateTime           @default(now())
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
    BOON
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

enum WorkflowRunStatus {
    pending
    running
    completed
    failed
    paused
}
