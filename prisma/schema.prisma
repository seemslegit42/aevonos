datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String?
  firstName               String?
  lastName                String?
  agentAlias              String                  @default("BEEP")
  role                    UserRole                @default(OPERATOR)
  psyche                  UserPsyche              @default(ZEN_ARCHITECT)
  unlockedChaosCardKeys   String[]                @default([])
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  lastLoginAt             DateTime?
  workspaces              Workspace[]             @relation("WorkspaceMembers")
  ownedWorkspace          Workspace?              @relation("WorkspaceOwner")
  transactions            Transaction[]
  conversation            Conversation?
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
  hasAbyssalScar          Boolean                 @default(false)
  reclamationGraceUntil   DateTime?
  corePainIndex           Float?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  firstCommand            String?
  potentialAccrualLogs    PotentialAccrualLog[]
  contributions           Contribution[]
}

model Workspace {
  id                    String                @id @default(cuid())
  name                  String
  ownerId               String                @unique
  owner                 User                  @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  planTier              PlanTier              @default(Apprentice)
  credits               Decimal               @default(0.0)
  potential             Decimal               @default(0.0)
  agentActionsUsed      Int                   @default(0)
  overageEnabled        Boolean               @default(false)
  unlockedAppIds        String[]              @default([])
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  members               User[]                @relation("WorkspaceMembers")
  agents                Agent[]
  contacts              Contact[]
  transactions          Transaction[]
  securityAlerts        SecurityAlert[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  threatFeeds           ThreatFeed[]
  securityEdicts        SecurityEdict[]
  instrumentDiscoveries InstrumentDiscovery[]
  activeSystemEffects   ActiveSystemEffect[]
  potentialAccrualLogs  PotentialAccrualLog[]
  contributions         Contribution[]
  winnerOfEvents        GlobalAgenticEvent[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Transaction {
  id               String            @id @default(cuid())
  workspaceId      String
  workspace        Workspace         @relation(fields: [workspaceId], references: [id])
  userId           String?
  user             User?             @relation(fields: [userId], references: [id])
  type             TransactionType
  amount           Decimal
  description      String
  status           TransactionStatus
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  instrumentId     String?
  luckWeight       Float?
  outcome          String?
  tributeAmount    Decimal?
  boonAmount       Decimal?
  judasFactor      Decimal?
  userPsyche       UserPsyche?

  @@index([workspaceId])
}

model Conversation {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  messages   Json
  updatedAt  DateTime @updatedAt
  workpaceId String? // Legacy, can be removed
  workspaceId String?
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  userId            String?
}

model PulseProfile {
  id                  String                @id @default(cuid())
  userId              String                @unique
  user                User                  @relation(fields: [userId], references: [id])
  baselineLuck        Float                 @default(0.5)
  amplitude           Float                 @default(0.1)
  frequency           Float                 @default(0.01)
  phaseOffset         Float                 @default(0)
  consecutiveLosses   Int                   @default(0)
  lastEventTimestamp  DateTime              @default(now())
  lastInteractionType PulseInteractionType? @default(COMMAND_SUCCESS)
  lastResolvedPhase   PulsePhase?           @default(EQUILIBRIUM)
  frustration         Float                 @default(0.1)
  flowState           Float                 @default(0.1)
  riskAversion        Float                 @default(0.5)
  loadedDieBuffCount  Int?                  @default(0)
  nextTributeGuaranteedWin Boolean?         @default(false)
  hadesBargainActive  Boolean?              @default(false)
}

model Workflow {
  id            String        @id @default(cuid())
  name          String
  definition    Json
  isActive      Boolean       @default(true)
  triggerType   String        @default("api")
  workspaceId   String
  workspace     Workspace     @relation(fields: [workspaceId], references: [id])
  runs          WorkflowRun[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model SecurityEdict {
  id          String    @id @default(cuid())
  description String
  isActive    Boolean   @default(true)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId String
  firstViewedAt DateTime @default(now())
  converted    Boolean   @default(false)
  dtt          Int? // Discovery to Tribute Time in minutes
  nudgeSentAt  DateTime?

  @@unique([userId, instrumentId])
}

model ChaosCard {
  key          String       @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String // UUID from static manifest
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model GlobalAgenticEvent {
  id                 String       @id @default(cuid())
  eventName          String
  status             EventStatus  @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal      @default(0.0)
  expiresAt          DateTime
  shardReward        String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  contributions      Contribution[]
  winningWorkspaceId String?
  winningWorkspace   Workspace?   @relation(fields: [winningWorkspaceId], references: [id])
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  createdAt   DateTime           @default(now())
}

model PotentialAccrualLog {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  workspaceId      String
  workspace        Workspace @relation(fields: [workspaceId], references: [id])
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  instrumentId     String
  luckWeight       Float
  potentialAwarded Decimal
  narrativeContext String

  @@index([workspaceId])
  @@index([userId])
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}
