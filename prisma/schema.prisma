
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  password     String
  firstName    String?
  lastName     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  lastLoginAt  DateTime?
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaces   Workspace[] @relation("WorkspaceMembers")
}

model Workspace {
  id               String      @id @default(cuid())
  name             String
  ownerId          String
  owner            User        @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members          User[]      @relation("WorkspaceMembers")
  agents           Agent[]
  contacts         Contact[]
  threatFeeds      ThreatFeed[]
  securityAlerts   SecurityAlert[]
  workflows        Workflow[]
  workflowRuns     WorkflowRun[]
  integrations     Integration[]
  planTier         String      @default("Artisan") // e.g., "free", "pro", "enterprise"
  agentActionsUsed Int         @default(0)
  overageEnabled   Boolean     @default(true)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String // e.g., 'reputation-manager', 'morale-monitor'
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([workspaceId])
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime
  actionableOptions String[]
  createdAt         DateTime          @default(now())

  @@index([workspaceId])
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

model Workflow {
  id           String        @id @default(cuid())
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api") // api, schedule, event
  definition   Json          @db.JsonB
  runs         WorkflowRun[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([workspaceId])
}

model WorkflowRun {
  id             String             @id @default(cuid())
  workspaceId    String
  workspace      Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId     String
  workflow       Workflow           @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus
  triggerPayload Json?              @db.JsonB
  output         Json?              @db.JsonB
  log            Json?              @db.JsonB
  startedAt      DateTime           @default(now())
  finishedAt     DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([workspaceId])
  @@index([workflowId])
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model Integration {
  id                    String    @id @default(cuid())
  workspaceId           String
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String // This is the UUID from the static manifest file
  name                  String
  status                String // "active", "inactive", "error"
  configDetails         Json      @db.JsonB
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([workspaceId])
}
