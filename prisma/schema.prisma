// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole                @default(OPERATOR)
  psyche                  UserPsyche              @default(ZEN_ARCHITECT)
  agentAlias              String?
  lastLoginAt             DateTime?
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Float?
  foundingBenediction     String?
  firstWhisper            String?
  reclamationGraceUntil   DateTime?
  unlockedChaosCardKeys   String[]
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  workspaces              Workspace[]             @relation("WorkspaceMembers")
  transactions            Transaction[]
  discoveries             InstrumentDiscovery[]
  pulseProfile            PulseProfile?
  conversation            Conversation?
  securityAlerts          SecurityAlert[]
  contributions           Contribution[]
}

model Workspace {
  id                    String                  @id @default(cuid())
  name                  String
  owner                 User                    @relation(fields: [ownerId], references: [id])
  ownerId               String
  planTier              PlanTier                @default(Apprentice)
  credits               Decimal                 @default(0)
  agentActionsUsed      Int                     @default(0)
  overageEnabled        Boolean                 @default(true)
  unlockedAppIds        String[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  members               User[]                  @relation("WorkspaceMembers")
  agents                Agent[]
  contacts              Contact[]
  securityAlerts        SecurityAlert[]
  transactions          Transaction[]
  workflows             Workflow[]
  discoveries           InstrumentDiscovery[]
  integrations          Integration[]
  threatFeeds           ThreatFeed[]
  contributions         Contribution[]
  winningEvents         GlobalAgenticEvent[]    @relation("WinningWorkspace")
}

model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus
  workspace     Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  user              User?             @relation(fields: [userId], references: [id])
  userId            String?
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
}

model Transaction {
  id                String            @id @default(cuid())
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  user              User?             @relation(fields: [userId], references: [id])
  userId            String?
  agentId           String?
  instrumentId      String?
  type              TransactionType
  amount            Decimal
  description       String
  status            TransactionStatus
  luckWeight        Float?
  outcome           String?
  tributeAmount     Decimal?
  boonAmount        Decimal?
  judasFactor       Decimal?
  userPsyche        UserPsyche?
  createdAt         DateTime          @default(now())
}

model Workflow {
  id          String        @id @default(cuid())
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId String
  name        String
  isActive    Boolean       @default(true)
  triggerType String        @default("api") // api, schedule, event
  definition  Json
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  runs        WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workflowId     String
  workspaceId    String
  status         WorkflowRunStatus
  triggerPayload Json
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Conversation {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PulseProfile {
  id                   String                @id @default(cuid())
  user                 User                  @relation(fields: [userId], references: [id])
  userId               String                @unique
  baselineLuck         Float                 @default(0.4)
  amplitude            Float                 @default(0.15)
  frequency            Float                 @default(0.01)
  phaseOffset          Float
  consecutiveLosses    Int                   @default(0)
  lastEventTimestamp   DateTime              @default(now())
  lastInteractionType  PulseInteractionType?
  lastResolvedPhase    PulsePhase?
  frustration          Float                 @default(0)
  flowState            Float                 @default(0)
  riskAversion         Float                 @default(0)
  // Buffs
  loadedDieBuffCount   Int?                  @default(0)
  hadesBargainActive   Boolean?              @default(false)
  nextTributeGuaranteedWin Boolean?         @default(false)
}

model ChaosCard {
  id            String         @id @unique @default(cuid())
  key           String         @unique
  name          String
  description   String
  cardClass     ChaosCardClass
  cost          Int
  systemEffect  String?
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  instrumentId  String
  converted     Boolean   @default(false)
  firstViewedAt DateTime  @default(now())
  nudgeSentAt   DateTime?
  dtt           Int?
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  cardKey     String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
}

model Integration {
  id                    String            @id @default(cuid())
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId           String
  integrationManifestId String // This is the UUID from the manifest file
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  url         String
  createdAt   DateTime  @default(now())
}

model GlobalAgenticEvent {
  id                 String     @id @default(cuid())
  eventName          String
  poolTarget         Decimal
  currentPool        Decimal    @default(0)
  createdAt          DateTime   @default(now())
  expiresAt          DateTime
  status             EventStatus @default(ACTIVE)
  shardReward        String?
  winningWorkspace   Workspace? @relation("WinningWorkspace", fields: [winningWorkspaceId], references: [id])
  winningWorkspaceId String?
  contributions      Contribution[]
}

model Contribution {
  id           String             @id @default(cuid())
  event        GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  eventId      String
  workspace    Workspace          @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  user         User               @relation(fields: [userId], references: [id])
  userId       String
  amount       Decimal
  createdAt    DateTime           @default(now())
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}
