// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  firstName               String?
  lastName                String?
  role                    UserRole               @default(OPERATOR)
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  agentAlias              String?                @default("BEEP")
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  lastLoginAt             DateTime?
  foundingVow             String?                @db.Text
  foundingGoal            String?                @db.Text
  corePainIndex           Int?
  foundingBenediction     String?                @db.Text
  firstWhisper            String?                @db.Text
  firstCommand            String?
  reclamationGraceUntil   DateTime?
  unlockedChaosCardKeys   String[]               @default([])
  contributions           Contribution[]
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]            @relation("WorkspaceOwner")
  securityAlerts          SecurityAlert[]
}

model Workspace {
  id                  String               @id @default(cuid())
  name                String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  ownerId             String
  owner               User                 @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members             User[]               @relation("WorkspaceMembers")
  planTier            PlanTier             @default(Apprentice)
  credits             Decimal              @default(0.0)
  agentActionsUsed    Int                  @default(0)
  overageEnabled      Boolean              @default(true)
  unlockedAppIds      String[]             @default([])
  agents              Agent[]
  contacts            Contact[]
  transactions        Transaction[]
  conversations       Conversation[]
  integrations        Integration[]
  securityAlerts      SecurityAlert[]
  threatFeeds         ThreatFeed[]
  workflows           Workflow[]
  workflowRuns        WorkflowRun[]
  discoveries         InstrumentDiscovery[]
  activeEffects       ActiveSystemEffect[]
  purchaseOrders      PurchaseOrder[]
  products            Product[]
  suppliers           Supplier[]
  pulseEngineConfig   PulseEngineConfig?
  securityEdicts      SecurityEdict[]
}

model PulseProfile {
  id                         String                @id @default(cuid())
  userId                     String                @unique
  user                       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  amplitude                  Float                 @default(0.15)
  frequency                  Float                 @default(0.01)
  phaseOffset                Float
  baselineLuck               Float                 @default(0.4)
  lastEventTimestamp         DateTime              @default(now())
  consecutiveLosses          Int                   @default(0)
  lastResolvedPhase          PulsePhase?
  lastInteractionType        PulseInteractionType?
  frustration                Float                 @default(0)
  flowState                  Float                 @default(0)
  riskAversion               Float                 @default(0.5)
  nextTributeGuaranteedWin   Boolean?              @default(false)
  loadedDieBuffCount         Int?                  @default(0)
  hadesBargainActive         Boolean?              @default(false)
}

model PulseEngineConfig {
  id                     String    @id @default(cuid())
  workspaceId            String    @unique
  workspace              Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  pityThreshold          Int       @default(5)
  festivalTriggerPercent Int       @default(20)
  transmutationTithe     Decimal   @default(0.18) @db.Decimal(4, 3)
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model Transaction {
  id                 String           @id @default(cuid())
  workspaceId        String
  workspace          Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId             String?
  user               User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  type               TransactionType
  amount             Decimal
  description        String
  instrumentId       String?
  status             TransactionStatus @default(COMPLETED)
  createdAt          DateTime         @default(now())
  // Tribute-specific fields
  luckWeight         Float?
  outcome            String?
  tributeAmount      Decimal?
  boonAmount         Decimal?
  judasFactor        Decimal?
  userPsyche         UserPsyche?
  // Transmutation-specific fields
  isTransmutation    Boolean          @default(false)
  realWorldAmount    Decimal?
  realWorldCurrency  String?
  vendorName         String?
  transmutationTithe Decimal?
  // Aegis Signature
  aegisSignature     String?
  agentId            String?
  agent              Agent?           @relation(fields: [agentId], references: [id], onDelete: SetNull)

  @@index([workspaceId])
  @@index([userId])
}

model Conversation {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String
  messages    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, workspaceId])
  @@index([workspaceId])
}

model Agent {
  id          String        @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus   @default(idle)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String            @db.Text
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([workspaceId])
}

model SecurityEdict {
  id          String   @id @default(cuid())
  description String   @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}


model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}

model Integration {
    id                      String            @id @default(cuid())
    workspaceId             String
    workspace               Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    integrationManifestId   String // This will be the UUID from the static manifest file
    name                    String
    status                  IntegrationStatus @default(active)
    configDetails           Json // API keys, etc. Encrypted in a real system.
    createdAt               DateTime          @default(now())
    updatedAt               DateTime          @updatedAt
    
    @@index([workspaceId])
}

model Workflow {
    id              String        @id @default(cuid())
    name            String
    workspaceId     String
    workspace       Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    definition      Json
    triggerType     String        @default("api")
    isActive        Boolean       @default(true)
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    runs            WorkflowRun[]

    @@index([workspaceId])
}

model WorkflowRun {
    id              String              @id @default(cuid())
    workflowId      String
    workflow        Workflow            @relation(fields: [workflowId], references: [id], onDelete: Cascade)
    workspaceId     String
    workspace       Workspace           @relation(fields: [workspaceId], references: [id], onDelete: NoAction) // Avoid cascade delete issues
    status          WorkflowRunStatus   @default(pending)
    triggerPayload  Json?
    startedAt       DateTime            @default(now())
    finishedAt      DateTime?
    output          Json?
    log             Json?

    @@index([workflowId])
    @@index([workspaceId, status])
}

model InstrumentDiscovery {
    id              String @id @default(cuid())
    userId          String
    workspaceId     String
    workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    instrumentId    String
    firstViewedAt   DateTime @default(now())
    nudgeSentAt     DateTime?
    converted       Boolean @default(false)
    dtt             Int? // Discovery-to-tribute time in minutes

    @@unique([userId, instrumentId])
    @@index([userId])
}

model ActiveSystemEffect {
    id          String @id @default(cuid())
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    cardKey     String
    createdAt   DateTime @default(now())
    expiresAt   DateTime
    
    @@index([workspaceId])
}

model ChaosCard {
    key         String @id
    name        String
    description String @db.Text
    cardClass   ChaosCardClass
    cost        Int
    systemEffect String? @db.Text
}

model PotentialAccrualLog {
    id                  String @id @default(cuid())
    workspaceId         String
    userId              String
    instrumentId        String
    createdAt           DateTime @default(now())
    luckWeight          Float
    potentialAwarded    Decimal
    narrativeContext    String
    aegisSignature      String?
    
    @@index([workspaceId])
    @@index([userId])
}

model GlobalAgenticEvent {
    id                  String   @id @default(cuid())
    eventName           String
    status              EventStatus @default(ACTIVE)
    createdAt           DateTime @default(now())
    expiresAt           DateTime
    poolTarget          Decimal
    currentPool         Decimal  @default(0.0)
    shardReward         String
    winningWorkspaceId  String?
    contributions       Contribution[]
}

model Contribution {
    id          String @id @default(cuid())
    eventId     String
    event       GlobalAgenticEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
    workspaceId String
    userId      String
    amount      Decimal
    createdAt   DateTime @default(now())

    @@index([eventId])
}


model Product {
  id              String   @id @default(cuid())
  name            String
  description     String?
  stockLevel      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  purchaseOrderItems PurchaseOrderItem[]
  
  @@index([workspaceId])
}

model Supplier {
  id              String   @id @default(cuid())
  name            String
  contactEmail    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  purchaseOrders  PurchaseOrder[]
  
  @@index([workspaceId])
}

model PurchaseOrder {
  id              String   @id @default(cuid())
  status          PurchaseOrderStatus @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  supplierId      String
  supplier        Supplier @relation(fields: [supplierId], references: [id])
  items           PurchaseOrderItem[]
  
  @@index([workspaceId])
}

model PurchaseOrderItem {
  id              String   @id @default(cuid())
  quantity        Int
  createdAt       DateTime @default(now())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  productId       String
  product         Product @relation(fields: [productId], references: [id])
  
  @@index([purchaseOrderId])
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  idle
  processing
  active
  paused
  error
}

enum IntegrationStatus {
    active
    inactive
    error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
    CREDIT
    DEBIT
    TRIBUTE
}

enum TransactionStatus {
    PENDING
    COMPLETED
    FAILED
}

enum PulsePhase {
    CREST
    TROUGH
    EQUILIBRIUM
}

enum PulseInteractionType {
    WIN
    LOSS
    COMMAND_SUCCESS
    COMMAND_FAILURE
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
    BOON
}

enum EventStatus {
    ACTIVE
    CONCLUDED
    FAILED
}

enum PurchaseOrderStatus {
    PENDING
    ORDERED
    SHIPPED
    RECEIVED
    CANCELLED
}
