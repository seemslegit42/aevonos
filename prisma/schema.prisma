
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole  @default(OPERATOR)
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  agentAlias              String?
  
  // Rite of Invocation Data
  foundingVow             String? @map("founding_vow")
  foundingGoal            String? @map("founding_goal")
  corePainIndex           Float?  @map("core_pain_index")
  foundingBenediction     String? @map("founding_benediction")
  firstWhisper            String? @map("first_whisper")
  reclamationGraceUntil   DateTime? @map("reclamation_grace_until")
  
  // Economy & Engagement
  pulseProfile            PulseProfile?
  unlockedChaosCardKeys   String[] @default([]) @map("unlocked_chaos_card_keys")

  // Boilerplate
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  lastLoginAt DateTime? @map("last_login_at")
  
  // Relations
  workspaces  Workspace[] @relation("WorkspaceMembers")
  ownedWorkspace Workspace? @relation("WorkspaceOwner")
  transactions Transaction[]
  discoveries InstrumentDiscovery[]
  accounts    Account[]
  sessions    Session[]
}

model Workspace {
  id                String    @id @default(cuid())
  name              String
  planTier          PlanTier  @default(Apprentice)
  credits           Decimal   @default(100.0) @db.Decimal(12, 2)
  agentActionsUsed  Int       @default(0) @map("agent_actions_used")
  overageEnabled    Boolean   @default(true) @map("overage_enabled")
  
  // App Ownership
  unlockedAppIds    String[] @default([]) @map("unlocked_app_ids")

  // Boilerplate
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  ownerId           String
  owner             User       @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members           User[]     @relation("WorkspaceMembers")
  agents            Agent[]
  contacts          Contact[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  transactions      Transaction[]
  conversations     Conversation[]
  integrations      Integration[]
  activeEffects     ActiveSystemEffect[]
  discoveries       InstrumentDiscovery[]

  @@map("workspaces")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}


model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String // This could be an enum if you have a fixed set of agent types
  description String?
  status      AgentStatus @default(idle)
  config      Json?
  
  // Relations
  workspaceId String @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("agents")
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  
  // Relations
  workspaceId String @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([workspaceId, email])
  @@map("contacts")
}

model Workflow {
  id          String   @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean  @default(true) @map("is_active")
  triggerType String   @default("api") @map("trigger_type")

  // Relations
  workspaceId String   @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("workflows")
}

model WorkflowRun {
  id              String            @id @default(cuid())
  status          WorkflowRunStatus
  triggerPayload  Json?             @map("trigger_payload")
  output          Json?
  log             Json?
  startedAt       DateTime          @default(now()) @map("started_at")
  finishedAt      DateTime?         @map("finished_at")

  // Relations
  workflowId      String            @map("workflow_id")
  workflow        Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId     String            @map("workspace_id")
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("workflow_runs")
}


model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @map("risk_level")
  timestamp         DateTime          @default(now())
  actionableOptions String[]          @map("actionable_options")
  
  // Relations
  workspaceId       String            @map("workspace_id")
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("security_alerts")
}

model ThreatFeed {
    id          String      @id @default(cuid())
    url         String
    
    // Relations
    workspaceId String      @map("workspace_id")
    workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    
    createdAt   DateTime    @default(now()) @map("created_at")

    @@map("threat_feeds")
}

model Transaction {
  id            String             @id @default(cuid())
  type          TransactionType
  amount        Decimal            @db.Decimal(12, 2)
  description   String
  status        TransactionStatus  @default(COMPLETED)
  
  // Relations
  workspaceId   String             @map("workspace_id")
  workspace     Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId        String?            @map("user_id")
  user          User?              @relation(fields: [userId], references: [id], onDelete:SetNull)

  // Klepsydra-specific data
  instrumentId  String?            @map("instrument_id")
  luckWeight    Float?             @map("luck_weight")
  outcome       String?
  tributeAmount Decimal?           @db.Decimal(12, 2) @map("tribute_amount")
  boonAmount    Decimal?           @db.Decimal(12, 2) @map("boon_amount")
  judasFactor   Decimal?           @db.Decimal(9, 8)  @map("judas_factor")
  userPsyche    UserPsyche?        @map("user_psyche")
  
  // Boilerplate
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")

  @@map("transactions")
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  messages    Json     // Array of BaseMessage JSON objects

  // Relations
  workspaceId String   @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("conversations")
}

model ChaosCard {
  id            String        @id @default(cuid())
  key           String        @unique // e.g., 'GEOLOGIC_TIME'
  name          String
  description   String
  cardClass     ChaosCardClass
  cost          Int
  systemEffect  String
  
  createdAt     DateTime      @default(now()) @map("created_at")

  @@map("chaos_cards")
}

// Table to track when a user first views an instrument in the Armory
model InstrumentDiscovery {
  id              String      @id @default(cuid())
  instrumentId    String      @map("instrument_id")
  firstViewedAt   DateTime    @default(now()) @map("first_viewed_at")
  converted       Boolean     @default(false)
  dtt             Int?        @map("discovery_to_tribute_time_minutes") // Discovery to Tribute Time in minutes
  nudgeSentAt     DateTime?   @map("nudge_sent_at")

  // Relations
  userId          String      @map("user_id")
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId     String      @map("workspace_id")
  workspace       Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, instrumentId])
  @@map("instrument_discoveries")
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String            @map("workspace_id")
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String            @map("integration_manifest_id") // UUID pointing to static config
  name                  String            // User-defined name for this instance
  status                IntegrationStatus @default(active)
  configDetails         Json?             // Encrypted credentials, tokens, etc.
  
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")

  @@map("integrations")
}

model PulseProfile {
  id                      String   @id @default(cuid())
  userId                  String   @unique @map("user_id")
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Core Sine-Rhythm Engine (SRE) params
  baselineLuck            Float    @default(0.4) @map("baseline_luck") // The midpoint of the user's luck
  amplitude               Float    @default(0.15) // The max deviation from baseline
  frequency               Float    @default(0.01) // How fast the luck wave oscillates
  phaseOffset             Float    @map("phase_offset") // Unique starting point on the wave

  // State Tracking
  lastEventTimestamp      DateTime @default(now()) @map("last_event_timestamp")
  consecutiveLosses       Int      @default(0) @map("consecutive_losses")
  lastResolvedPhase       PulsePhase @default(EQUILIBRIUM) @map("last_resolved_phase")
  lastInteractionType     PulseInteractionType @default(WIN) @map("last_interaction_type")

  // Dynamic Psychological State (0-1 floats)
  frustration             Float    @default(0)
  flowState               Float    @default(0) @map("flow_state")
  riskAversion            Float    @default(0.5) @map("risk_aversion")
  
  // Buffs / Special States
  loadedDieBuffCount      Int?     @map("loaded_die_buff_count")
  hadesBargainActive      Boolean? @map("hades_bargain_active")
  nextTributeGuaranteedWin Boolean? @map("next_tribute_guaranteed_win")

  @@map("pulse_profiles")
}

model ActiveSystemEffect {
  id              String   @id @default(cuid())
  workspaceId     String   @map("workspace_id")
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey         String   @map("card_key") // e.g., 'ACROPOLIS_MARBLE'
  expiresAt       DateTime @map("expires_at")
  
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("active_system_effects")
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  paused
  error
}

enum PulsePhase {
  CREST // Luck is high
  TROUGH // Luck is low
  EQUILIBRIUM // Luck is near baseline
}

enum PulseInteractionType {
    WIN
    LOSS
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}
