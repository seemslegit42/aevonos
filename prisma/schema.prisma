// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  password              String
  firstName             String?               @map("first_name")
  lastName              String?               @map("last_name")
  role                  UserRole              @default(OPERATOR)
  psyche                UserPsyche            @default(ZEN_ARCHITECT)
  agentAlias            String?               @map("agent_alias")
  corePainIndex         Float?                @map("core_pain_index")
  foundingVow           String?               @map("founding_vow")
  foundingGoal          String?               @map("founding_goal")
  foundingBenediction   String?               @map("founding_benediction")
  firstWhisper          String?               @map("first_whisper")
  reclamationGraceUntil DateTime?             @map("reclamation_grace_until")
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")
  lastLoginAt           DateTime?             @map("last_login_at")
  workspaces            Workspace[]           @relation("WorkspaceMembers")
  conversations         Conversation[]
  ownedChaosCards       ChaosCard[]
  instrumentDiscoveries InstrumentDiscovery[]
  pulseProfile          PulseProfile?
  transactions          Transaction[]
  accounts              Account[]
  sessions              Session[]

  @@map("users")
}

model Workspace {
  id               String                @id @default(cuid())
  name             String
  ownerId          String                @map("owner_id")
  planTier         PlanTier              @default(Apprentice) @map("plan_tier")
  credits          Decimal               @default(0.0)
  agentActionsUsed Int                   @default(0) @map("agent_actions_used")
  overageEnabled   Boolean               @default(true) @map("overage_enabled")
  unlockedAppIds   String[]              @map("unlocked_app_ids")
  createdAt        DateTime              @default(now()) @map("created_at")
  updatedAt        DateTime              @updatedAt @map("updated_at")
  owner            User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members          User[]                @relation("WorkspaceMembers")
  agents           Agent[]
  contacts         Contact[]
  transactions     Transaction[]
  securityAlerts   SecurityAlert[]
  threatFeeds      ThreatFeed[]
  workflows        Workflow[]
  workflowRuns     WorkflowRun[]
  conversations    Conversation[]
  activeEffects    ActiveSystemEffect[]
  discoveries      InstrumentDiscovery[]

  @@map("workspaces")
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  workspaceId String      @map("workspace_id")
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("agents")
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?   @map("first_name")
  lastName    String?   @map("last_name")
  email       String?
  phone       String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, email])
  @@map("contacts")
}

model Transaction {
  id             String          @id @default(cuid())
  type           TransactionType
  amount         Decimal
  tributeAmount  Decimal?        @map("tribute_amount")
  boonAmount     Decimal?        @map("boon_amount")
  judasFactor    Decimal?        @map("judas_factor")
  luckWeight     Float?          @map("luck_weight")
  outcome        String?
  description    String
  status         TransactionStatus
  instrumentId   String?         @map("instrument_id")
  userPsyche     UserPsyche?     @map("user_psyche")
  createdAt      DateTime        @default(now()) @map("created_at")
  workspaceId    String          @map("workspace_id")
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId         String?         @map("user_id")
  user           User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  agentId        String?         @map("agent_id")

  @@map("transactions")
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @map("risk_level")
  timestamp         DateTime          @default(now())
  actionableOptions String[]          @map("actionable_options")
  workspaceId       String            @map("workspace_id")
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("security_alerts")
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  lastChecked DateTime? @map("last_checked")
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("threat_feeds")
}

model Workflow {
  id            String         @id @default(cuid())
  name          String
  triggerType   String         @default("api") @map("trigger_type")
  isActive      Boolean        @default(true) @map("is_active")
  definition    Json
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  workspaceId   String         @map("workspace_id")
  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowRuns  WorkflowRun[]
  schedules     Json[] // For 'schedule' triggerType

  @@map("workflows")
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?             @map("trigger_payload")
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now()) @map("started_at")
  finishedAt     DateTime?         @map("finished_at")
  workspaceId    String            @map("workspace_id")
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId     String            @map("workflow_id")
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_runs")
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("conversations")
}

model ChaosCard {
  id           String   @id @default(cuid())
  key          String   @unique // e.g. "GEOLOGIC_TIME"
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  createdAt    DateTime @default(now()) @map("created_at")
  owners       User[]

  @@map("chaos_cards")
}

model ActiveSystemEffect {
  id          String   @id @default(cuid())
  cardKey     String   @map("card_key") // e.g., "ACROPOLIS_MARBLE"
  createdAt   DateTime @default(now()) @map("created_at")
  expiresAt   DateTime @map("expires_at")
  workspaceId String   @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("active_system_effects")
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  instrumentId  String    @map("instrument_id") // The ID of the app/card manifest
  firstViewedAt DateTime  @default(now()) @map("first_viewed_at")
  converted     Boolean   @default(false)
  dtt           Int?      @map("discovery_to_tribute_time_minutes")
  nudgeSentAt   DateTime? @map("nudge_sent_at")
  userId        String    @map("user_id")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId   String    @map("workspace_id")
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, instrumentId])
  @@map("instrument_discoveries")
}

model PulseProfile {
  id                        String              @id @default(cuid())
  userId                    String              @unique @map("user_id")
  user                      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  baselineLuck              Float               @default(0.4) @map("baseline_luck")
  amplitude                 Float               @default(0.15)
  frequency                 Float               @default(0.01)
  phaseOffset               Float               @map("phase_offset")
  lastEventTimestamp        DateTime            @default(now()) @map("last_event_timestamp")
  consecutiveLosses         Int                 @default(0) @map("consecutive_losses")
  frustration               Float               @default(0)
  flowState                 Float               @default(0) @map("flow_state")
  riskAversion              Float               @default(0.5) @map("risk_aversion")
  lastResolvedPhase         PulsePhase          @default(EQUILIBRIUM) @map("last_resolved_phase")
  lastInteractionType       PulseInteractionType? @map("last_interaction_type")
  // Buffs
  loadedDieBuffCount        Int                 @default(0) @map("loaded_die_buff_count")
  nextTributeGuaranteedWin  Boolean             @default(false) @map("next_tribute_guaranteed_win")
  hadesBargainActive        Boolean             @default(false) @map("hades_bargain_active")

  @@map("pulse_profiles")
}

model Integration {
  id                    String            @id @default(cuid())
  integrationManifestId String            @map("integration_manifest_id")
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?             @map("config_details")
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")
  workspaceId           String            @map("workspace_id")
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// --- Enums ---

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  idle
  processing
  active
  paused
  error
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}

enum IntegrationStatus {
  active
  inactive
  error
}
