// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id
  email                   String    @unique
  firstName               String?
  lastName                String?
  password                String?
  role                    UserRole  @default(OPERATOR)
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  agentAlias              String?   @default("BEEP")
  unlockedChaosCardKeys   String[]  @default([])
  hasAbyssalScar          Boolean   @default(false)
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  corePainIndex           Int?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  firstCommand            String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  workspaces              Workspace[] @relation("WorkspaceMembers")
  ownedWorkspace          Workspace?  @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
  sigil                   SovereignSigil?
  conversation            Conversation?
}

model Workspace {
  id                String    @id @default(cuid())
  name              String
  owner             User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId           String    @unique
  planTier          PlanTier  @default(Apprentice)
  credits           Decimal   @default(0)
  potential         Decimal   @default(0)
  agentActionsUsed  Int       @default(0)
  overageEnabled    Boolean   @default(false)
  unlockedAppIds    String[]  @default([])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  members           User[]    @relation("WorkspaceMembers")
  agents            Agent[]
  contacts          Contact[]
  securityAlerts    SecurityAlert[]
  securityEdicts    SecurityEdict[]
  threatFeeds       ThreatFeed[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  integrations      Integration[]
  transactions      Transaction[]
  instrumentDiscoveries InstrumentDiscovery[]
  activeSystemEffects ActiveSystemEffect[]
  potentialAccrualLogs PotentialAccrualLog[]
  conversation      Conversation[]
}

model SovereignSigil {
  id        String   @id @default(cuid()) // This is the unique ID encoded in the NFC chip
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  user              User?             @relation(fields: [userId], references: [id])
  userId            String?
}

model Transaction {
  id                  String             @id @default(cuid())
  workspaceId         String
  workspace           Workspace          @relation(fields: [workspaceId], references: [id])
  userId              String?            // User who initiated or is associated with the transaction
  user                User?              @relation(fields: [userId], references: [id])
  agentId             String?            // Agent involved, if any
  type                TransactionType
  amount              Decimal
  description         String
  status              TransactionStatus
  instrumentId        String?
  luckWeight          Float?
  outcome             String?
  tributeAmount       Decimal?
  boonAmount          Decimal?
  judasFactor         Decimal?
  userPsyche          UserPsyche?
  aegisSignature      String?            // Signature from Aegis to verify integrity
  isTransmutation     Boolean            @default(false)
  realWorldAmount     Float?
  realWorldCurrency   String?
  vendorName          String?
  transmutationTithe  Decimal?
  createdAt           DateTime           @default(now())
}

model PulseProfile {
    id                      String                 @id @default(cuid())
    user                    User                   @relation(fields: [userId], references: [id])
    userId                  String                 @unique
    baselineLuck            Float                  @default(0.4)
    amplitude               Float                  @default(0.15)
    frequency               Float                  @default(0.01)
    phaseOffset             Float
    consecutiveLosses       Int                    @default(0)
    lastEventTimestamp      DateTime               @default(now())
    lastResolvedPhase       PulsePhase             @default(EQUILIBRIUM)
    lastInteractionType     PulseInteractionType   @default(INITIAL)
    frustration             Float                  @default(0.0) // 0.0 to 1.0
    flowState               Float                  @default(0.0) // 0.0 to 1.0
    riskAversion            Float                  @default(0.5) // 0.0 to 1.0
    loadedDieBuffCount      Int                    @default(0)
    nextTributeGuaranteedWin Boolean                @default(false)
    hadesBargainActive      Boolean                @default(false)
}

model ChaosCard {
  key             String          @id
  name            String
  description     String
  cardClass       ChaosCardClass
  cost            Int
  systemEffect    String
  createdAt       DateTime        @default(now())
}

model InstrumentDiscovery {
    id              String @id @default(cuid())
    userId          String
    user            User @relation(fields: [userId], references: [id])
    workspaceId     String
    workspace       Workspace @relation(fields: [workspaceId], references: [id])
    instrumentId    String // ID from artifact manifest
    firstViewedAt   DateTime @default(now())
    converted       Boolean @default(false)
    dtt             Int? // Discovery-to-Tribute time in minutes
    nudgeSentAt     DateTime?
}

model ActiveSystemEffect {
    id          String @id @default(cuid())
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    cardKey     String
    expiresAt   DateTime
    createdAt   DateTime @default(now())
}

model PotentialAccrualLog {
    id                  String      @id @default(cuid())
    workspaceId         String
    workspace           Workspace   @relation(fields: [workspaceId], references: [id])
    userId              String
    instrumentId        String
    luckWeight          Float
    potentialAwarded    Decimal
    narrativeContext    String
    aegisSignature      String?
    createdAt           DateTime    @default(now())
}

model SecurityEdict {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model ThreatFeed {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  url         String
  createdAt   DateTime @default(now())
}

model Workflow {
  id              String          @id @default(cuid())
  workspaceId     String
  workspace       Workspace       @relation(fields: [workspaceId], references: [id])
  name            String
  definition      Json
  isActive        Boolean         @default(true)
  triggerType     String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  runs            WorkflowRun[]
}

model WorkflowRun {
  id              String            @id @default(cuid())
  workflowId      String
  workflow        Workflow          @relation(fields: [workflowId], references: [id])
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id])
  status          WorkflowRunStatus
  triggerPayload  Json?
  output          Json?
  log             Json?
  startedAt       DateTime
  finishedAt      DateTime?
}

model Integration {
    id                      String              @id @default(cuid())
    workspaceId             String
    workspace               Workspace           @relation(fields: [workspaceId], references: [id])
    integrationManifestId   String // The UUID from our static manifest
    name                    String
    status                  IntegrationStatus   @default(active)
    configDetails           Json // Encrypted credentials and other config
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt
}

model Conversation {
    id          String    @id @default(cuid())
    userId      String    @unique
    user        User      @relation(fields: [userId], references: [id])
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    messages    Json      @default("[]")
    updatedAt   DateTime  @updatedAt
}

model Renunciation {
  id                String   @id @default(cuid())
  userId            String
  renouncedItemType String   // "X_CREDITS", "MICRO_APP"
  renouncedItemName String
  valueInX          Decimal
  createdAt         DateTime @default(now())
  aegisSignature    String
}

model GlobalAgenticEvent {
  id                   String   @id @default(cuid())
  eventName            String
  status               EventStatus @default(ACTIVE)
  poolTarget           Decimal
  currentPool          Decimal  @default(0)
  expiresAt            DateTime
  winningWorkspaceId   String?
  shardReward          String   // Key of the Chaos Card or System Effect
  createdAt            DateTime @default(now())
  contributions        Contribution[]
}

model Contribution {
  id            String   @id @default(cuid())
  eventId       String
  event         GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  workspaceId   String
  userId        String
  amount        Decimal
  createdAt     DateTime @default(now())
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  INITIAL
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
    BOON
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  FAILED
}

enum IntegrationStatus {
    active
    inactive
    error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}
