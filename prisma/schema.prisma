// datasource db ...
// generator client ...

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole               @default(OPERATOR)
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  agentAlias              String?
  unlockedChaosCardKeys   String[]               @default([])
  reclamationGraceUntil   DateTime?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  lastLoginAt             DateTime?
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Float?
  foundingBenediction     String?
  firstWhisper            String?
  firstCommand            String?
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]            @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
  contributions           Contribution[]
  securityAlerts          SecurityAlert[]
  hasAbyssalScar          Boolean                @default(false)
  conversationHistory     Conversation[]
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
}


model Workspace {
  id                   String                 @id @default(cuid())
  name                 String
  ownerId              String
  owner                User                   @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members              User[]                 @relation("WorkspaceMembers")
  planTier             PlanTier               @default(Apprentice)
  credits              Decimal                @default(0.0)
  agentActionsUsed     Int                    @default(0)
  unlockedAppIds       String[]               @default([])
  overageEnabled       Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  contacts             Contact[]
  agents               Agent[]
  transactions         Transaction[]
  instrumentDiscoveries InstrumentDiscovery[]
  activeSystemEffects  ActiveSystemEffect[]
  contributions        Contribution[]
  pulseEngineConfig    PulseEngineConfig?
  securityAlerts       SecurityAlert[]
  securityEdicts       SecurityEdict[]
  threatFeeds          ThreatFeed[]
  workflows            Workflow[]
  workflowRuns         WorkflowRun[]
  integrations         Integration[]
  products             Product[]
  suppliers            Supplier[]
  purchaseOrders       PurchaseOrder[]


  @@index([ownerId])
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  firstName   String?
  lastName    String?
  email       String?   @unique
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model Agent {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([workspaceId])
}

model Transaction {
  id                 String             @id @default(cuid())
  workspaceId        String
  workspace          Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId             String?
  user               User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  type               TransactionType
  amount             Decimal
  status             TransactionStatus  @default(PENDING)
  description        String
  aegisSignature     String?
  instrumentId       String?
  luckWeight         Float?
  outcome            String?
  judasFactor        Decimal?
  isTransmutation    Boolean            @default(false)
  realWorldAmount    Decimal?
  realWorldCurrency  String?
  vendorName         String?
  transmutationTithe Decimal?
  tributeAmount      Decimal?
  boonAmount         Decimal?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@index([workspaceId])
  @@index([userId])
}

model InstrumentDiscovery {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId   String
  firstViewedAt  DateTime  @default(now())
  nudgeSentAt    DateTime?
  converted      Boolean   @default(false)
  dtt            Int? // Discovery-to-Tribute time in minutes

  @@unique([userId, instrumentId])
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}


model PulseProfile {
  id                        String              @id @default(cuid())
  userId                    String              @unique
  user                      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  amplitude                 Float               @default(0.15)
  frequency                 Float               @default(0.01)
  phaseOffset               Float
  baselineLuck              Float               @default(0.4)
  lastEventTimestamp        DateTime            @default(now())
  consecutiveLosses         Int                 @default(0)
  lastResolvedPhase         PulsePhase?
  lastInteractionType       PulseInteractionType?
  frustration               Float               @default(0) // 0 to 1
  flowState                 Float               @default(0) // 0 to 1
  riskAversion              Float               @default(0.5) // 0 to 1
  nextTributeGuaranteedWin  Boolean?
  loadedDieBuffCount        Int?
  hadesBargainActive        Boolean?
}

model GlobalAgenticEvent {
  id          String   @id @default(cuid())
  eventName   String
  status      EventStatus @default(ACTIVE)
  poolTarget  Decimal
  currentPool Decimal  @default(0)
  expiresAt   DateTime
  shardReward String   // e.g., key of a Chaos Card
  winningWorkspaceId String?
  contributions Contribution[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contribution {
  id          String   @id @default(cuid())
  amount      Decimal
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())

  @@index([eventId])
  @@index([workspaceId])
}

model PulseEngineConfig {
  id                    String    @id @default(cuid())
  workspaceId           String    @unique
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  pityThreshold         Int       @default(5)
  crashGuardEnabled     Boolean   @default(true)
  festivalTriggerPercent Int      @default(20)
  transmutationTithe    Decimal   @default(0.18) @db.Decimal(4, 2)
  sensitivityModifier   Float     @default(1.0)
  updatedAt             DateTime  @updatedAt
}

model PotentialAccrualLog {
  id               String   @id @default(cuid())
  workspaceId      String
  userId           String
  instrumentId     String
  luckWeight       Float
  potentialAwarded Decimal
  aegisSignature   String?
  narrativeContext String?
  createdAt        DateTime @default(now())

  @@index([workspaceId, userId])
}

model SecurityAlert {
  id              String            @id @default(cuid())
  type            String
  explanation     String
  riskLevel       SecurityRiskLevel @default(low)
  timestamp       DateTime          @default(now())
  actionableOptions Json?
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId          String?
  user            User?             @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([workspaceId])
}

model SecurityEdict {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  description String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime  @default(now())
  
  @@index([workspaceId])
}

model ChaosCard {
  id           String       @id @default(cuid())
  key          String       @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}


model Workflow {
  id           String        @id @default(cuid())
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  definition   Json
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  runs         WorkflowRun[]
  
  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  @@index([workflowId])
}

model Integration {
  id                     String    @id @default(cuid())
  workspaceId            String
  workspace              Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId  String    // UUID from static manifest
  name                   String
  status                 IntegrationStatus @default(active)
  configDetails          Json
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  
  @@index([workspaceId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  stockLevel  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  poItems     PurchaseOrderItem[]

  @@index([workspaceId])
}

model Supplier {
  id           String          @id @default(cuid())
  name         String
  contactEmail String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  workspaceId  String
  workspace    Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  purchaseOrders PurchaseOrder[]

  @@index([workspaceId])
}

enum PurchaseOrderStatus {
  PENDING
  SENT
  FULFILLED
  CANCELLED
}

model PurchaseOrder {
  id          String   @id @default(cuid())
  supplierId  String
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  status      PurchaseOrderStatus   @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  items       PurchaseOrderItem[]

  @@index([workspaceId])
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product       @relation(fields: [productId], references: [id])
  quantity        Int
  cost            Decimal?      @db.Decimal(10, 2)
  
  @@index([purchaseOrderId])
  @@index([productId])
}
