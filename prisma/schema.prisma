// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  firstName               String?
  lastName                String?
  email                   String?                @unique
  emailVerified           DateTime?
  password                String?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspace          Workspace?             @relation("WorkspaceOwner")
  transactions            Transaction[]
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  agentAlias              String?
  lastLoginAt             DateTime?
  unlockedChaosCardKeys   String[]               @default([])
  corePainIndex           Float?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  reclamationGraceUntil   DateTime?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
}

model Workspace {
  id                   String                  @id @default(cuid())
  name                 String
  ownerId              String                  @unique
  owner                User                    @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members              User[]                  @relation("WorkspaceMembers")
  planTier             PlanTier                @default(Apprentice)
  credits              Decimal                 @default(100.0) @db.Decimal(18, 4)
  agentActionsUsed     Int                     @default(0)
  overageEnabled       Boolean                 @default(true)
  unlockedAppIds       String[]                @default([])
  agents               Agent[]
  contacts             Contact[]
  securityAlerts       SecurityAlert[]
  transactions         Transaction[]
  threatFeeds          ThreatFeed[]
  workflows            Workflow[]
  workflowRuns         WorkflowRun[]
  conversations        Conversation[]
  activeSystemEffects  ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  actionableOptions String[]
  timestamp         DateTime          @default(now())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Transaction {
  id               String            @id @default(cuid())
  workspaceId      String
  workspace        Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId           String?
  user             User?             @relation(fields: [userId], references: [id])
  type             TransactionType
  amount           Decimal           @db.Decimal(18, 4)
  description      String
  status           TransactionStatus
  agentId          String?
  instrumentId     String?
  luckWeight       Float?
  outcome          String?
  tributeAmount    Decimal?          @db.Decimal(18, 4)
  boonAmount       Decimal?          @db.Decimal(18, 4)
  judasFactor      Decimal?          @db.Decimal(18, 17)
  userPsyche       UserPsyche?
  createdAt        DateTime          @default(now())
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model Workflow {
  id           String         @id @default(cuid())
  name         String
  isActive     Boolean        @default(true)
  triggerType  String         @default("api")
  definition   Json
  workspaceId  String
  workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs         WorkflowRun[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus
  triggerPayload Json
  output         Json?
  log            Json[]
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json[]
  updatedAt   DateTime @updatedAt
}

model ChaosCard {
  key          String        @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())

  @@index([workspaceId, expiresAt])
}

model PulseProfile {
  id                  String                @id @default(cuid())
  userId              String                @unique
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  baselineLuck        Float                 @default(0.4)
  amplitude           Float                 @default(0.15)
  frequency           Float                 @default(0.01)
  phaseOffset         Float
  consecutiveLosses   Int                   @default(0)
  lastEventTimestamp  DateTime              @default(now())
  lastResolvedPhase   PulsePhase            @default(EQUILIBRIUM)
  lastInteractionType PulseInteractionType  @default(NEUTRAL)
  frustration         Float                 @default(0)
  flowState           Float                 @default(0)
  riskAversion        Float                 @default(0)
  nextTributeGuaranteedWin Boolean?         @default(false)
  hadesBargainActive  Boolean?              @default(false)
  loadedDieBuffCount  Int?                  @default(0)
}

model InstrumentDiscovery {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId  String
  workspace    Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId String
  firstViewedAt DateTime  @default(now())
  converted    Boolean    @default(false)
  dtt          Int? // Discovery-to-Tribute time in minutes
  nudgeSentAt  DateTime?

  @@unique([userId, instrumentId])
}

model GlobalAgenticEvent {
  id                  String      @id @default(cuid())
  eventName           String
  status              EventStatus @default(ACTIVE)
  poolTarget          Decimal     @db.Decimal(18, 4)
  currentPool         Decimal     @default(0) @db.Decimal(18, 4)
  expiresAt           DateTime
  shardReward         String?
  winningWorkspaceId  String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  contributions Contribution[]
  @@index([status])
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal            @db.Decimal(18, 4)
  workspaceId String
  userId      String
  createdAt   DateTime           @default(now())

  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  eventId     String
  @@index([workspaceId, eventId])
}

model Integration {
    id                      String @id @default(cuid())
    workspaceId             String
    workspace               Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    integrationManifestId   String // This is the UUID from the static manifest file
    name                    String
    status                  IntegrationStatus @default(active)
    configDetails           Json
    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  NEUTRAL
}

enum IntegrationStatus {
    active
    inactive
    error
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}
