
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String    @id @default(cuid())
  firstName               String?
  lastName                String?
  email                   String    @unique
  password                String
  lastLoginAt             DateTime? @updatedAt
  createdAt               DateTime  @default(now())
  role                    UserRole  @default(OPERATOR)
  agentAlias              String?
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  corePainIndex           Int?
  foundingBenediction     String?
  firstWhisper            String?
  foundingVow             String?
  foundingGoal            String?
  reclamationGraceUntil   DateTime?

  workspaces         Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces    Workspace[] @relation("WorkspaceOwner")
  ownedChaosCards    ChaosCard[]
  transactions       Transaction[]
  pulseProfile       PulseProfile?
  conversation       Conversation?
  instrumentDiscoveries InstrumentDiscovery[]
}

model Workspace {
  id                 String   @id @default(cuid())
  name               String
  ownerId            String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  planTier           PlanTier @default(Apprentice)
  credits            Decimal  @default(0)
  potential          Decimal  @default(0) // New meta-asset for the Age of Ascension
  agentActionsUsed   Int      @default(0)
  overageEnabled     Boolean  @default(false)
  unlockedAppIds     String[] @default([])

  owner              User     @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members            User[]   @relation("WorkspaceMembers")
  agents             Agent[]
  contacts           Contact[]
  securityAlerts     SecurityAlert[]
  threatFeeds        ThreatFeed[]
  workflows          Workflow[]
  workflowRuns       WorkflowRun[]
  transactions       Transaction[]
  conversations      Conversation[]
  activeSystemEffects ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?   @unique
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
}

model Workflow {
  id          String      @id @default(cuid())
  name        String
  isActive    Boolean     @default(true)
  triggerType String      @default("api")
  definition  Json
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  runs        WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  status         WorkflowRunStatus
  log            Json?
  triggerPayload Json?
  output         Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Transaction {
  id              String          @id @default(cuid())
  workspaceId     String
  workspace       Workspace       @relation(fields: [workspaceId], references: [id])
  userId          String?
  user            User?           @relation(fields: [userId], references: [id])
  type            TransactionType
  amount          Decimal
  potentialChange Decimal?        @default(0) // For Î¦
  tributeAmount   Decimal?        // The cost of the tribute
  boonAmount      Decimal?        // The amount of credits won
  description     String
  status          TransactionStatus
  createdAt       DateTime        @default(now())
  
  // For Folly Instruments
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  userPsyche      UserPsyche?
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Json[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Integration {
  id                     String             @id @default(cuid())
  workspaceId            String
  integrationManifestId  String // UUID of the manifest
  name                   String
  status                 IntegrationStatus
  configDetails          Json
}

model ChaosCard {
  id           String      @id @default(cuid())
  key          String      @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  users        User[]
}

model ActiveSystemEffect {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  cardKey     String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
}

model InstrumentDiscovery {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId   String
  firstViewedAt  DateTime  @default(now())
  converted      Boolean   @default(false)
  nudgeSentAt    DateTime?
  dtt            Int? // Discovery-to-Tribute time in minutes
}

model PulseProfile {
  id                        String    @id @default(cuid())
  userId                    String    @unique
  user                      User      @relation(fields: [userId], references: [id])
  
  // Sine-Rhythm Engine Params
  baselineLuck              Float     @default(0.4) // Base probability anchor
  amplitude                 Float     @default(0.15) // How volatile is the luck?
  frequency                 Float     @default(0.01) // How fast does the wave oscillate?
  phaseOffset               Float     // Unique starting point on the wave for this user
  lastEventTimestamp        DateTime  @default(now())
  lastResolvedPhase         PulsePhase @default(EQUILIBRIUM)
  lastInteractionType       PulseInteractionType @default(NEUTRAL)
  
  // Psychological State Metrics
  consecutiveLosses         Int       @default(0)
  riskAversion              Float     @default(0.5)
  frustration               Float     @default(0)
  flowState                 Float     @default(0)

  // Mercenary Buffs
  loadedDieBuffCount        Int       @default(0)
  nextTributeGuaranteedWin  Boolean   @default(false)
  hadesBargainActive        Boolean   @default(false)
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  paused
  error
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  NEUTRAL
}
