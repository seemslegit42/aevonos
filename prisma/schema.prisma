// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User and Auth
model User {
  id              String          @id @default(cuid())
  email           String          @unique
  password        String
  firstName       String?
  lastName        String?
  role            UserRole        @default(OPERATOR)
  psyche          UserPsyche      @default(ZEN_ARCHITECT)
  lastLoginAt     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  ownedWorkspaces   Workspace[]     @relation("WorkspaceOwner")
  workspaces        Workspace[]     @relation("WorkspaceMembers")
  transactions      Transaction[]
  ownedChaosCards   ChaosCard[]     @relation("UserOwnedChaosCards")
  instrumentDiscoveries InstrumentDiscovery[]
  pulseProfile      PulseProfile?
}

model Workspace {
  id                String            @id @default(cuid())
  name              String
  ownerId           String
  owner             User              @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members           User[]            @relation("WorkspaceMembers")
  planTier          PlanTier          @default(Apprentice)
  credits           Decimal           @default(0.0) @db.Decimal(12, 2)
  overageEnabled    Boolean           @default(true)
  agentActionsUsed  Int               @default(0)
  unlockedAppIds    String[]          @default([])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  agents            Agent[]
  securityAlerts    SecurityAlert[]
  contacts          Contact[]
  transactions      Transaction[]
  instrumentDiscoveries InstrumentDiscovery[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  threatFeeds       ThreatFeed[]
  integrations      Integration[]
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}


// Agents & Workflows
model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

model Workflow {
    id              String      @id @default(cuid())
    name            String
    definition      Json
    isActive        Boolean     @default(true)
    triggerType     String      @default("api") // api, schedule, event
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    workspaceId     String
    workspace       Workspace   @relation(fields: [workspaceId], references: [id])
    runs            WorkflowRun[]
}

model WorkflowRun {
    id              String      @id @default(cuid())
    workflowId      String
    workflow        Workflow    @relation(fields: [workflowId], references: [id])
    status          WorkflowRunStatus
    triggerPayload  Json?
    output          Json?
    log             Json?
    startedAt       DateTime    @default(now())
    finishedAt      DateTime?
    workspaceId     String
    workspace       Workspace   @relation(fields: [workspaceId], references: [id])
}

enum WorkflowRunStatus {
    pending
    running
    completed
    failed
    paused
}

// Security
model SecurityAlert {
  id                String             @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime           @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace          @relation(fields: [workspaceId], references: [id])
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

model ThreatFeed {
    id              String      @id @default(cuid())
    url             String
    workspaceId     String
    workspace       Workspace   @relation(fields: [workspaceId], references: [id])
    createdAt       DateTime    @default(now())

    @@unique([url, workspaceId])
}


// CRM
model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

// Billing & Monetization
model Transaction {
  id                String          @id @default(cuid())
  workspaceId       String
  workspace         Workspace       @relation(fields: [workspaceId], references: [id])
  userId            String?         // Which user initiated it? Null for system actions.
  user              User?           @relation(fields: [userId], references: [id])
  agentId           String?         // Which agent performed the action?
  type              TransactionType
  amount            Decimal         @db.Decimal(12, 2)
  description       String
  status            TransactionStatus
  createdAt         DateTime        @default(now())

  // Fields for Klepsydra/Folly Engine
  instrumentId      String?
  luckWeight        Float?
  outcome           String?
  boonAmount        Decimal?        @db.Decimal(12, 2)
  userPsyche        UserPsyche?
}

enum TransactionType {
  CREDIT // Adding funds, refunds
  DEBIT  // Spending funds, agent actions
  TRIBUTE // A special type for Chaos Card gambling
}

enum TransactionStatus {
    PENDING   // e.g., for e-Transfer confirmation
    COMPLETED
    FAILED
}

// Chaos Cards & Gamification
model ChaosCard {
  id              String      @id @default(cuid())
  key             String      @unique
  name            String
  description     String
  cardClass       ChaosCardClass
  cost            Int
  systemEffect    String
  owners          User[]      @relation("UserOwnedChaosCards")
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

model InstrumentDiscovery {
    id              String      @id @default(cuid())
    userId          String
    user            User        @relation(fields: [userId], references: [id])
    workspaceId     String
    workspace       Workspace   @relation(fields: [workspaceId], references: [id])
    instrumentId    String      // Can be a MicroApp ID or a ChaosCard key
    firstViewedAt   DateTime    @default(now())
    converted       Boolean     @default(false)
    dtt             Int?        // "Days to T" - time to convert in minutes
    nudgeSentAt     DateTime?

    @@unique([userId, instrumentId])
}

model PulseProfile {
    id                  String      @id @default(cuid())
    userId              String      @unique
    user                User        @relation(fields: [userId], references: [id])
    amplitude           Float       @default(0.2) // +/- 20%
    frequency           Float       @default(0.01) // One full cycle approx every 100 minutes
    phaseOffset         Float       @default(0)
    baselineLuck        Float       @default(0.5)
    lastEventTimestamp  DateTime    @default(now())
    consecutiveLosses   Int         @default(0)
    lastResolvedPhase   PulsePhase  @default(EQUILIBRIUM)
}

enum PulsePhase {
    CREST
    TROUGH
    EQUILIBRIUM
}

// Integrations
enum IntegrationStatus {
  active
  inactive
  error
}

model Integration {
  id                    String      @id @default(cuid())
  workspaceId           String
  workspace             Workspace   @relation(fields: [workspaceId], references: [id])
  integrationManifestId String      // UUID from the manifest
  name                  String
  status                IntegrationStatus @default(inactive)
  configDetails         Json
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}
