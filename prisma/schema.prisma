
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- CORE TENANCY & USER MODELS ---

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole                @default(OPERATOR)
  psyche                  UserPsyche              @default(ZEN_ARCHITECT)
  agentAlias              String?
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  workspaces              Workspace[]             @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]             @relation("WorkspaceOwner")
  ownedChaosCards         ChaosCard[]
  transactions            Transaction[]
  instrumentDiscoveries   InstrumentDiscovery[]
  conversations           Conversation[]
  pulseProfile            PulseProfile?
}

model Workspace {
  id                String            @id @default(cuid())
  name              String
  ownerId           String
  owner             User              @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  planTier          PlanTier          @default(Apprentice)
  credits           Decimal           @default(0.0)
  agentActionsUsed  Int               @default(0)
  overageEnabled    Boolean           @default(false)
  unlockedAppIds    String[]          @default([])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  members           User[]            @relation("WorkspaceMembers")
  agents            Agent[]
  contacts          Contact[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  transactions      Transaction[]
  activeSystemEffects ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
  conversations     Conversation[]
  integrations      Integration[]

  @@index([ownerId])
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}


// --- AGENTIC & WORKFLOW MODELS ---

model Agent {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([workspaceId])
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

model Workflow {
  id          String        @id @default(cuid())
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  name        String
  definition  Json
  isActive    Boolean       @default(true)
  triggerType String        @default("api")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  runs        WorkflowRun[]

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  @@index([workflowId])
  @@index([workspaceId])
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}


// --- ECONOMIC ENGINE MODELS ---

model Transaction {
  id             String          @id @default(cuid())
  workspaceId    String
  workspace      Workspace       @relation(fields: [workspaceId], references: [id])
  userId         String?
  user           User?           @relation(fields: [userId], references: [id])
  type           TransactionType
  amount         Decimal
  description    String
  status         TransactionStatus @default(PENDING)
  createdAt      DateTime        @default(now())
  instrumentId   String?
  luckWeight     Float?
  outcome        String?
  boonAmount     Decimal?
  userPsyche     UserPsyche?

  @@index([workspaceId])
  @@index([userId])
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model ChaosCard {
  id          String  @id @default(cuid())
  key         String  @unique
  name        String
  description String
  cardClass   ChaosCardClass
  cost        Int
  systemEffect String
  owners      User[]
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

model ActiveSystemEffect {
    id          String @id @default(cuid())
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    cardKey     String
    expiresAt   DateTime
    createdAt   DateTime @default(now())

    @@index([workspaceId])
}


// --- UTILITY & APPLICATION MODELS ---

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, email])
  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]

  @@index([workspaceId])
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
  none
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  url         String
  lastFetched DateTime?
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Json[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId, userId])
}

model InstrumentDiscovery {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId   String    // ID of the MicroApp or ChaosCard
  firstViewedAt  DateTime  @default(now())
  converted      Boolean   @default(false)
  dtt            Int?      // Discovery-to-Tribute time in minutes
  nudgeSentAt    DateTime?

  @@index([userId, instrumentId])
}

model Integration {
    id                    String @id @default(cuid())
    workspaceId           String
    workspace             Workspace @relation(fields: [workspaceId], references: [id])
    integrationManifestId String
    name                  String
    status                IntegrationStatus @default(active)
    configDetails         Json
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt
    
    @@index([workspaceId])
}

enum IntegrationStatus {
    active
    inactive
    error
}

model PulseProfile {
  id                 String     @id @default(cuid())
  userId             String     @unique
  user               User       @relation(fields: [userId], references: [id])
  baselineLuck       Float
  amplitude          Float
  frequency          Float
  phaseOffset        Float
  consecutiveLosses  Int        @default(0)
  lastEventTimestamp DateTime   @default(now())
  lastResolvedPhase  PulsePhase @default(EQUILIBRIUM)
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}
