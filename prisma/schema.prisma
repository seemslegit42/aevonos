// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?

  firstName String?
  lastName String?
  role      UserRole @default(OPERATOR)
  psyche    UserPsyche @default(ZEN_ARCHITECT)
  agentAlias String?
  
  corePainIndex Int?
  foundingVow String?
  foundingGoal String?
  foundingBenediction String?
  firstWhisper String?
  firstCommand String?
  
  reclamationGraceUntil DateTime?

  // App-specific data
  unlockedChaosCardKeys String[] @default([])

  pulseProfile PulseProfile?
  workspaces   Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  transactions Transaction[]
  securityAlerts SecurityAlert[]
  contributions Contribution[]
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId   String
  owner     User     @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members   User[]   @relation("WorkspaceMembers")
  
  planTier PlanTier @default(Apprentice)
  agentActionsUsed Int @default(0)
  overageEnabled Boolean @default(false)
  
  credits   Decimal @default(100.0)
  potential Decimal @default(0.0)

  // App-specific data
  unlockedAppIds String[] @default([])
  
  // Relations
  contacts Contact[]
  agents Agent[]
  securityAlerts SecurityAlert[]
  transactions Transaction[]
  workflows Workflow[]
  workflowRuns WorkflowRun[]
  pulseEngineConfig PulseEngineConfig?
  threatFeeds ThreatFeed[]
  securityEdicts SecurityEdict[]
  integrations Integration[]
  instrumentDiscoveries InstrumentDiscovery[]
  activeSystemEffects ActiveSystemEffect[]
  contributions Contribution[]
}

model Contact {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  email       String?  @unique
  firstName   String?
  lastName    String?
  phone       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model Agent {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  name String
  type String
  description String?
  status AgentStatus @default(idle)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}


model SecurityAlert {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  type String
  explanation String
  riskLevel SecurityRiskLevel
  timestamp DateTime @default(now())
  actionableOptions String[]
  
  userId String?
  user User? @relation(fields: [userId], references: [id])

  @@index([workspaceId])
}

model Transaction {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  type TransactionType
  status TransactionStatus @default(PENDING)
  amount Decimal
  description String

  userId String?
  user User? @relation(fields: [userId], references: [id])
  agentId String?
  
  // For Folly Instruments
  instrumentId String?
  luckWeight Float?
  outcome String?
  tributeAmount Decimal?
  boonAmount Decimal?
  judasFactor Decimal?
  userPsyche UserPsyche?
  
  // For Transmutations
  isTransmutation Boolean? @default(false)
  realWorldAmount Decimal?
  realWorldCurrency String?
  vendorName String?
  transmutationTithe Decimal?
  
  aegisSignature String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}


model Workflow {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  name String
  isActive Boolean @default(true)
  triggerType String
  definition Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  runs WorkflowRun[]

  @@index([workspaceId])
}


model WorkflowRun {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId String
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  status WorkflowRunStatus
  triggerPayload Json
  output Json?
  log Json?

  startedAt DateTime @default(now())
  finishedAt DateTime?
  
  @@index([workflowId])
}


model PulseProfile {
  id                       String               @id @default(cuid())
  userId                   String               @unique
  user                     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  amplitude                Float                @default(0.15)
  frequency                Float                @default(0.01)
  phaseOffset              Float
  baselineLuck             Float                @default(0.4)
  lastEventTimestamp       DateTime             @default(now())
  consecutiveLosses        Int                  @default(0)
  lastResolvedPhase        PulsePhase?
  lastInteractionType      PulseInteractionType?
  frustration              Float                @default(0.1)
  flowState                Float                @default(0.1)
  riskAversion             Float                @default(0.5)
  nextTributeGuaranteedWin Boolean?
  loadedDieBuffCount       Int?
  hadesBargainActive       Boolean?
}

model PulseEngineConfig {
  id String @id @default(cuid())
  workspaceId String @unique
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  pityThreshold Int @default(7)
  festivalTriggerPercent Int @default(20)
  transmutationTithe Decimal @default(0.18)
}


model ThreatFeed {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url String
  
  createdAt DateTime @default(now())
  @@index([workspaceId])
}

model SecurityEdict {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  description String
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  
  @@index([workspaceId])
}

model Integration {
    id String @id @default(cuid())
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    
    integrationManifestId String // Maps to the static manifest config
    name String
    status IntegrationStatus @default(active)
    configDetails Json

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@index([workspaceId])
}

model InstrumentDiscovery {
    id String @id @default(cuid())
    userId String
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    
    instrumentId String
    firstViewedAt DateTime @default(now())
    converted Boolean @default(false)
    nudgeSentAt DateTime?
    dtt Int? // Discovery to Tribute time in minutes

    @@unique([userId, instrumentId])
    @@index([userId])
}

model ActiveSystemEffect {
    id String @id @default(cuid())
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    
    cardKey String
    expiresAt DateTime
    createdAt DateTime @default(now())

    @@index([workspaceId])
}

model PotentialAccrualLog {
  id String @id @default(cuid())
  workspaceId String
  userId String
  instrumentId String
  luckWeight Float
  potentialAwarded Decimal
  aegisSignature String?
  narrativeContext String?
  createdAt DateTime @default(now())
  
  @@index([userId])
}

model ChaosCard {
  id String @id @default(cuid())
  key String @unique // e.g., 'GORDIAN_KNOT'
  name String
  description String
  cardClass ChaosCardClass
  cost Int
  systemEffect String
  createdAt DateTime @default(now())
}

model GlobalAgenticEvent {
  id String @id @default(cuid())
  eventName String
  status EventStatus @default(ACTIVE)
  poolTarget Decimal
  currentPool Decimal @default(0)
  shardReward String // ID of the Chaos Card to be awarded
  
  winningWorkspaceId String?
  
  createdAt DateTime @default(now())
  expiresAt DateTime
  
  contributions Contribution[]
}

model Contribution {
  id String @id @default(cuid())
  amount Decimal
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  eventId String
  event GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  
  createdAt DateTime @default(now())
}


enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
    active
    inactive
    error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
    WIN
    LOSS
    COMMAND_SUCCESS
    COMMAND_FAILURE
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  FAILED
}
