// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Workspace models are foundational to the multi-tenant architecture.
model User {
  id                      String      @id
  email                   String      @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole    @default(OPERATOR)
  agentAlias              String      @default("BEEP")
  psyche                  UserPsyche  @default(ZEN_ARCHITECT)
  lastLoginAt             DateTime?
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Float?
  foundingBenediction     String?
  firstWhisper            String?
  firstCommand            String?
  unlockedChaosCardKeys   String[]
  reclamationGraceUntil   DateTime?
  hasAbyssalScar          Boolean?    @default(false)
  workspaces              Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[] @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  conversation            Conversation?
  discoveries             InstrumentDiscovery[]
  contributions           Contribution[]
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
}

model Workspace {
  id                String      @id @default(cuid())
  name              String
  owner             User        @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId           String
  members           User[]      @relation("WorkspaceMembers")
  planTier          PlanTier    @default(Apprentice)
  credits           Decimal     @default(0) @db.Decimal(12, 2)
  potential         Decimal     @default(0) @db.Decimal(12, 2)
  agentActionsUsed  Int         @default(0)
  unlockedAppIds    String[]
  overageEnabled    Boolean     @default(true)
  agents            Agent[]
  contacts          Contact[]
  securityAlerts    SecurityAlert[]
  securityEdicts    SecurityEdict[]
  threatFeeds       ThreatFeed[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  transactions      Transaction[]
  activeEffects     ActiveSystemEffect[]
  discoveries       InstrumentDiscovery[]
  potentialAccrualLogs PotentialAccrualLog[]
  contributions     Contribution[]
  conversations     Conversation[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Agent {
  id            String       @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus  @default(idle)
  configuration Json?
  workspace     Workspace    @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  userId            String?
}

model SecurityEdict {
  id          String   @id @default(cuid())
  description String
  isActive    Boolean  @default(true)
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime @default(now())
}

model ThreatFeed {
  id          String   @id @default(cuid())
  url         String   @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  definition   Json
  isActive     Boolean       @default(true)
  triggerType  String        @default("api") // e.g., 'api', 'schedule', 'event'
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  runs         WorkflowRun[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workflowId     String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json[]
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Transaction {
  id              String           @id @default(cuid())
  workspace       Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  user            User?            @relation(fields: [userId], references: [id])
  userId          String?
  type            TransactionType
  amount          Decimal          @db.Decimal(12, 2)
  status          TransactionStatus @default(COMPLETED)
  description     String
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?         @db.Decimal(12, 2)
  boonAmount      Decimal?         @db.Decimal(12, 2)
  judasFactor     Decimal?         @db.Decimal(12, 11)
  userPsyche      UserPsyche?
  aegisSignature  String?
  createdAt       DateTime         @default(now())
}

model PulseProfile {
  id                  String               @id @default(cuid())
  user                User                 @relation(fields: [userId], references: [id])
  userId              String               @unique
  baselineLuck        Float                @default(0.4)
  amplitude           Float                @default(0.15)
  frequency           Float                @default(0.01)
  phaseOffset         Float
  consecutiveLosses   Int                  @default(0)
  lastEventTimestamp  DateTime             @default(now())
  frustration         Float                @default(0)
  flowState           Float                @default(0)
  riskAversion        Float                @default(0.5)
  lastResolvedPhase   PulsePhase           @default(EQUILIBRIUM)
  lastInteractionType PulseInteractionType @default(COMMAND_SUCCESS)
  loadedDieBuffCount      Int?             @default(0)
  nextTributeGuaranteedWin Boolean?        @default(false)
  hadesBargainActive      Boolean?        @default(false)
}

model ChaosCard {
  id          String         @id
  key         String         @unique
  name        String
  description String
  cardClass   ChaosCardClass @default(AESTHETIC)
  cost        Int
  systemEffect String
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  cardKey     String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  instrumentId  String
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false)
  dtt           Int?
  nudgeSentAt   DateTime?
}

model PotentialAccrualLog {
  id               String    @id @default(cuid())
  workspace        Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId      String
  userId           String
  instrumentId     String
  luckWeight       Float
  potentialAwarded Decimal   @db.Decimal(12, 2)
  narrativeContext String
  aegisSignature   String?
  createdAt        DateTime  @default(now())
}

model Contribution {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(12, 2)
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  eventId     String
  createdAt   DateTime @default(now())
}

model GlobalAgenticEvent {
  id                  String         @id @default(cuid())
  eventName           String
  status              EventStatus    @default(ACTIVE)
  poolTarget          Decimal        @db.Decimal(12, 2)
  currentPool         Decimal        @default(0) @db.Decimal(12, 2)
  expiresAt           DateTime
  shardReward         String
  winningWorkspaceId  String?
  contributions       Contribution[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model Conversation {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  messages    Json      @default("[]")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String // FK to a static list of available integrations
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json? // Encrypted
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  COMMAND_SUCCESS
  COMMAND_FAILURE
  WIN
  LOSS
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  FAILED
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}
