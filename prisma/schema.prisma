// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------------
// CORE TENANCY MODELS
// ---------------------------------
model User {
  id                      String              @id @default(cuid())
  email                   String              @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole            @default(OPERATOR)
  psyche                  UserPsyche          @default(ZEN_ARCHITECT)
  agentAlias              String              @default("BEEP")
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime? // For the "Rite of Reclamation" feature
  foundingVow             String?
  foundingGoal            String?

  workspaces              Workspace[]         @relation("WorkspaceMembers")
  ownedWorkspace          Workspace?          @relation("WorkspaceOwner")
  ownedChaosCards         ChaosCard[]         @relation("UserOwnedChaosCards")
  pulseProfile            PulseProfile?
  transactions            Transaction[]
  instrumentDiscoveries   InstrumentDiscovery[]
  conversations           Conversation[]
}

model Workspace {
  id                String       @id @default(cuid())
  name              String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  ownerId           String       @unique
  owner             User         @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members           User[]       @relation("WorkspaceMembers")
  planTier          PlanTier     @default(Apprentice)
  credits           Decimal      @default(0.0)
  agentActionsUsed  Int          @default(0)
  overageEnabled    Boolean      @default(true)
  unlockedAppIds    String[]     @default([])

  agents            Agent[]
  contacts          Contact[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  transactions      Transaction[]
  instrumentDiscoveries InstrumentDiscovery[]
  integrations      Integration[]
  activeSystemEffects ActiveSystemEffect[]
  conversations     Conversation[]
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}


// ---------------------------------
// AGENTIC & WORKFLOW MODELS
// ---------------------------------
model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus @default(idle)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id])
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

model Workflow {
  id              String         @id @default(cuid())
  name            String
  definition      Json // JSONB for workflow graph
  isActive        Boolean        @default(true)
  triggerType     String         @default("api") // e.g., 'api', 'schedule', 'event'
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  workspaceId     String
  workspace       Workspace      @relation(fields: [workspaceId], references: [id])
  runs            WorkflowRun[]
}

model WorkflowRun {
  id              String            @id @default(cuid())
  status          WorkflowRunStatus
  startedAt       DateTime
  finishedAt      DateTime?
  triggerPayload  Json?
  output          Json?
  log             Json?
  workflowId      String
  workflow        Workflow          @relation(fields: [workflowId], references: [id])
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}


// ---------------------------------
// ECONOMIC ENGINE (OBELISK PAY & KLEPSYDRA)
// ---------------------------------
model Transaction {
  id            String            @id @default(cuid())
  workspaceId   String
  workspace     Workspace         @relation(fields: [workspaceId], references: [id])
  userId        String?
  user          User?             @relation(fields: [userId], references: [id])
  agentId       String?
  type          TransactionType
  amount        Decimal
  description   String
  status        TransactionStatus
  createdAt     DateTime          @default(now())
  
  // For Klepsydra Engine tributes (Chaos Cards, etc.)
  instrumentId  String?
  luckWeight    Float?
  outcome       String?
  boonAmount    Decimal?
  userPsyche    UserPsyche?
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE // A special type for Folly Instruments (Chaos Cards, Oracle)
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model PulseProfile {
  id                  String     @id @default(cuid())
  userId              String     @unique
  user                User       @relation(fields: [userId], references: [id])
  baselineLuck        Float      @default(0.5)
  amplitude           Float      @default(0.15)
  frequency           Float      @default(0.05) // Cycles per minute
  phaseOffset         Float      @default(0)
  lastEventTimestamp  DateTime   @default(now())
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)
  consecutiveLosses   Int        @default(0)
  updatedAt           DateTime   @updatedAt
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}


// ---------------------------------
// UTILITY & APPLICATION MODELS
// ---------------------------------
model Contact {
  id          String    @id @default(cuid())
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
  none
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([url, workspaceId])
}

model Conversation {
  id           String    @id @default(cuid())
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id])
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  messages     Json      @default("[]") // Store an array of message objects
  updatedAt    DateTime  @updatedAt
}

// --- ARMORY & NUDGE ENGINE ---
model ChaosCard {
  id           String @id @default(cuid())
  key          String @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  owners       User[] @relation("UserOwnedChaosCards")
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

model InstrumentDiscovery {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId String // ID of MicroApp or key of ChaosCard
  firstViewedAt DateTime @default(now())
  converted    Boolean  @default(false)
  dtt          Int?     // Discovery-to-Tribute time in minutes
  nudgeSentAt  DateTime?

  @@unique([userId, instrumentId])
}

model ActiveSystemEffect {
  id           String   @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  cardKey      String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  integrationManifestId String // The UUID from the static manifest
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

enum IntegrationStatus {
  active
  paused
  error
  disconnected
}
