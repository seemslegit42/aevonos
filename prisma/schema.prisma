
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ---- ΛΞVON OS SPECIFIC MODELS ----

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

model User {
  id                      String       @id @default(cuid())
  email                   String       @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole     @default(OPERATOR)
  psyche                  UserPsyche   @default(ZEN_ARCHITECT)
  agentAlias              String?      @default("BEEP")
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  
  // Rite of Invocation fields
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Int?
  foundingBenediction     String?
  firstWhisper            String?

  ownedChaosCards         ChaosCard[] @relation("UserOwnedChaosCards")
  
  // Relational Fields
  workspaces              Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[] @relation("WorkspaceOwner")
  transactions            Transaction[]
  instrumentDiscoveries   InstrumentDiscovery[]
  conversations           Conversation[]
  pulseProfile            PulseProfile?
  accounts                Account[]
  sessions                Session[]

  @@map("users")
}

model Workspace {
  id                      String        @id @default(cuid())
  name                    String
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  planTier                PlanTier      @default(Apprentice)
  credits                 Decimal       @default(0)
  potential               Decimal       @default(0) @map("potential_phi")
  agentActionsUsed        Int           @default(0)
  overageEnabled          Boolean       @default(true)
  unlockedAppIds          String[]      @default([])

  // Relational Fields
  ownerId                 String
  owner                   User          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members                 User[]        @relation("WorkspaceMembers")
  
  agents                  Agent[]
  workflows               Workflow[]
  workflowRuns            WorkflowRun[]
  contacts                Contact[]
  integrations            Integration[]
  securityAlerts          SecurityAlert[]
  threatFeeds             ThreatFeed[]
  transactions            Transaction[]
  instrumentDiscoveries   InstrumentDiscovery[]
  conversations           Conversation[]
  activeSystemEffects     ActiveSystemEffect[]

  // App-specific data models
  intelligenceCases       IntelligenceCase[]
  expenseReceipts         ExpenseReceipt[]
  laheyLogEntries         LaheyLogEntry[]
  expenseEntries          ExpenseEntry[]
  patricktEvents          PatricktEvent[]
  products                Product[]
  suppliers               Supplier[]
  purchaseOrders          PurchaseOrder[]
  directories             Directory[]
  files                   File[]

  @@map("workspaces")
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

model Contact {
  id          String   @id @default(cuid())
  workspaceId String
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  @@map("contacts")
}

// -- AGENT & WORKFLOW MODELS --

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Agent {
  id            String      @id @default(cuid())
  workspaceId   String
  name          String
  type          String
  description   String?
  status        AgentStatus @default(idle)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  @@map("agents")
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model Workflow {
  id              String         @id @default(cuid())
  workspaceId     String
  name            String
  isActive        Boolean        @default(true)
  triggerType     String         @default("api")
  definition      Json
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  runs            WorkflowRun[]
  
  workspace       Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  @@map("workflows")
}

model WorkflowRun {
  id              String            @id @default(cuid())
  workspaceId     String
  workflowId      String
  status          WorkflowRunStatus
  startedAt       DateTime          @default(now())
  finishedAt      DateTime?
  triggerPayload  Json?
  output          Json?
  log             Json?
  
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflow        Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  @@map("workflow_runs")
}

model Conversation {
  id            String   @id @default(cuid())
  userId        String   @unique
  workspaceId   String
  messages      Json     @default("[]")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace     Workspace@relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  @@map("conversations")
}


// -- SECURITY (AEGIS) MODELS --

enum SecurityRiskLevel {
  low
  medium
  high
  critical
  none
}

model SecurityAlert {
  id                  String             @id @default(cuid())
  workspaceId         String
  type                String
  explanation         String
  riskLevel           SecurityRiskLevel
  timestamp           DateTime           @default(now())
  actionableOptions   String[]
  
  workspace           Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  @@map("security_alerts")
}

model ThreatFeed {
  id           String    @id @default(cuid())
  workspaceId  String
  url          String
  lastChecked  DateTime?
  
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  @@map("threat_feeds")
}

// -- BILLING & ECONOMY (OBELISK/KLEPSYDRA) MODELS --

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Transaction {
  id              String             @id @default(cuid())
  workspaceId     String
  userId          String?
  agentId         String?
  type            TransactionType
  amount          Decimal
  potentialChange Decimal?           @map("potential_change_phi")
  description     String
  status          TransactionStatus  @default(PENDING)
  createdAt       DateTime           @default(now())

  // Fields for Folly Instrument tributes
  instrumentId    String?            @map("instrument_id")
  luckWeight      Float?             @map("luck_weight")
  outcome         String?
  tributeAmount   Decimal?           @map("tribute_amount")
  boonAmount      Decimal?           @map("boon_amount")
  userPsyche      UserPsyche?        @map("user_psyche")
  
  workspace       Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user            User?              @relation(fields: [userId], references: [id])
  @@map("transactions")
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

model ChaosCard {
  id              String         @id @default(cuid())
  key             String         @unique
  name            String
  description     String
  cardClass       ChaosCardClass
  cost            Int
  systemEffect    String
  owners          User[]         @relation("UserOwnedChaosCards")
  
  @@map("chaos_cards")
}

model ActiveSystemEffect {
    id           String   @id @default(cuid())
    workspaceId  String
    cardKey      String
    createdAt    DateTime @default(now())
    expiresAt    DateTime
    
    workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    @@map("active_system_effects")
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
    WIN
    LOSS
    TRIBUTE
}

model PulseProfile {
    id                     String               @id @default(cuid())
    userId                 String               @unique
    amplitude              Float
    frequency              Float
    phaseOffset            Float
    baselineLuck           Float
    consecutiveLosses      Int                  @default(0)
    lastEventTimestamp     DateTime             @default(now())
    lastResolvedPhase      PulsePhase           @default(EQUILIBRIUM)
    lastInteractionType    PulseInteractionType @default(TRIBUTE)
    
    // PCE Metrics
    riskAversion           Float                @default(0.5)
    frustration            Float                @default(0.2)
    flowState              Float                @default(0.1)
    unlockedMatrixPatterns String[]             @default([])

    user                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@map("pulse_profiles")
}

model InstrumentDiscovery {
    id              String    @id @default(cuid())
    userId          String
    workspaceId     String
    instrumentId    String
    firstViewedAt   DateTime  @default(now())
    converted       Boolean   @default(false)
    nudgeSentAt     DateTime?
    dtt             Int?      @map("discovery_to_tribute_time_minutes")

    user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    @@unique([userId, instrumentId])
    @@map("instrument_discoveries")
}

// -- INTEGRATION MODELS --

enum IntegrationStatus {
  active
  inactive
  error
}

model Integration {
    id                      String            @id @default(cuid())
    workspaceId             String
    integrationManifestId   String            @map("integration_manifest_id")
    name                    String
    status                  IntegrationStatus @default(inactive)
    configDetails           Json
    createdAt               DateTime          @default(now())
    updatedAt               DateTime          @updatedAt
    
    workspace               Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    @@map("integrations")
}

// -- MICRO-APP SPECIFIC MODELS --

// Infidelity Radar
model IntelligenceCase {
    id                  String      @id @default(cuid())
    workspaceId         String
    targetName          String
    osintReport         Json?
    analysisResult      Json?
    decoyResult         Json?
    dossier             Json?
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt

    workspace           Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    @@map("intelligence_cases")
}

// Paper Trail P.I.
model ExpenseReceipt {
    id                  String      @id @default(cuid())
    workspaceId         String
    caseFile            String?
    vendor              String
    amount              Decimal
    transactionDate     DateTime
    informantLead       String
    imageDataUri        String
    createdAt           DateTime    @default(now())

    workspace           Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    @@map("expense_receipts")
}

// Lahey Surveillance
model LaheyLogEntry {
    id                  String      @id @default(cuid())
    workspaceId         String
    employee            String
    event               String
    durationMinutes     Int?
    shitstormIndex      Int
    laheyCommentary     String
    timestamp           DateTime    @default(now())

    workspace           Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    @@map("lahey_log_entries")
}

// Lucille Bluth
model ExpenseEntry {
    id                  String      @id @default(cuid())
    workspaceId         String
    description         String
    amount              Decimal
    category            String
    lucilleRemark       String
    newCategory         String?
    timestamp           DateTime    @default(now())

    workspace           Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    @@map("expense_entries")
}

// Patrickt
enum LoggedEventCategory {
    DRUG_DEALS
    FRIEND_BETRAYALS
    GIRLFRIEND_DRAMA
    CLASSIC_CHAOS
    REDEMPTION_ATTEMPTS
}
model PatricktEvent {
    id                  String              @id @default(cuid())
    workspaceId         String
    category            LoggedEventCategory
    description         String
    martyrPoints        Int
    timestamp           DateTime            @default(now())

    workspace           Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    @@map("patrickt_events")
}

// Inventory Daemon
model Product {
    id              String          @id @default(cuid())
    workspaceId     String
    name            String
    sku             String          @unique
    stockLevel      Int
    lowStockThreshold Int           @default(50)
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    workspace       Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    purchaseOrders  PurchaseOrder[]
    @@map("products")
}

model Supplier {
    id              String          @id @default(cuid())
    workspaceId     String
    name            String
    contactEmail    String?
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    workspace       Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    purchaseOrders  PurchaseOrder[]
    @@map("suppliers")
}

enum PurchaseOrderStatus {
  PENDING
  SUBMITTED
  FULFILLED
  CANCELLED
}

model PurchaseOrder {
    id              String              @id @default(cuid())
    workspaceId     String
    productId       String
    supplierId      String
    quantity        Int
    status          PurchaseOrderStatus @default(PENDING)
    estimatedDelivery DateTime?
    createdAt       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt

    workspace       Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    product         Product             @relation(fields: [productId], references: [id])
    supplier        Supplier            @relation(fields: [supplierId], references: [id])
    @@map("purchase_orders")
}

// File Explorer
model Directory {
    id              String      @id @default(cuid())
    workspaceId     String
    name            String
    parentId        String?
    createdAt       DateTime    @default(now())

    workspace       Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    parent          Directory?  @relation("SubDirectories", fields: [parentId], references: [id], onDelete: Cascade)
    children        Directory[] @relation("SubDirectories")
    files           File[]
    @@map("directories")
}

model File {
    id              String      @id @default(cuid())
    workspaceId     String
    name            String
    type            String      // e.g., 'application/pdf', 'text/markdown'
    size            Int         // in bytes
    storagePath     String      // e.g., an S3 key
    directoryId     String
    createdAt       DateTime    @default(now())

    workspace       Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    directory       Directory   @relation(fields: [directoryId], references: [id], onDelete: Cascade)
    @@map("files")
}
