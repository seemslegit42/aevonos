// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Multi-tenancy and User Management
model Workspace {
  id               Int      @id @default(autoincrement())
  uuid             String   @unique @default(cuid())
  name             String
  planTier         String   @default("free") // e.g., free, pro, scale
  agentActionsUsed Int      @default(0)
  overageEnabled   Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  workflows      Workflow[]
  workflowRuns   WorkflowRun[]
  agents         Agent[]
  securityAlerts SecurityAlert[]
  // In a real app, you'd have a User model and a many-to-many relation here.
}

model Contact {
  id        String   @id @default(cuid())
  email     String?  @unique
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // In a real multi-tenant app, this would have a relation to Workspace
}


// LangGraph / Loom Studio Models
enum WorkflowTriggerType {
  api
  schedule
  event
}

model Workflow {
  id          Int                 @id @default(autoincrement())
  uuid        String              @unique @default(cuid())
  name        String
  isActive    Boolean             @default(true)
  triggerType WorkflowTriggerType @default(api)
  definition  Json // Stores the LangGraph JSON structure
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  workspaceId Int?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  runs WorkflowRun[]
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model WorkflowRun {
  id             Int               @id @default(autoincrement())
  uuid           String            @unique @default(cuid())
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  workflowId Int
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  workspaceId Int?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

// Agent Management
enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Agent {
  id                 String      @id @default(cuid())
  name               String
  description        String?
  status             AgentStatus @default(idle)
  assignedWorkflowId String? // This could be a relation if workflows had UUIDs as primary keys
  lastActivityAt     DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  workspaceId Int?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
}

// Aegis Security
enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime
  actionableOptions String[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  workspaceId Int?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
}
