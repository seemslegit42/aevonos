// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?

  firstName String?
  lastName  String?
  agentAlias String? @default("BEEP")

  role UserRole @default(OWNER)
  psyche UserPsyche @default(ZEN_ARCHITECT)

  foundingVow String?
  foundingGoal String?
  corePainIndex Int?
  foundingBenediction String?
  firstWhisper String?
  firstCommand String?
  
  reclamationGraceUntil DateTime?
  
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaces      Workspace[] @relation("WorkspaceMembers")

  conversations Conversation[]
  transactions  Transaction[]
  pulseProfile  PulseProfile?
  contributions Contribution[]
  potentialAccrualLogs PotentialAccrualLog[]
  instrumentDiscoveries InstrumentDiscovery[]
  renunciations Renunciation[]
  
  unlockedChaosCardKeys String[] @default([])
  hasAbyssalScar Boolean @default(false)
}

model Workspace {
  id   String @id @default(cuid())
  name String

  ownerId String
  owner   User   @relation("WorkspaceOwner", fields: [ownerId], references: [id])

  members User[] @relation("WorkspaceMembers")

  planTier         PlanTier @default(Apprentice)
  credits          Decimal  @default(100.0) @db.Decimal(12, 2)
  potential        Decimal  @default(0) @db.Decimal(18, 6)
  agentActionsUsed Int      @default(0)
  overageEnabled   Boolean  @default(true)
  
  unlockedAppIds String[] @default([])

  agents         Agent[]
  contacts       Contact[]
  securityAlerts SecurityAlert[]
  threatFeeds    ThreatFeed[]
  securityEdicts SecurityEdict[]
  conversations  Conversation[]
  transactions   Transaction[]
  workflows      Workflow[]
  workflowRuns   WorkflowRun[]
  integrations   Integration[]
  instrumentDiscoveries InstrumentDiscovery[]
  pulseEngineConfig PulseEngineConfig?
  contributions  Contribution[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String // e.g., 'winston-wolfe', 'kif-kroker'
  description String?
  status      AgentStatus @default(idle)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id          String  @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  userId String?
}

model ThreatFeed {
    id          String @id @default(cuid())
    url         String @unique
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model SecurityEdict {
    id          String  @id @default(cuid())
    description String
    isActive    Boolean @default(true)
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json
  updatedAt   DateTime @updatedAt
}

model Transaction {
  id          String            @id @default(cuid())
  type        TransactionType
  amount      Decimal           @db.Decimal(12, 2)
  description String
  status      TransactionStatus
  aegisSignature String?

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  
  // Folly Instrument fields
  instrumentId      String?
  luckWeight        Float?
  outcome           String?
  tributeAmount     Decimal? @db.Decimal(12, 2)
  boonAmount        Decimal? @db.Decimal(12, 2)
  judasFactor       Decimal? @db.Decimal(5, 4)
  userPsyche        UserPsyche?
  
  // Transmutation fields
  isTransmutation   Boolean? @default(false)
  realWorldAmount   Decimal? @db.Decimal(12, 2)
  realWorldCurrency String?
  vendorName        String?
  transmutationTithe Decimal? @db.Decimal(12, 2)

  createdAt DateTime @default(now())
}

model PulseProfile {
  id                        String      @id @default(cuid())
  userId                    String      @unique
  user                      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  amplitude                 Float       @default(0.15)
  frequency                 Float       @default(0.01)
  phaseOffset               Float
  baselineLuck              Float       @default(0.4)
  
  lastEventTimestamp        DateTime    @default(now())
  consecutiveLosses         Int         @default(0)
  lastResolvedPhase         PulsePhase?
  lastInteractionType       PulseInteractionType?

  // Psychological metrics
  frustration               Float       @default(0.1)
  flowState                 Float       @default(0.1)
  riskAversion              Float       @default(0.5)
  
  // Buffs
  nextTributeGuaranteedWin  Boolean?
  loadedDieBuffCount        Int?
  hadesBargainActive        Boolean?
}

model InstrumentDiscovery {
    id              String    @id @default(cuid())
    userId          String
    user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspaceId     String
    workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    instrumentId    String
    firstViewedAt   DateTime  @default(now())
    converted       Boolean   @default(false)
    dtt             Int? // Discovery-to-Tribute time in minutes
    nudgeSentAt     DateTime?

    @@unique([userId, instrumentId])
}

model ActiveSystemEffect {
    id          String    @id @default(cuid())
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    cardKey     String
    createdAt   DateTime  @default(now())
    expiresAt   DateTime
}

model ChaosCard {
    id              String          @id @default(cuid())
    key             String          @unique
    name            String
    description     String
    cardClass       ChaosCardClass
    cost            Int
    systemEffect    String
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  definition   Json
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs         WorkflowRun[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus
  triggerPayload Json
  output         Json?
  log            Json?
  startedAt      DateTime
  finishedAt     DateTime?
  
  workflowId   String
  workflow     Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
}

model Integration {
    id String @id @default(cuid())
    name String
    status IntegrationStatus @default(active)
    configDetails Json
    
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    
    integrationManifestId String
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PotentialAccrualLog {
    id                String    @id @default(cuid())
    userId            String
    user              User      @relation(fields: [userId], references: [id])
    workspaceId       String
    workspace         Workspace @relation(fields: [workspaceId], references: [id])
    instrumentId      String
    luckWeight        Float
    potentialAwarded  Decimal   @db.Decimal(18, 6)
    aegisSignature    String
    narrativeContext  String
    createdAt         DateTime  @default(now())
}

model GlobalAgenticEvent {
  id String @id @default(cuid())
  eventName String
  status EventStatus @default(ACTIVE)
  poolTarget Decimal @db.Decimal(20, 2)
  currentPool Decimal @default(0) @db.Decimal(20, 2)
  shardReward String // e.g. a ChaosCard key
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  winningWorkspaceId String?
  contributions Contribution[]
}

model Contribution {
  id String @id @default(cuid())
  amount Decimal @db.Decimal(12, 2)
  
  eventId String
  event GlobalAgenticEvent @relation(fields: [eventId], references: [id])

  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  userId String
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model Renunciation {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  renouncedItemType String   // "X_CREDITS", "MICRO_APP"
  renouncedItemName String
  valueInX          Decimal   @db.Decimal(20, 2)
  createdAt         DateTime @default(now())
  aegisSignature    String
}

model PulseEngineConfig {
  id              String      @id @default(cuid())
  workspaceId     String      @unique
  workspace       Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  pityThreshold           Int       @default(7)
  festivalTriggerPercent  Int       @default(20)
  transmutationTithe      Decimal   @default(0.18) @db.Decimal(5, 4)

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
  OWNER
}

enum UserPsyche {
    ZEN_ARCHITECT
    SYNDICATE_ENFORCER
    RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum IntegrationStatus {
    active
    inactive
    error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
    WIN
    LOSS
    COMMAND_SUCCESS
    COMMAND_FAILURE
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}
