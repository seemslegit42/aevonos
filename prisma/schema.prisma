
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// ==================================================================
// üîê AUTH & USER MODELS
// ==================================================================

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  firstName     String?
  lastName      String?
  password      String
  lastLoginAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaces    Workspace[] @relation("WorkspaceMembers")
  transactions  Transaction[]
}

model Workspace {
  id               String       @id @default(cuid())
  name             String
  ownerId          String
  owner            User         @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members          User[]       @relation("WorkspaceMembers")
  planTier         PlanTier     @default(Apprentice)
  agentActionsUsed Int          @default(0)
  credits          Decimal      @default(0.00)
  overageEnabled   Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  agents           Agent[]
  workflows        Workflow[]
  workflowRuns     WorkflowRun[]
  contacts         Contact[]
  securityAlerts   SecurityAlert[]
  threatFeeds      ThreatFeed[]
  integrations     Integration[]
  transactions     Transaction[]

  @@index([ownerId])
}

// ==================================================================
// üèõÔ∏è CORE OS MODELS
// ==================================================================

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String // e.g., 'winston-wolfe', 'kif-kroker'
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  transactions Transaction[]

  @@index([workspaceId])
}

model Workflow {
  id           String         @id @default(cuid())
  name         String
  isActive     Boolean        @default(true)
  triggerType  String         @default("api") // e.g., 'api', 'schedule', 'event'
  definition   Json           // LangGraph JSON structure for nodes, edges, logic
  workspaceId  String
  workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs         WorkflowRun[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?             @default("[]")
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  @@index([workflowId])
  @@index([workspaceId])
}

model Contact {
  id          String    @id @default(cuid())
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model SecurityAlert {
    id                String            @id @default(cuid())
    type              String
    explanation       String
    riskLevel         SecurityRiskLevel @default(low)
    timestamp         DateTime          @default(now())
    actionableOptions String[]
    workspaceId       String
    workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@index([workspaceId])
}

model ThreatFeed {
    id          String    @id @default(cuid())
    url         String
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([url, workspaceId])
}

model Integration {
    id                   String    @id @default(cuid())
    workspaceId          String
    workspace            Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    integrationManifestId String // This will be the UUID from our static manifest config
    name                 String
    status               String    @default("active") // "active", "inactive", "error"
    configDetails        Json
    createdAt            DateTime  @default(now())
    updatedAt            DateTime  @updatedAt

    @@index([workspaceId])
}

// ==================================================================
// üèõÔ∏è OBELISK PAY LEDGER MODELS
// ==================================================================

model Transaction {
  id          String          @id @default(cuid())
  workspaceId String
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type        TransactionType
  amount      Decimal
  description String
  userId      String?         // User who initiated the transaction
  user        User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  agentId     String?         // Agent that performed the action
  agent       Agent?          @relation(fields: [agentId], references: [id], onDelete: SetNull)
  createdAt   DateTime        @default(now())

  @@index([workspaceId])
  @@index([userId])
  @@index([agentId])
}


// ==================================================================
// üîë ENUMS
// ==================================================================

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum SecurityRiskLevel {
    none
    low
    medium
    high
    critical
}

enum TransactionType {
    CREDIT
    DEBIT
}
