
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-1.1.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==============================================================================
// CORE TENANCY MODELS
// ==============================================================================

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole               @default(OPERATOR)
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  agentAlias              String?                @default("BEEP")
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  foundingVow             String?
  foundingGoal            String?
  firstWhisper            String?
  corePainIndex           Float?
  unlockedChaosCardKeys   String[]
  ownedWorkspaces         Workspace[]            @relation("WorkspaceOwner")
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
  contributions           Contribution[]
  conversations           Conversation[]
  securityAlerts          SecurityAlert[]
}

model Workspace {
  id                   String                 @id @default(cuid())
  name                 String
  owner                User                   @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId              String
  members              User[]                 @relation("WorkspaceMembers")
  agents               Agent[]
  contacts             Contact[]
  transactions         Transaction[]
  securityAlerts       SecurityAlert[]
  workflows            Workflow[]
  workflowRuns         WorkflowRun[]
  integrations         Integration[]
  threatFeeds          ThreatFeed[]
  conversations        Conversation[]
  instrumentDiscoveries InstrumentDiscovery[]
  activeSystemEffects  ActiveSystemEffect[]
  contributions        Contribution[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  planTier             PlanTier               @default(Apprentice)
  credits              Decimal                @default(0)
  agentActionsUsed     Int                    @default(0)
  overageEnabled       Boolean                @default(true)
  unlockedAppIds       String[]
}

// ==============================================================================
// AGENTIC & WORKFLOW MODELS
// ==============================================================================

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Workflow {
  id           String          @id @default(cuid())
  name         String
  isActive     Boolean         @default(true)
  triggerType  String          @default("api")
  definition   Json
  workspace    Workspace       @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  runs         WorkflowRun[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workflowId     String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

// ==============================================================================
// ECONOMIC ENGINE MODELS (OBELISK & KLEPSYDRA)
// ==============================================================================

model Transaction {
  id               String          @id @default(cuid())
  workspace        Workspace       @relation(fields: [workspaceId], references: [id])
  workspaceId      String
  user             User?           @relation(fields: [userId], references: [id])
  userId           String?
  type             TransactionType
  amount           Decimal
  description      String
  status           TransactionStatus
  instrumentId     String?
  luckWeight       Float?
  outcome          String?
  tributeAmount    Decimal?
  boonAmount       Decimal?
  judasFactor      Decimal?
  userPsyche       UserPsyche?
  createdAt        DateTime        @default(now())
}

model PulseProfile {
  id                  String                @id @default(cuid())
  user                User                  @relation(fields: [userId], references: [id])
  userId              String                @unique
  baselineLuck        Float                 @default(0.4) // Base probability factor
  amplitude           Float                 @default(0.15) // How much the sine wave deviates
  frequency           Float                 @default(0.01) // How fast the sine wave oscillates
  phaseOffset         Float // Unique random value per user to desynchronize pulses
  consecutiveLosses   Int                   @default(0)
  lastEventTimestamp  DateTime              @default(now())
  lastResolvedPhase   PulsePhase?
  lastInteractionType PulseInteractionType?
  // Dynamic psychological state metrics
  frustration         Float                 @default(0.0) // 0.0 (calm) to 1.0 (enraged)
  flowState           Float                 @default(0.0) // 0.0 (distracted) to 1.0 (in the zone)
  riskAversion        Float                 @default(0.5) // 0.0 (degen) to 1.0 (risk-averse)
  // Buffs
  loadedDieBuffCount      Int?                  @default(0)
  nextTributeGuaranteedWin Boolean?             @default(false)
  hadesBargainActive      Boolean?             @default(false)
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  instrumentId String
  firstViewedAt DateTime  @default(now())
  nudgeSentAt   DateTime?
  converted    Boolean   @default(false)
  dtt          Int? // Discovery-to-Tribute time in minutes
}

model ChaosCard {
  key          String         @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  user        User               @relation(fields: [userId], references: [id])
  userId      String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  workspaceId String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  eventId     String
  createdAt   DateTime           @default(now())
}

model GlobalAgenticEvent {
  id                 String         @id @default(cuid())
  eventName          String
  status             EventStatus    @default(ACTIVE)
  currentPool        Decimal        @default(0)
  poolTarget         Decimal
  expiresAt          DateTime
  shardReward        String // Key of the Chaos Card to be awarded
  winningWorkspaceId String?
  contributions      Contribution[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

// ==============================================================================
// UTILITY & APPLICATION MODELS
// ==============================================================================

model Contact {
  id          String     @id @default(cuid())
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  user              User?             @relation(fields: [userId], references: [id])
  userId            String?
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
}

model Integration {
  id                    String            @id @default(cuid())
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId           String
  integrationManifestId String // The UUID from the manifest config
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model Conversation {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  messages    Json      @default("[]") // Store messages as a JSON array
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// ==============================================================================
// ENUMS
// ==============================================================================

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}
