
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  password          String
  firstName         String?
  lastName          String?
  role              UserRole            @default(OPERATOR)
  psyche            UserPsyche          @default(ZEN_ARCHITECT)
  lastLoginAt       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ownedWorkspaces   Workspace[]         @relation("OwnedWorkspaces")
  workspaces        Workspace[]         @relation("WorkspaceMembers")
  transactions      Transaction[]
  ownedChaosCards   ChaosCard[]         @relation("OwnedChaosCards")
  pulseProfile      PulseProfile?
  instrumentDiscoveries InstrumentDiscovery[]
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

model Workspace {
  id                  String           @id @default(cuid())
  name                String
  ownerId             String
  owner               User             @relation("OwnedWorkspaces", fields: [ownerId], references: [id])
  members             User[]           @relation("WorkspaceMembers")
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  planTier            PlanTier         @default(Apprentice)
  credits             Decimal          @default(0.0)
  agentActionsUsed    Int              @default(0)
  overageEnabled      Boolean          @default(true)
  unlockedAppIds      String[]         @default([])
  agents              Agent[]
  securityAlerts      SecurityAlert[]
  contacts            Contact[]
  threatFeeds         ThreatFeed[]
  workflows           Workflow[]
  workflowRuns        WorkflowRun[]
  transactions        Transaction[]
  instrumentDiscoveries InstrumentDiscovery[]

  @@index([ownerId])
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

model Transaction {
  id              String            @id @default(cuid())
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId          String?
  user            User?             @relation(fields: [userId], references: [id])
  agentId         String?
  type            TransactionType
  amount          Decimal // For DEBIT/CREDIT, this is the value. For TRIBUTE, it's the net change.
  description     String
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  
  // Klepsydra Engine Fields
  instrumentId    String? // ID of the Folly Instrument (e.g., Chaos Card key)
  luckWeight      Float? // The luck weight at the time of tribute
  outcome         String? // e.g., "win", "loss", "pity_boon"
  boonAmount      Decimal? // The amount of credits awarded as a boon
  userPsyche      UserPsyche?       @map("user_psyche") // The user's psyche at the time of tribute

  @@index([workspaceId])
  @@index([userId])
}


enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([workspaceId])
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

model Contact {
  id        String    @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  email     String?
  firstName String?
  lastName  String?
  phone     String?
  customProperties Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([workspaceId, email])
  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}

model Workflow {
  id          String    @id @default(cuid())
  name        String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  isActive    Boolean   @default(true)
  triggerType String    @default("api")
  definition  Json
  runs        WorkflowRun[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model WorkflowRun {
  id          String    @id @default(cuid())
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status      WorkflowRunStatus
  triggerPayload Json?
  output      Json?
  log         Json?
  startedAt   DateTime  @default(now())
  finishedAt  DateTime?

  @@index([workflowId])
  @@index([workspaceId])
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model Integration {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  integrationManifestId String
  name        String
  status      String      @default("active")
  configDetails Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([workspaceId])
}

model ChaosCard {
  id           String      @id @default(cuid())
  key          String      @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  owners       User[]      @relation("OwnedChaosCards")

  @@index([key])
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

model InstrumentDiscovery {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  workspaceId  String
  workspace    Workspace   @relation(fields: [workspaceId], references: [id])
  instrumentId String
  firstViewedAt DateTime   @default(now())
  converted    Boolean     @default(false)
  dtt          Int? // Discovery to Tribute time in minutes
  nudgeSentAt  DateTime?

  @@unique([userId, instrumentId])
  @@index([userId])
}


model PulseProfile {
  id                  String     @id @default(cuid())
  userId              String     @unique
  user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  amplitude           Float      @default(0.1)  // How much luck can swing
  frequency           Float      @default(0.05) // How fast the luck wave oscillates
  phaseOffset         Float      @default(0)    // Initial position on the wave
  baselineLuck        Float      @default(0.5)  // Neutral odds
  lastEventTimestamp  DateTime   @default(now())
  consecutiveLosses   Int        @default(0)
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}
