
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_WITH_ACCELERATE")
  directUrl = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole  @default(OPERATOR)
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  agentAlias              String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  lastLoginAt             DateTime?
  workspaces              Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[] @relation("WorkspaceOwner")
  ownedChaosCards         ChaosCard[]
  conversations           Conversation[]
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]

  foundingVow           String? // "What must end"
  foundingGoal          String? // "What I'm building"
  reclamationGraceUntil DateTime? // For the Rite of Reclamation
  corePainIndex         Int?      // Shadow metric from Sacrifice Detection
  foundingBenediction   String?   // Personalized welcome from the Rite of Invocation
}

model Workspace {
  id               String   @id @default(cuid())
  name             String
  ownerId          String
  planTier         PlanTier @default(Apprentice)
  credits          Decimal  @default(0.0)
  agentActionsUsed Int      @default(0)
  overageEnabled   Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  owner            User     @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members          User[]   @relation("WorkspaceMembers")
  
  agents           Agent[]
  contacts         Contact[]
  workflows        Workflow[]
  workflowRuns     WorkflowRun[]
  securityAlerts   SecurityAlert[]
  threatFeeds      ThreatFeed[]
  conversations    Conversation[]
  integrations     Integration[]
  transactions     Transaction[]
  activeEffects    ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Workflow {
  id           String        @id @default(cuid())
  workspaceId  String
  name         String
  definition   Json
  triggerType  String        @default("api")
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs         WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workspaceId    String
  status         WorkflowRunStatus
  startedAt      DateTime
  finishedAt     DateTime?
  triggerPayload Json?
  output         Json?
  log            Json?
  
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ThreatFeed {
    id          String    @id @default(cuid())
    workspaceId String
    url         String
    createdAt   DateTime  @default(now())
    
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Conversation {
  id           String    @id @default(cuid())
  userId       String    @unique
  workspaceId  String
  messages     Json      @default("[]")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String
  name                  String
  status                IntegrationStatus
  configDetails         Json
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Transaction {
  id            String             @id @default(cuid())
  workspaceId   String
  userId        String?
  agentId       String?
  instrumentId  String?
  type          TransactionType
  amount        Decimal
  description   String
  status        TransactionStatus  @default(PENDING)
  createdAt     DateTime           @default(now())
  
  workspace     Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // Fields for Tributes
  luckWeight      Float?
  outcome         String?
  boonAmount      Decimal?
  userPsyche      UserPsyche?
}

// Models for The Klepsydra Engine (Profit Pulse)
model PulseProfile {
  id                  String      @id @default(cuid())
  userId              String      @unique
  amplitude           Float       @default(0.2)
  frequency           Float       @default(0.00347) // ~1 cycle per 4.8 hours
  phaseOffset         Float
  baselineLuck        Float
  consecutiveLosses   Int         @default(0)
  lastEventTimestamp  DateTime    @default(now())
  lastResolvedPhase   PulsePhase  @default(EQUILIBRIUM)
  
  user                User        @relation(fields: [userId], references: [id])
}

model ChaosCard {
  id           String   @id @default(cuid())
  key          String   @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String?
  users        User[]
}

model ActiveSystemEffect {
    id          String @id @default(cuid())
    workspaceId String
    cardKey     String
    createdAt   DateTime @default(now())
    expiresAt   DateTime

    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model InstrumentDiscovery {
    id              String      @id @default(cuid())
    userId          String
    workspaceId     String
    instrumentId    String // ID of the MicroApp or ChaosCard
    firstViewedAt   DateTime    @default(now())
    converted       Boolean     @default(false)
    dtt             Int?        // Discovery-to-Tribute time in minutes
    nudgeSentAt     DateTime?

    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace       Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    
    @@unique([userId, instrumentId])
}


enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}
