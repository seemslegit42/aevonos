
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// AUTH & USERS
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaces      Workspace[] @relation("WorkspaceMembers")
  transactions    Transaction[]
}

// CORE WORKSPACE & BILLING
model Workspace {
  id              String        @id @default(cuid())
  name            String
  ownerId         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  planTier        PlanTier      @default(Artisan)
  agentActionsUsed Int          @default(0)
  credits         Decimal       @default(0.0)
  overageEnabled  Boolean       @default(true)

  owner           User          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members         User[]        @relation("WorkspaceMembers")
  
  agents          Agent[]
  contacts        Contact[]
  securityAlerts  SecurityAlert[]
  workflows       Workflow[]
  workflowRuns    WorkflowRun[]
  integrations    Integration[]
  threatFeeds     ThreatFeed[]
  transactions    Transaction[]
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

model Transaction {
  id          String          @id @default(cuid())
  workspaceId String
  type        TransactionType
  amount      Decimal
  description String
  createdAt   DateTime        @default(now())

  userId      String?         // User who initiated the transaction
  agentId     String?         // Agent that caused the transaction

  workspace   Workspace       @relation(fields: [workspaceId], references: [id])
  user        User?           @relation(fields: [userId], references: [id])
  agent       Agent?          @relation(fields: [agentId], references: [id])
  
  @@index([workspaceId])
}

enum TransactionType {
  CREDIT
  DEBIT
}

// AGENTS & WORKFLOWS
model Agent {
  id          String        @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus   @default(idle)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workspaceId String

  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([workspaceId])
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean       @default(true)
  triggerType String        @default("api")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workspaceId String

  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]

  @@index([workspaceId])
}

model WorkflowRun {
  id              String            @id @default(cuid())
  workflowId      String
  status          WorkflowRunStatus @default(pending)
  triggerPayload  Json?
  output          Json?
  log             Json?
  startedAt       DateTime          @default(now())
  finishedAt      DateTime?
  workspaceId     String

  workflow        Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([workspaceId])
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

// SECURITY (AEGIS)
model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String

  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@unique([workspaceId, url])
}


// CRM
model Contact {
  id        String    @id @default(cuid())
  email     String?
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  workspaceId String

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, email])
  @@index([workspaceId])
}

// INTEGRATIONS
model Integration {
  id                    String    @id @default(cuid())
  name                  String
  status                String
  configDetails         Json
  integrationManifestId String    // This links to the static manifest ID in code
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  workspaceId           String
  
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}
