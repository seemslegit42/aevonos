// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  firstName             String?
  lastName              String?
  password              String? // For future use, currently using passwordless
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  lastLoginAt           DateTime?
  role                  UserRole               @default(OPERATOR)
  psyche                UserPsyche             @default(ZEN_ARCHITECT)
  agentAlias            String?
  foundingVow           String?
  foundingGoal          String?
  corePainIndex         Int?
  foundingBenediction   String?
  firstWhisper          String?
  firstCommand          String?
  unlockedChaosCardKeys String[]
  reclamationGraceUntil DateTime?

  // --- Relations ---
  workspaces            Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspaces       Workspace[]            @relation("WorkspaceOwner")
  transactions          Transaction[]
  contributions         Contribution[]
  pulseProfile          PulseProfile?
  conversation          Conversation?
  securityAlerts        SecurityAlert[]
  instrumentDiscoveries InstrumentDiscovery[]
  renunciations         Renunciation[]
  potentialAccrualLogs  PotentialAccrualLog[]
}

model Workspace {
  id                   String                 @id @default(cuid())
  name                 String
  planTier             PlanTier               @default(Apprentice)
  credits              Decimal                @default(100.0)
  agentActionsUsed     Int                    @default(0)
  overageEnabled       Boolean                @default(true)
  potential            Decimal                @default(0.0) // Potential (Î¦)
  unlockedAppIds       String[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  // --- Relations ---
  ownerId              String
  owner                User                   @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members              User[]                 @relation("WorkspaceMembers")
  agents               Agent[]
  contacts             Contact[]
  transactions         Transaction[]
  securityAlerts       SecurityAlert[]
  threatFeeds          ThreatFeed[]
  securityEdicts       SecurityEdict[]
  activeSystemEffects  ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
  workflows            Workflow[]
  workflowRuns         WorkflowRun[]
  contributions        Contribution[]
  globalEvents         GlobalAgenticEvent[]   @relation("WinningWorkspace")
  potentialAccrualLogs PotentialAccrualLog[]
  conversations        Conversation[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // --- Relations ---
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Contact {
  id          String    @id @default(cuid())
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // --- Relations ---
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messages    Json     // Array of serialized LangChain messages

  // --- Relations ---
  userId      String    @unique // Each user has one conversation history
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                 String            @id @default(cuid())
  type               TransactionType
  amount             Decimal           // Net amount change
  description        String
  status             TransactionStatus @default(COMPLETED)
  createdAt          DateTime          @default(now())
  aegisSignature     String?

  // --- Relations ---
  workspaceId        String
  workspace          Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId             String?
  user               User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  agentId            String?

  // --- Folly Instrument Data ---
  instrumentId       String?
  luckWeight         Float?
  outcome            String?
  tributeAmount      Decimal?
  boonAmount         Decimal?
  judasFactor        Decimal?
  userPsyche         UserPsyche?

  // --- Transmutation Data ---
  isTransmutation    Boolean           @default(false)
  realWorldAmount    Decimal?
  realWorldCurrency  String?
  vendorName         String?
  transmutationTithe Decimal?
}

model PotentialAccrualLog {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())

  // --- Relations ---
  workspaceId        String
  workspace          Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // --- Data ---
  instrumentId       String
  luckWeight         Float
  potentialAwarded   Decimal
  narrativeContext   String?
  aegisSignature     String?
}

model PulseProfile {
  id                         String               @id @default(cuid())
  userId                     String               @unique
  user                       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Sine-Rhythm Engine (SRE) params
  baselineLuck               Float                @default(0.4)
  amplitude                  Float                @default(0.15)
  frequency                  Float                @default(0.01) // Cycles per minute
  phaseOffset                Float                @default(0)
  lastEventTimestamp         DateTime             @default(now())
  lastResolvedPhase          PulsePhase           @default(EQUILIBRIUM)

  // Pity Boon tracker
  consecutiveLosses          Int                  @default(0)

  // Psyche-Calibration Engine (PCE) state
  frustration                Float                @default(0.0) // 0 to 1
  flowState                  Float                @default(0.0) // 0 to 1
  riskAversion               Float                @default(0.5) // 0 to 1

  // One-time buffs from Chaos Cards
  loadedDieBuffCount         Int                  @default(0)
  nextTributeGuaranteedWin   Boolean              @default(false)
  hadesBargainActive         Boolean              @default(false)
  lastInteractionType        PulseInteractionType @default(COMMAND_SUCCESS)
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  integrationManifestId String // Corresponds to ID in integration-manifests.ts
  name                  String // User-defined name, e.g., "Primary Stripe Account"
  status                IntegrationStatus
  configDetails         Json // Encrypted API keys, etc.
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]

  // --- Relations ---
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model ThreatFeed {
  id          String   @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([workspaceId, url])
}

model SecurityEdict {
  id          String   @id @default(cuid())
  description String
  isActive    Boolean  @default(true)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Renunciation {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  renouncedItemType String   // "X_CREDITS", "MICRO_APP"
  renouncedItemName String
  valueInX          Decimal
  createdAt         DateTime @default(now())
  aegisSignature    String
}

model ChaosCard {
  key          String         @id // e.g., 'GEOLOGIC_TIME'
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String?

  @@index([key])
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  instrumentId  String
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false)
  nudgeSentAt   DateTime?
  dtt           Int? // Discovery-to-tribute time in minutes

  @@unique([userId, instrumentId])
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  definition  Json // JSON definition of the workflow (e.g., LangGraph)
  isActive    Boolean       @default(true)
  triggerType String        @default("api") // e.g., "api", "schedule", "event"
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json? // Step-by-step execution log
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])

  @@index([workflowId])
  @@index([workspaceId])
}

model GlobalAgenticEvent {
  id                 String         @id @default(cuid())
  eventName          String
  status             EventStatus    @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal        @default(0)
  shardReward        String // ID of a Chaos Card
  expiresAt          DateTime
  createdAt          DateTime       @default(now())
  winningWorkspaceId String?
  winningWorkspace   Workspace?     @relation("WinningWorkspace", fields: [winningWorkspaceId], references: [id], onDelete: SetNull)

  contributions      Contribution[]
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  createdAt   DateTime           @default(now())

  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
}

// --- ENUMS ---
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  FAILED
}
