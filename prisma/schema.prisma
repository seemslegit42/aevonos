
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // The 'engineType' is crucial for serverless environments like Vercel.
  engineType      = "library"
}

datasource db {
  provider = "postgresql"
  // These environment variables are required for Prisma Accelerate.
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

// ===============================================
// Core Tenancy & User Models
// ===============================================

model User {
  id                      String          @id @default(cuid())
  email                   String          @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole        @default(OPERATOR)
  psyche                  UserPsyche
  agentAlias              String          @default("BEEP")
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  lastLoginAt             DateTime?
  
  // Rite of Invocation Data
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Int?
  foundingBenediction     String?
  reclamationGraceUntil   DateTime?       // For the one-time "forgiveness" offer

  ownedChaosCards         ChaosCard[]     @relation("UserOwnedChaosCards")
  workspaces              Workspace[]     @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]     @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  conversation            Conversation?
  discoveries             InstrumentDiscovery[]

  @@index([email])
}

model Workspace {
  id                String            @id @default(cuid())
  name              String
  ownerId           String
  planTier          PlanTier          @default(Apprentice)
  credits           Decimal           @default(0.0)
  agentActionsUsed  Int               @default(0)
  unlockedAppIds    String[]
  overageEnabled    Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  owner             User              @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members           User[]            @relation("WorkspaceMembers")
  
  // Workspace-scoped data
  agents            Agent[]
  contacts          Contact[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  transactions      Transaction[]
  conversations     Conversation[]
  integrations      Integration[]
  activeEffects     ActiveSystemEffect[]
  discoveries       InstrumentDiscovery[]

  @@index([ownerId])
}


// ===============================================
// Agentic & Workflow Models
// ===============================================

model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus
  workspaceId   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Workflow {
  id              String          @id @default(cuid())
  name            String
  isActive        Boolean         @default(true)
  triggerType     String          @default("api")
  definition      Json
  workspaceId     String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  runs            WorkflowRun[]
  workspace       Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model WorkflowRun {
  id              String            @id @default(cuid())
  workflowId      String
  workspaceId     String
  status          WorkflowRunStatus
  triggerPayload  Json?
  output          Json?
  log             Json?
  startedAt       DateTime          @default(now())
  finishedAt      DateTime?

  workflow        Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([workspaceId])
}


// ===============================================
// Economic Engine Models (Obelisk Pay & Klepsydra)
// ===============================================

model Transaction {
  id            String            @id @default(cuid())
  workspaceId   String
  userId        String?
  agentId       String?
  type          TransactionType
  amount        Decimal
  description   String
  status        TransactionStatus @default(PENDING)
  createdAt     DateTime          @default(now())

  // Fields for Klepsydra Tributes
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  boonAmount      Decimal?
  userPsyche      UserPsyche?

  workspace     Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user          User?             @relation(fields: [userId], references: [id])
  
  @@index([workspaceId])
}

model PulseProfile {
  id                String      @id @default(cuid())
  userId            String      @unique
  baselineLuck      Float       @default(0.5)
  luckWeight        Float       @default(0.5) // Note: This field is now mostly calculated in real-time, but stored for historical reference.
  amplitude         Float
  frequency         Float
  phaseOffset       Float
  consecutiveLosses Int         @default(0)
  lastEventTimestamp DateTime   @default(now())
  lastResolvedPhase PulsePhase  @default(EQUILIBRIUM)
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChaosCard {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String
  cardClass   ChaosCardClass
  cost        Int
  systemEffect String
  
  owners      User[]   @relation("UserOwnedChaosCards")
}

model ActiveSystemEffect {
    id          String   @id @default(cuid())
    workspaceId String
    cardKey     String
    createdAt   DateTime @default(now())
    expiresAt   DateTime

    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    
    @@index([workspaceId])
}


// ===============================================
// Utility & Application Models
// ===============================================

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, email])
}

model SecurityAlert {
  id                  String             @id @default(cuid())
  type                String
  explanation         String
  riskLevel           SecurityRiskLevel
  timestamp           DateTime           @default(now())
  actionableOptions   String[]
  workspaceId         String
  
  workspace           Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  createdAt   DateTime  @default(now())
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  workspaceId String
  messages    Json      // Stores an array of LangChain message objects
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model InstrumentDiscovery {
    id              String    @id @default(cuid())
    userId          String
    workspaceId     String
    instrumentId    String // Key of the MicroApp or ChaosCard
    firstViewedAt   DateTime  @default(now())
    converted       Boolean   @default(false)
    dtt             Int?      // Discovery-to-Tribute time in minutes
    nudgeSentAt     DateTime?

    user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([userId, instrumentId])
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String // The UUID of the manifest.
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?

  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
}


// ===============================================
// Enums
// ===============================================

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum IntegrationStatus {
  active
  disabled
  error
}
