
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole                @default(OPERATOR)
  psyche                  UserPsyche              @default(ZEN_ARCHITECT)
  agentAlias              String?
  unlockedChaosCardKeys   String[]                @default([])
  hasAbyssalScar          Boolean                 @default(false)
  reclamationGraceUntil   DateTime?
  lastLoginAt             DateTime?               @default(now())
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  workspaces              Workspace[]             @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]             @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  contributions           Contribution[]
  potentialAccrualLogs    PotentialAccrualLog[]
  discoveries             InstrumentDiscovery[]
  securityAlerts          SecurityAlert[]
  Conversation            Conversation?
}

model Workspace {
  id                    String                @id @default(cuid())
  name                  String
  ownerId               String
  owner                 User                  @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members               User[]                @relation("WorkspaceMembers")
  planTier              PlanTier              @default(Apprentice)
  credits               Decimal               @default(0)
  potential             Decimal               @default(0)
  agentActionsUsed      Int                   @default(0)
  unlockedAppIds        String[]              @default([])
  overageEnabled        Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  contacts              Contact[]
  agents                Agent[]
  transactions          Transaction[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  securityAlerts        SecurityAlert[]
  securityEdicts        SecurityEdict[]
  threatFeeds           ThreatFeed[]
  activeSystemEffects   ActiveSystemEffect[]
  potentialAccrualLogs  PotentialAccrualLog[]
  discoveries           InstrumentDiscovery[]
  contributions         Contribution[]
  winningEvent          GlobalAgenticEvent?   @relation("WinningWorkspace")
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model Agent {
  id          String       @id @default(cuid())
  workspaceId String
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  type        String
  description String?
  status      AgentStatus  @default(idle)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Transaction {
  id              String            @id @default(cuid())
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId          String?
  user            User?             @relation(fields: [userId], references: [id])
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus @default(PENDING)
  aegisSignature  String?
  createdAt       DateTime          @default(now())
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?
  boonAmount      Decimal?
  judasFactor     Decimal?
  userPsyche      UserPsyche?

  @@index([workspaceId, createdAt])
}

model PulseProfile {
  id                    String                @id @default(cuid())
  userId                String                @unique
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  baselineLuck          Float                 @default(0.4)
  amplitude             Float                 @default(0.15)
  frequency             Float                 @default(0.01)
  phaseOffset           Float                 @default(0)
  consecutiveLosses     Int                   @default(0)
  frustration           Float                 @default(0.0)
  flowState             Float                 @default(0.0)
  riskAversion          Float                 @default(0.5)
  lastEventTimestamp    DateTime              @default(now())
  lastInteractionType   PulseInteractionType?
  lastResolvedPhase     PulsePhase?
  loadedDieBuffCount    Int?                  @default(0)
  nextTributeGuaranteedWin Boolean?           @default(false)
  hadesBargainActive    Boolean?              @default(false)
}

model Workflow {
  id          String        @id @default(cuid())
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  isActive    Boolean       @default(true)
  triggerType String        @default("api")
  definition  Json
  runs        WorkflowRun[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json
  output         Json?
  log            Json[]
  startedAt      DateTime
  finishedAt     DateTime?
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Json
  updatedAt DateTime @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?             @relation(fields: [userId], references: [id])
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  actionableOptions String[]
  timestamp         DateTime          @default(now())
}

model SecurityEdict {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  description String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url         String
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model ChaosCard {
  key          String       @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String?
}

model ActiveSystemEffect {
  id           String    @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey      String
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId  String
  firstViewedAt DateTime  @default(now())
  nudgeSentAt   DateTime?
  converted     Boolean   @default(false)
  dtt           Int?
}

model PotentialAccrualLog {
  id               String    @id @default(cuid())
  userId           String
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId      String
  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId     String
  luckWeight       Float
  potentialAwarded Decimal
  aegisSignature   String?
  narrativeContext String
  createdAt        DateTime  @default(now())

  @@index([userId])
}

model GlobalAgenticEvent {
  id                 String       @id @default(cuid())
  eventName          String
  status             EventStatus  @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal      @default(0)
  shardReward        String
  winningWorkspaceId String?      @unique
  winningWorkspace   Workspace?   @relation("WinningWorkspace", fields: [winningWorkspaceId], references: [id])
  contributions      Contribution[]
  createdAt          DateTime     @default(now())
  expiresAt          DateTime
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt   DateTime           @default(now())
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum PulseInteractionType {
  COMMAND_SUCCESS
  COMMAND_FAILURE
  WIN
  LOSS
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}
