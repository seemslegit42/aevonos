// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AUTH & CORE TENANCY

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole  @default(OPERATOR)
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  agentAlias              String?   @default("BEEP")
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime? // For the grace period after "deleting" account

  // User-specific economic data
  corePainIndex           Int?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String? // First suggested command for BEEP

  // Relations
  workspaces              Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[] @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
  contributions           Contribution[]
  securityAlerts          SecurityAlert[]

  // Inventory
  unlockedChaosCardKeys   String[]  @default([])

  // Conversation history
  conversation            Conversation?
}

model Workspace {
  id                      String    @id @default(cuid())
  name                    String
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // Ownership & Membership
  ownerId                 String
  owner                   User      @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members                 User[]    @relation("WorkspaceMembers")

  // Billing & Economy
  planTier                PlanTier  @default(Apprentice)
  credits                 Decimal   @default(0)
  agentActionsUsed        Int       @default(0)
  overageEnabled          Boolean   @default(false)
  unlockedAppIds          String[]  @default([])

  // Relations
  agents                  Agent[]
  contacts                Contact[]
  transactions            Transaction[]
  workflows               Workflow[]
  workflowRuns            WorkflowRun[]
  integrations            Integration[]
  threatFeeds             ThreatFeed[]
  securityAlerts          SecurityAlert[]
  conversations           Conversation[]
  activeSystemEffects     ActiveSystemEffect[]
  contributions           Contribution[]
}

// AGENTS & WORKFLOWS

model Agent {
  id              String      @id @default(cuid())
  workspaceId     String
  workspace       Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name            String
  type            String
  description     String?
  status          AgentStatus @default(idle)
  configuration   Json?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  transactions    Transaction[]
}

model Workflow {
  id            String        @id @default(cuid())
  workspaceId   String
  workspace     Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name          String
  definition    Json
  isActive      Boolean       @default(true)
  triggerType   String        @default("api")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  runs          WorkflowRun[]
}

model WorkflowRun {
  id              String            @id @default(cuid())
  workflowId      String
  workflow        Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status          WorkflowRunStatus @default(pending)
  triggerPayload  Json?
  output          Json?
  log             Json[]
  startedAt       DateTime          @default(now())
  finishedAt      DateTime?
}

// CRM

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  email       String?   
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, email])
}

// SECURITY

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?           
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  actionableOptions String[]
  timestamp         DateTime          @default(now())
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url         String
}

// CONVERSATION HISTORY

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json[]
  updatedAt   DateTime  @updatedAt
}

// ECONOMY & BILLING

model Transaction {
  id              String          @id @default(cuid())
  workspaceId     String
  workspace       Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId          String?
  user            User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  agentId         String?
  agent           Agent?          @relation(fields: [agentId], references: [id], onDelete: SetNull)
  
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus @default(COMPLETED)
  createdAt       DateTime        @default(now())

  // Fields for Folly Instruments (Tribute type)
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  boonAmount      Decimal?
  tributeAmount   Decimal?
  judasFactor     Decimal?
  userPsyche      UserPsyche?
}

model PulseProfile {
  id                    String        @id @default(cuid())
  userId                String        @unique
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Sine-Rhythm Engine (SRE) params
  baselineLuck          Float         @default(0.4)
  amplitude             Float         @default(0.15)
  frequency             Float         @default(0.01)
  phaseOffset           Float
  lastEventTimestamp    DateTime      @default(now())
  lastResolvedPhase     PulsePhase    @default(EQUILIBRIUM)
  lastInteractionType   PulseInteractionType?
  
  // Psychological State params
  frustration           Float         @default(0)
  flowState             Float         @default(0)
  riskAversion          Float         @default(0)

  // Loss Streak Elasticity (LSE) params
  consecutiveLosses     Int           @default(0)

  // Chaos Card / Boon Buffs
  loadedDieBuffCount    Int           @default(0)
  nextTributeGuaranteedWin Boolean?   @default(false)
  hadesBargainActive    Boolean?      @default(false)
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId   String
  instrumentId  String    // e.g., chaos card key or microapp id
  firstViewedAt DateTime  @default(now())
  nudgeSentAt   DateTime?
  converted     Boolean   @default(false)
  dtt           Int?      // Discovery-to-Tribute time in minutes
}

// GLOBAL EVENT SYSTEM

model GlobalAgenticEvent {
  id                  String      @id @default(cuid())
  eventName           String
  status              EventStatus @default(ACTIVE)
  poolTarget          Decimal
  currentPool         Decimal     @default(0)
  expiresAt           DateTime
  shardReward         String
  winningWorkspaceId  String?
  
  contributions       Contribution[]
}

model Contribution {
  id            String    @id @default(cuid())
  amount        Decimal
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId       String
  event         GlobalAgenticEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
}

model ActiveSystemEffect {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey     String
  expiresAt   DateTime
}


// MANIFESTS (These are not user-editable, but defined for reference)

model ChaosCard {
  id            String        @id
  name          String
  description   String
  cardClass     ChaosCardClass
  cost          Int
  systemEffect  String
}


// INTEGRATIONS

model Integration {
  id                    String        @id @default(cuid())
  workspaceId           String
  workspace             Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

// ENUMS

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum IntegrationStatus {
    active
    inactive
    error
}
