
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String   @id @default(cuid())
  email                   String   @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole @default(OPERATOR)
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  agentAlias              String?
  corePainIndex           Int?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  reclamationGraceUntil   DateTime?

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  lastLoginAt             DateTime?
  
  unlockedChaosCardKeys   String[]  @default([])

  workspaces              Workspace[]
  transactions            Transaction[]
  securityAlerts          SecurityAlert[]
  pulseProfile            PulseProfile?
  contributions           Contribution[]
  conversation            Conversation? @relation(fields: [conversationId], references: [id])
  conversationId          String?       @unique
  discoveries             InstrumentDiscovery[]
}

model Workspace {
  id                  String  @id @default(cuid())
  name                String
  planTier            PlanTier @default(Apprentice)
  credits             Decimal @default(100.0)
  agentActionsUsed    Int     @default(0)
  overageEnabled      Boolean @default(true)
  
  unlockedAppIds      String[] @default([])

  owner               User         @relation(fields: [ownerId], references: [id])
  ownerId             String
  members             User[]
  agents              Agent[]
  contacts            Contact[]
  workflows           Workflow[]
  workflowRuns        WorkflowRun[]
  transactions        Transaction[]
  securityAlerts      SecurityAlert[]
  integrations        Integration[]
  threatFeeds         ThreatFeed[]
  activeSystemEffects ActiveSystemEffect[]
  contributions       Contribution[]
  discoveries         InstrumentDiscovery[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String // e.g., 'winston-wolfe', 'kif-kroker'
  description String?
  status      AgentStatus @default(idle)
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id          String  @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([email, workspaceId])
}

model Workflow {
  id            String    @id @default(cuid())
  name          String
  isActive      Boolean   @default(true)
  triggerType   String    @default("api") // e.g., 'api', 'schedule', 'event'
  definition    Json // The LangGraph JSON definition

  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   String
  runs          WorkflowRun[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model WorkflowRun {
  id              String            @id @default(cuid())
  status          WorkflowRunStatus @default(pending)
  triggerPayload  Json?
  output          Json?
  log             Json?
  startedAt       DateTime          @default(now())
  finishedAt      DateTime?
  
  workflow        Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId      String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId     String

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Transaction {
  id              String           @id @default(cuid())
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus @default(COMPLETED)

  workspace       Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  user            User?     @relation(fields: [userId], references: [id])
  userId          String?
  
  // For Tributes to Folly Instruments
  instrumentId    String?
  luckWeight      Float?
  outcome         String? // e.g., 'win', 'loss', 'pity_boon'
  boonAmount      Decimal?
  tributeAmount   Decimal?
  judasFactor     Decimal? // Factor of reduction in a 'hollow win' scenario
  userPsyche      UserPsyche? // User's psyche at the time of the transaction

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SecurityAlert {
  id                  String            @id @default(cuid())
  type                String
  explanation         String
  riskLevel           SecurityRiskLevel @default(low)
  timestamp           DateTime          @default(now())
  actionableOptions   String[]
  
  workspace           Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId         String
  user                User?     @relation(fields: [userId], references: [id])
  userId              String?

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Conversation {
  id        String   @id @default(cuid())
  user      User?
  messages  Json?    // Array of BaseMessage JSON objects
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Integration {
  id                  String             @id @default(cuid())
  name                String
  status              IntegrationStatus  @default(active)
  integrationManifestId String // UUID from the static manifest config
  configDetails       Json // Encrypted API keys, tokens, settings, etc.
  
  workspace           Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId         String

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model ThreatFeed {
  id          String   @id @default(cuid())
  url         String
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  createdAt   DateTime @default(now())
}

model PulseProfile {
  id                  String    @id @default(cuid())
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String    @unique
  
  // Sine-Rhythm Engine (SRE) Parameters
  baselineLuck        Float     @default(0.4) // The center of the luck wave
  amplitude           Float     @default(0.15) // How high/low the wave goes
  frequency           Float     @default(0.01) // How fast the wave oscillates
  phaseOffset         Float     // Unique starting point on the wave for each user
  
  // Loss-Streak Elasticity (LSE) Counter
  consecutiveLosses   Int       @default(0)
  
  // Event Tracking
  lastEventTimestamp  DateTime  @default(now())
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)
  lastInteractionType PulseInteractionType @default(COMMAND_SUCCESS)

  // Psyche-Calibration Engine (PCE) State
  frustration         Float     @default(0.0) // 0 to 1
  flowState           Float     @default(0.0) // 0 to 1
  riskAversion        Float     @default(0.5) // 0 to 1

  // Mercenary Buffs
  loadedDieBuffCount      Int? @default(0)
  nextTributeGuaranteedWin Boolean? @default(false)
  hadesBargainActive      Boolean? @default(false)
}

model ChaosCard {
  key         String @id
  name        String
  description String
  cardClass   ChaosCardClass @default(AESTHETIC)
  cost        Int
  systemEffect String?
}

model ActiveSystemEffect {
  id          String   @id @default(cuid())
  cardKey     String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
}

model GlobalAgenticEvent {
  id                  String @id @default(cuid())
  eventName           String
  status              EventStatus @default(ACTIVE)
  poolTarget          Decimal
  currentPool         Decimal @default(0)
  expiresAt           DateTime
  shardReward         String // Key of the reward (e.g., Chaos Card key)
  
  winningWorkspaceId  String?
  contributions       Contribution[]
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Contribution {
  id              String @id @default(cuid())
  amount          Decimal
  workspace       Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  user            User @relation(fields: [userId], references: [id])
  userId          String
  event           GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  eventId         String

  createdAt       DateTime @default(now())
}

model InstrumentDiscovery {
  id              String @id @default(cuid())
  instrumentId    String
  user            User @relation(fields: [userId], references: [id])
  userId          String
  workspace       Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  
  firstViewedAt   DateTime @default(now())
  nudgeSentAt     DateTime?
  converted       Boolean @default(false)
  dtt             Int? // Discovery-to-tribute time in minutes

  @@unique([userId, instrumentId])
}


enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
    BOON
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

```