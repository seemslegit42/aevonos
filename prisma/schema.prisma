
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "rhel-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// ENUMS
// ==============================================================================

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}


// ==============================================================================
// CORE TENANCY MODELS
// ==============================================================================

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole  @default(OPERATOR)
  agentAlias              String?
  psyche                  UserPsyche
  foundingVow             String?
  foundingGoal            String?
  firstWhisper            String?
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  unlockedChaosCardKeys   String[]  @default([])
  corePainIndex           Int?
  foundingBenediction     String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  workspaces            Workspace[]             @relation("WorkspaceMembers")
  ownedWorkspaces       Workspace[]             @relation("WorkspaceOwner")
  contacts              Contact[]
  securityAlerts        SecurityAlert[]
  transactions          Transaction[]
  pulseProfile          PulseProfile?
  instrumentDiscoveries InstrumentDiscovery[]
  contributions         Contribution[]
}

model Workspace {
  id                String    @id @default(cuid())
  name              String
  planTier          PlanTier  @default(Apprentice)
  credits           Decimal   @default(0.0)
  agentActionsUsed  Int       @default(0)
  overageEnabled    Boolean   @default(false)
  unlockedAppIds    String[]  @default([])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  owner   User @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId String

  members               User[]                  @relation("WorkspaceMembers")
  agents                Agent[]
  contacts              Contact[]
  securityAlerts        SecurityAlert[]
  workflows             Workflow[]
  conversations         Conversation[]
  threatFeeds           ThreatFeed[]
  transactions          Transaction[]
  activeSystemEffects   ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
  contributions         Contribution[]
  winningGlobalEvents   GlobalAgenticEvent[]
}

// ==============================================================================
// AGENTIC & WORKFLOW MODELS
// ==============================================================================

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model Workflow {
  id           String   @id @default(cuid())
  name         String
  definition   Json
  isActive     Boolean  @default(true)
  triggerType  String   @default("api") // e.g., 'api', 'schedule', 'event'
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  runs WorkflowRun[]
}

model WorkflowRun {
  id        String            @id @default(cuid())
  status    WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output    Json?
  log       Json[]
  startedAt DateTime          @default(now())
  finishedAt DateTime?

  workflow    Workflow  @relation(fields: [workflowId], references: [id])
  workflowId  String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model Conversation {
  id        String   @id @default(cuid())
  messages  Json[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

// ==============================================================================
// ECONOMIC ENGINE MODELS
// ==============================================================================

model Transaction {
  id           String            @id @default(cuid())
  type         TransactionType
  amount       Decimal
  description  String
  status       TransactionStatus @default(PENDING)
  createdAt    DateTime          @default(now())

  // For Tributes
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  boonAmount      Decimal?
  tributeAmount   Decimal?
  userPsyche      UserPsyche?
  judasFactor     Decimal?

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
}

model PulseProfile {
  id                  String               @id @default(cuid())
  baselineLuck        Float                @default(0.4)
  amplitude           Float                @default(0.15)
  frequency           Float                @default(0.01)
  phaseOffset         Float
  consecutiveLosses   Int                  @default(0)
  lastEventTimestamp  DateTime             @default(now())
  frustration         Float                @default(0.0)
  flowState           Float                @default(0.0)
  riskAversion        Float                @default(0.5)
  lastResolvedPhase   PulsePhase?
  lastInteractionType PulseInteractionType?
  
  // Buffs / Debuffs
  loadedDieBuffCount Int? @default(0)
  nextTributeGuaranteedWin Boolean? @default(false)
  hadesBargainActive Boolean? @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model ChaosCard {
  id             String         @id @default(cuid())
  key            String         @unique
  name           String
  description    String
  cardClass      ChaosCardClass
  cost           Int
  systemEffect   String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model ActiveSystemEffect {
  id          String   @id @default(cuid())
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  instrumentId String
  firstViewedAt DateTime @default(now())
  converted    Boolean   @default(false)
  dtt          Int? // Discovery-to-Tribute time in minutes
  nudgeSentAt  DateTime?

  user      User      @relation(fields: [userId], references: [id])
  userId    String
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model GlobalAgenticEvent {
  id          String      @id @default(cuid())
  eventName   String
  poolTarget  Decimal
  currentPool Decimal     @default(0.0)
  status      EventStatus @default(ACTIVE)
  expiresAt   DateTime
  shardReward String?

  winningWorkspaceId String?
  winningWorkspace Workspace? @relation(fields: [winningWorkspaceId], references: [id])
  
  contributions Contribution[]
}

model Contribution {
  id          String   @id @default(cuid())
  amount      Decimal
  createdAt   DateTime @default(now())
  
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  workspace Workspace          @relation(fields: [workspaceId], references: [id])
  workspaceId String
  event     GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  eventId   String
}

// ==============================================================================
// UTILITY & APPLICATION MODELS
// ==============================================================================

model Contact {
  id          String   @id @default(cuid())
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
}

model ThreatFeed {
  id          String @id @default(cuid())
  url         String
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model Integration {
  id                    String            @id @default(cuid())
  integrationManifestId String // UUID from config
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}
