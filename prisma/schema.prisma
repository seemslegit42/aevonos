// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Enum definitions
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
    BOON
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

enum IntegrationStatus {
  active
  inactive
  error
}

// Models
model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  firstName             String?
  lastName              String?
  role                  UserRole              @default(OPERATOR)
  psyche                UserPsyche            @default(ZEN_ARCHITECT)
  agentAlias            String?               @default("BEEP")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  lastLoginAt           DateTime?
  unlockedChaosCardKeys String[]
  corePainIndex         Int?
  foundingVow           String?
  foundingGoal          String?
  foundingBenediction   String?
  firstWhisper          String?
  firstCommand          String?
  reclamationGraceUntil DateTime?

  // User-specific flags & boons
  hasAbyssalScar        Boolean @default(false)

  // Relations
  workspaces           Workspace[]           @relation("WorkspaceMembers")
  ownedWorkspaces      Workspace[]           @relation("WorkspaceOwner")
  conversation         Conversation?
  pulseProfile         PulseProfile?
  transactions         Transaction[]
  contributions        Contribution[]
  potentialAccrualLogs PotentialAccrualLog[]
  renunciations        Renunciation[]
  securityAlerts       SecurityAlert[]
  instrumentDiscoveries InstrumentDiscovery[]
}

model Workspace {
  id                 String   @id @default(cuid())
  name               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  ownerId            String
  owner              User     @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members            User[]   @relation("WorkspaceMembers")

  // Economic Engine Fields
  planTier           PlanTier         @default(Apprentice)
  credits            Decimal          @default(100.0)
  agentActionsUsed   Int              @default(0)
  overageEnabled     Boolean          @default(true)
  potential          Decimal          @default(0.0) // Potential (Î¦)
  
  // Customization & Unlocks
  unlockedAppIds     String[]

  // Relations
  agents               Agent[]
  contacts             Contact[]
  transactions         Transaction[]
  conversations        Conversation[]
  securityAlerts       SecurityAlert[]
  threatFeeds          ThreatFeed[]
  securityEdicts       SecurityEdict[]
  integrations         Integration[]
  workflows            Workflow[]
  workflowRuns         WorkflowRun[]
  activeSystemEffects  ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
  potentialAccrualLogs PotentialAccrualLog[]
  contributions        Contribution[]
}


model Conversation {
  id          String   @id @default(cuid())
  workspaceId String
  userId      String   @unique // Each user has one conversation history
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Json     // Array of serialized LangChain messages
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Transaction {
  id                 String            @id @default(cuid())
  workspaceId        String
  workspace          Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type               TransactionType
  amount             Decimal // Net amount change
  description        String
  status             TransactionStatus @default(COMPLETED)
  createdAt          DateTime          @default(now())
  
  // Optional relations
  userId             String?
  user               User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  agentId            String?
  agent              Agent?            @relation(fields: [agentId], references: [id], onDelete: SetNull)

  // Klepsydra Engine metadata for Tributes
  instrumentId       String?
  luckWeight         Float?
  outcome            String?
  tributeAmount      Decimal?
  boonAmount         Decimal?
  judasFactor        Decimal?
  userPsyche         UserPsyche?
  
  // Obelisk Pay Transmutation metadata
  isTransmutation    Boolean           @default(false)
  realWorldAmount    Decimal?
  realWorldCurrency  String?
  vendorName         String?
  transmutationTithe Decimal?
  
  // Aegis Signature
  aegisSignature     String?

  @@index([workspaceId, createdAt])
}

model PotentialAccrualLog {
    id String @id @default(cuid())
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    instrumentId String
    luckWeight Float
    potentialAwarded Decimal
    narrativeContext String?
    createdAt DateTime @default(now())
    aegisSignature String?

    @@index([workspaceId, userId, createdAt])
}

model Renunciation {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  renouncedItemType String   // "X_CREDITS", "MICRO_APP"
  renouncedItemName String
  valueInX          BigInt
  createdAt         DateTime @default(now())
  aegisSignature    String
}

model ActiveSystemEffect {
    id          String   @id @default(cuid())
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    cardKey     String   // e.g., 'ACROPOLIS_MARBLE'
    createdAt   DateTime @default(now())
    expiresAt   DateTime

    @@index([workspaceId, expiresAt])
}

model PulseProfile {
  id                       String               @id @default(cuid())
  userId                   String               @unique
  user                     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Sine-Rhythm Engine Parameters
  amplitude                Float                @default(0.15)
  frequency                Float                @default(0.01)
  phaseOffset              Float
  baselineLuck             Float                @default(0.4)
  lastEventTimestamp       DateTime             @default(now())

  // Pity Boon & Psychological State
  consecutiveLosses        Int                  @default(0)
  lastResolvedPhase        PulsePhase?
  lastInteractionType      PulseInteractionType?
  frustration              Float                @default(0.0)
  flowState                Float                @default(0.0)
  riskAversion             Float                @default(0.0)

  // Mercenary Card Buffs
  nextTributeGuaranteedWin Boolean?
  loadedDieBuffCount       Int?
  hadesBargainActive       Boolean?
}


model Agent {
  id          String        @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?             @relation(fields: [userId], references: [id])
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
}

model ThreatFeed {
  id          String   @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([workspaceId, url])
}

model SecurityEdict {
  id            String   @id @default(cuid())
  description   String
  isActive      Boolean  @default(true)
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
}

model ChaosCard {
  key          String         @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
}

model InstrumentDiscovery {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId   String
  firstViewedAt  DateTime  @default(now())
  converted      Boolean   @default(false)
  dtt            Int? // Discovery-to-Tribute time in minutes
  nudgeSentAt    DateTime?

  @@unique([userId, instrumentId])
}


model Integration {
  id                     String @id @default(cuid())
  workspaceId            String
  workspace              Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId  String // Corresponds to the ID in the static manifest
  name                   String
  status                 IntegrationStatus
  configDetails          Json // Encrypted API keys, tokens, etc.
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Workflow {
  id            String   @id @default(cuid())
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name          String
  definition    Json     // LangGraph JSONB definition
  isActive      Boolean  @default(true)
  triggerType   String   @default("api") // e.g., 'api', 'schedule', 'event'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  runs          WorkflowRun[]
}

model WorkflowRun {
  id              String   @id @default(cuid())
  workflowId      String
  workflow        Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status          String   // e.g., 'pending', 'running', 'completed', 'failed', 'paused'
  triggerPayload  Json?
  output          Json?
  log             Json?    // Detailed execution log
  startedAt       DateTime @default(now())
  finishedAt      DateTime?

  @@index([workflowId, startedAt])
}

model GlobalAgenticEvent {
  id                 String    @id @default(cuid())
  eventName          String // e.g., "The Black Wager: Q3"
  status             EventStatus    @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal @default(0)
  shardReward        String // Chaos Card Key
  expiresAt          DateTime
  winningWorkspaceId String?
  contributions      Contribution[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([status, expiresAt])
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  createdAt   DateTime           @default(now())

  @@index([eventId, createdAt])
}
