
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and authentication models
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String?
  lastName    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?

  // Relations
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaces      Workspace[] @relation("WorkspaceMembers")
  transactions    Transaction[]
}

model Workspace {
  id              String        @id @default(cuid())
  name            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  planTier        PlanTier      @default(Artisan)
  credits         Decimal       @default(0.0) @db.Decimal(10, 2)
  agentActionsUsed Int          @default(0)
  overageEnabled  Boolean       @default(true)
  unlockedAppIds  String[]      @default([])

  // Relations
  ownerId         String
  owner           User          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members         User[]        @relation("WorkspaceMembers")
  agents          Agent[]
  securityAlerts  SecurityAlert[]
  contacts        Contact[]
  workflows       Workflow[]
  workflowRuns    WorkflowRun[]
  threatFeeds     ThreatFeed[]
  integrations    Integration[]
  transactions    Transaction[]

  @@index([ownerId])
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

// Obelisk Pay Ledger Engine
model Transaction {
  id          String            @id @default(cuid())
  workspaceId String
  workspace   Workspace         @relation(fields: [workspaceId], references: [id])
  type        TransactionType
  amount      Decimal           @db.Decimal(10, 2)
  description String
  status      TransactionStatus @default(COMPLETED)
  createdAt   DateTime          @default(now())
  
  // Optional relations to trace the source of the transaction
  userId      String?
  user        User?             @relation(fields: [userId], references: [id])
  agentId     String?
  agent       Agent?            @relation(fields: [agentId], references: [id])
  
  @@index([workspaceId])
  @@index([userId])
  @@index([agentId])
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

// Agent models
model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String // e.g., 'winston-wolfe', 'kif-kroker'. Used to map to agent logic.
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  transactions Transaction[]

  @@index([workspaceId])
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

// Security models (Aegis)
model SecurityAlert {
  id              String            @id @default(cuid())
  type            String
  explanation     String
  riskLevel       SecurityRiskLevel
  timestamp       DateTime          @default(now())
  actionableOptions String[]
  
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
  none
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, url])
}

// CRM models
model Contact {
  id              String    @id @default(cuid())
  firstName       String?
  lastName        String?
  email           String?
  phone           String?
  customProperties Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id])
  
  @@index([workspaceId])
  @@unique([workspaceId, email])
}


// Workflow models (Loom Studio)
model Workflow {
  id              String            @id @default(cuid())
  name            String
  definition      Json // Stores the graph structure (nodes, edges)
  triggerType     String            @default("api") // e.g., 'api', 'schedule', 'event'
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id])
  runs            WorkflowRun[]

  @@index([workspaceId])
}

model WorkflowRun {
  id              String            @id @default(cuid())
  workflowId      String
  workflow        Workflow          @relation(fields: [workflowId], references: [id])
  status          WorkflowRunStatus @default(pending)
  triggerPayload  Json?
  output          Json?
  log             Json?
  startedAt       DateTime          @default(now())
  finishedAt      DateTime?
  
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id])

  @@index([workflowId])
  @@index([workspaceId])
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

// Integration models
model Integration {
    id                      String @id @default(cuid())
    workspaceId             String
    workspace               Workspace @relation(fields: [workspaceId], references: [id])
    integrationManifestId   String // Foreign key to a static manifest definition
    name                    String // User-defined name for this instance, e.g., "Marketing Slack"
    status                  String // "active", "inactive", "error"
    configDetails           Json   // Encrypted API keys, tokens, etc.
    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt
    
    @@index([workspaceId])
}
