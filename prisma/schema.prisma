// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole                @default(OPERATOR)
  psyche                  UserPsyche              @default(ZEN_ARCHITECT)
  agentAlias              String?
  lastLoginAt             DateTime?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  unlockedAppIds          String[]                @default([])
  unlockedChaosCardKeys   String[]                @default([])
  reclamationGraceUntil   DateTime?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  firstCommand            String?
  corePainIndex           Float?
  hasAbyssalScar          Boolean                 @default(false)
  workspaces              Workspace[]             @relation("WorkspaceMembers")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
  potentialAccrualLogs    PotentialAccrualLog[]
  contributions           Contribution[]
}

model Workspace {
  id               String                @id @default(cuid())
  name             String
  ownerId          String
  planTier         PlanTier              @default(Apprentice)
  credits          Decimal               @default(0.00) @db.Decimal(10, 2)
  potential        Decimal               @default(0.00) @db.Decimal(12, 4)
  agentActionsUsed Int                   @default(0)
  overageEnabled   Boolean               @default(false)
  unlockedAppIds   String[]              @default([])
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  owner            User                  @relation(fields: [ownerId], references: [id])
  members          User[]                @relation("WorkspaceMembers")
  agents           Agent[]
  contacts         Contact[]
  securityAlerts   SecurityAlert[]
  conversations    Conversation[]
  workflows        Workflow[]
  workflowRuns     WorkflowRun[]
  transactions     Transaction[]
  integrations     Integration[]
  securityEdicts   SecurityEdict[]
  threatFeeds      ThreatFeed[]
  activeEffects    ActiveSystemEffect[]
  discoveries      InstrumentDiscovery[]
  potentialLogs    PotentialAccrualLog[]
  contributions    Contribution[]

  @@index([ownerId])
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, email])
  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  userId            String?
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  actionableOptions String[]          @default([])
  timestamp         DateTime          @default(now())
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  messages    Json     @default("[]")
  updatedAt   DateTime @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Workflow {
  id           String        @id @default(cuid())
  workspaceId  String
  name         String
  definition   Json
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs         WorkflowRun[]

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workspaceId    String
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([workspaceId, status])
}

model Transaction {
  id              String            @id @default(cuid())
  workspaceId     String
  type            TransactionType
  amount          Decimal           @db.Decimal(10, 2)
  description     String
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  userId          String?
  agentId         String?
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?          @db.Decimal(10, 2)
  boonAmount      Decimal?          @db.Decimal(10, 2)
  judasFactor     Decimal?          @db.Decimal(10, 8)
  userPsyche      UserPsyche?
  aegisSignature  String?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String // This will be the UUID from your manifests file
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json // Encrypted API keys, etc.
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model SecurityEdict {
  id          String    @id @default(cuid())
  workspaceId String
  description String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  url         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model PulseProfile {
  id                    String                @id @default(cuid())
  userId                String                @unique
  baselineLuck          Float                 @default(0.5)
  amplitude             Float                 @default(0.15)
  frequency             Float                 @default(0.01)
  phaseOffset           Float
  consecutiveLosses     Int                   @default(0)
  lastEventTimestamp    DateTime              @default(now())
  lastResolvedPhase     PulsePhase?
  lastInteractionType   PulseInteractionType?
  frustration           Float                 @default(0) // 0-1
  flowState             Float                 @default(0) // 0-1
  riskAversion          Float                 @default(0.5) // 0-1
  // Buffs / Debuffs
  loadedDieBuffCount    Int?                  @default(0)
  nextTributeGuaranteedWin Boolean?           @default(false)
  hadesBargainActive    Boolean?              @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChaosCard {
  id           String         @id @default(cuid())
  key          String         @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  cardKey     String // The key of the Chaos Card that triggered this effect
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, expiresAt])
}

model InstrumentDiscovery {
  id             String    @id @default(cuid())
  userId         String
  workspaceId    String
  instrumentId   String // The ID of the MicroApp or ChaosCard
  firstViewedAt  DateTime  @default(now())
  converted      Boolean   @default(false)
  dtt            Int? // Discovery-to-Tribute Time in minutes
  nudgeSentAt    DateTime?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, instrumentId])
}

model PotentialAccrualLog {
  id               String    @id @default(cuid())
  userId           String
  workspaceId      String
  instrumentId     String
  luckWeight       Float
  potentialAwarded Decimal   @db.Decimal(12, 4)
  narrativeContext String
  createdAt        DateTime  @default(now())
  aegisSignature   String?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workspaceId])
}

model GlobalAgenticEvent {
  id                 String       @id @default(cuid())
  eventName          String
  status             EventStatus  @default(ACTIVE)
  poolTarget         Decimal      @db.Decimal(12, 2)
  currentPool        Decimal      @default(0) @db.Decimal(12, 2)
  shardReward        String // Key of the Chaos Card or artifact
  expiresAt          DateTime
  winningWorkspaceId String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  contributions      Contribution[]
}

model Contribution {
  id          String   @id @default(cuid())
  eventId     String
  workspaceId String
  userId      String
  amount      Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())

  event     GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  workspace Workspace          @relation(fields: [workspaceId], references: [id])
  user      User               @relation(fields: [userId], references: [id])

  @@index([eventId])
}


enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}
