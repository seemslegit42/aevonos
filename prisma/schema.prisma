// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(cuid())
  email           String      @unique
  password        String
  firstName       String?
  lastName        String?
  role            UserRole    @default(OPERATOR)
  lastLoginAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaces      Workspace[] @relation("WorkspaceMembers")
  transactions    Transaction[]
  ownedChaosCards ChaosCard[]
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

model Workspace {
  id                String        @id @default(cuid())
  name              String
  owner             User          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId           String
  members           User[]        @relation("WorkspaceMembers")
  agents            Agent[]
  securityAlerts    SecurityAlert[]
  contacts          Contact[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  threatFeeds       ThreatFeed[]
  transactions      Transaction[]
  integrations      Integration[]
  unlockedAppIds    String[]      @default([])
  credits           Decimal       @db.Decimal(10, 2) @default(0.00)
  agentActionsUsed  Int           @default(0)
  overageEnabled    Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  planTier          PlanTier      @default(Apprentice)
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  lastActivityAt DateTime?
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  transactions Transaction[]
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

model Contact {
  id               String     @id @default(cuid())
  email            String?    @unique
  firstName        String?
  lastName         String?
  phone            String?
  customProperties Json?
  workspace        Workspace  @relation(fields: [workspaceId], references: [id])
  workspaceId      String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  definition   Json
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  runs         WorkflowRun[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workflowId     String
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime?         @default(now())
  finishedAt     DateTime?
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId    String
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
}

model Transaction {
  id          String            @id @default(cuid())
  workspace   Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId String
  user        User?             @relation(fields: [userId], references: [id])
  userId      String?
  agent       Agent?            @relation(fields: [agentId], references: [id])
  agentId     String?
  type        TransactionType
  amount      Decimal           @db.Decimal(10, 2)
  description String
  status      TransactionStatus
  createdAt   DateTime          @default(now())
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TransactionType {
  CREDIT
  DEBIT
}

model Integration {
  id                    String    @id @default(cuid())
  workspace             Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId           String
  integrationManifestId String // Corresponds to the ID in the static manifest file
  name                  String
  status                String    @default("active")
  configDetails         Json
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

model ChaosCard {
  id           String         @id @default(cuid())
  key          String         @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  owners       User[]
}
