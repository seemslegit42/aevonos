
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String     @id @default(cuid())
  email                   String     @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole   @default(OPERATOR)
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  agentAlias              String     @default("BEEP")
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime? // For the Rite of Reclamation
  unlockedChaosCardKeys   String[]
  hasAbyssalScar          Boolean    @default(false)
  corePainIndex           Int?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  firstCommand            String?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  workspaces              Workspace[]
  pulseProfile            PulseProfile?
  transactions            Transaction[]
  contributions           Contribution[]
  instrumentDiscoveries   InstrumentDiscovery[]
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

model Workspace {
  id               String      @id @default(cuid())
  name             String
  ownerId          String
  planTier         PlanTier    @default(Apprentice)
  credits          Decimal     @default(0.0)
  potential        Decimal     @default(0.0)
  agentActionsUsed Int         @default(0)
  overageEnabled   Boolean     @default(false)
  unlockedAppIds   String[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  owner            User        @relation(fields: [ownerId], references: [id])
  members          User[]
  agents           Agent[]
  contacts         Contact[]
  securityAlerts   SecurityAlert[]
  securityEdicts   SecurityEdict[]
  threatFeeds      ThreatFeed[]
  workflows        Workflow[]
  workflowRuns     WorkflowRun[]
  transactions     Transaction[]
  activeEffects    ActiveSystemEffect[]
  contributions    Contribution[]
  instrumentDiscoveries InstrumentDiscovery[]
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Contact {
  id          String    @id @default(cuid())
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?           
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

model SecurityEdict {
  id          String    @id @default(cuid())
  description String
  isActive    Boolean   @default(true)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}


model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  messages    Json     // Stores an array of LangChain BaseMessage JSON objects
  updatedAt   DateTime @updatedAt
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  definition   Json
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs         WorkflowRun[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model Transaction {
  id             String          @id @default(cuid())
  workspaceId    String
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  type           TransactionType
  amount         Decimal
  description    String
  status         TransactionStatus
  createdAt      DateTime        @default(now())
  // Fields for Folly Instrument Tributes
  instrumentId   String?
  luckWeight     Float?
  outcome        String?
  boonAmount     Decimal?
  tributeAmount  Decimal?
  judasFactor    Decimal?
  userPsyche     UserPsyche?
  aegisSignature String?
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model PulseProfile {
  id                    String        @id @default(cuid())
  userId                String        @unique
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  baselineLuck          Float         @default(0.5)
  amplitude             Float         @default(0.1)
  frequency             Float         @default(0.05)
  phaseOffset           Float
  consecutiveLosses     Int           @default(0)
  lastEventTimestamp    DateTime      @default(now())
  lastResolvedPhase     PulsePhase    @default(EQUILIBRIUM)
  lastInteractionType   PulseInteractionType?
  
  // Dynamic Psychological State
  frustration           Float         @default(0.1)
  flowState             Float         @default(0.2)
  riskAversion          Float         @default(0.3)
  loadedDieBuffCount    Int           @default(0)
  nextTributeGuaranteedWin Boolean    @default(false)
  hadesBargainActive    Boolean       @default(false)
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

model PotentialAccrualLog {
  id                  String        @id @default(cuid())
  workspaceId         String
  userId              String
  instrumentId        String
  createdAt           DateTime      @default(now())
  luckWeight          Float
  potentialAwarded    Decimal
  aegisSignature      String
  narrativeContext    String
}

model ChaosCard {
  key          String       @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String?
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

model ActiveSystemEffect {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey     String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
}

model InstrumentDiscovery {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId   String
  firstViewedAt  DateTime  @default(now())
  converted      Boolean   @default(false)
  dtt            Int? // Discovery-to-Tribute time in minutes
  nudgeSentAt    DateTime?

  @@unique([userId, instrumentId])
}

model GlobalAgenticEvent {
  id                  String        @id @default(cuid())
  eventName           String
  status              EventStatus   @default(ACTIVE)
  poolTarget          Decimal
  currentPool         Decimal       @default(0.0)
  expiresAt           DateTime
  shardReward         String? // e.g., A Chaos Card ID
  winningWorkspaceId  String?
  contributions       Contribution[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  FAILED
}

model Contribution {
  id          String              @id @default(cuid())
  amount      Decimal
  workspaceId String
  workspace   Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId     String
  event       GlobalAgenticEvent  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt   DateTime            @default(now())
}

model Integration {
  id                      String            @id @default(cuid())
  workspaceId             String
  workspace               Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId   String // This is a UUID pointing to the manifest in the config
  name                    String
  status                  IntegrationStatus @default(active)
  configDetails           Json // Encrypted credentials or settings
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
}

enum IntegrationStatus {
  active
  inactive
  error
}

    