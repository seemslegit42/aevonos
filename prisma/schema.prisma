// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  password      String
  firstName     String?
  lastName      String?
  lastLoginAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaces    Workspace[] @relation("WorkspaceMembers")
  transactions  Transaction[]
}

model Workspace {
  id                String      @id @default(cuid())
  name              String
  planTier          PlanTier    @default(Apprentice)
  credits           Decimal     @default(0.0)
  agentActionsUsed  Int         @default(0)
  overageEnabled    Boolean     @default(false)
  ownerId           String
  owner             User        @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members           User[]      @relation("WorkspaceMembers")
  agents            Agent[]
  securityAlerts    SecurityAlert[]
  contacts          Contact[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  threatFeeds       ThreatFeed[]
  integrations      Integration[]
  transactions      Transaction[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model SecurityAlert {
    id              String      @id @default(cuid())
    type            String
    explanation     String
    riskLevel       SecurityRiskLevel @default(low)
    timestamp       DateTime    @default(now())
    actionableOptions String[]
    workspaceId     String
    workspace       Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Contact {
  id          String    @id @default(cuid())
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Workflow {
  id          String      @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean     @default(true)
  triggerType String      @default("api")
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model WorkflowRun {
  id             String      @id @default(cuid())
  workflowId     String
  workflow       Workflow    @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace   @relation(fields: [workspaceId], references: [id])
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?       @default("[]")
  startedAt      DateTime    @default(now())
  finishedAt     DateTime?
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  
  @@unique([url, workspaceId])
}

model Integration {
    id                      String @id @default(cuid())
    workspaceId             String
    workspace               Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    integrationManifestId   String // This is the UUID from the static manifest file
    name                    String
    status                  String @default("active") // e.g., "active", "inactive", "error"
    configDetails           Json   // Encrypted API keys, tokens, etc.
    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt
}

model Transaction {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type        TransactionType
  amount      Decimal
  description String
  status      TransactionStatus @default(COMPLETED)
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  agentId     String?
  agent       Agent?    @relation(fields: [agentId], references: [id])
  createdAt   DateTime  @default(now())
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
