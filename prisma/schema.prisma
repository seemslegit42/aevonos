
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// ==============================================================================
//                              CORE DATA MODELS
// ==============================================================================

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  password          String
  firstName         String?
  lastName          String?
  agentAlias        String?
  role              UserRole      @default(OPERATOR)
  psyche            UserPsyche    @default(ZEN_ARCHITECT)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  lastLoginAt       DateTime?
  workspacesOwned   Workspace[]   @relation("WorkspaceOwner")
  workspacesMember  Workspace[]   @relation("WorkspaceMembers")
  transactions      Transaction[]
  pulseProfile      PulseProfile?
  ownedChaosCards   ChaosCard[]   @relation("UserOwnedChaosCards")
  instrumentDiscoveries InstrumentDiscovery[]
}

model Workspace {
  id              String         @id @default(cuid())
  name            String
  ownerId         String
  owner           User           @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members         User[]         @relation("WorkspaceMembers")
  planTier        PlanTier       @default(Apprentice)
  credits         Decimal        @default(0.0)
  agentActionsUsed Int           @default(0)
  overageEnabled  Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  agents          Agent[]
  securityAlerts  SecurityAlert[]
  contacts        Contact[]
  workflows       Workflow[]
  workflowRuns    WorkflowRun[]
  transactions    Transaction[]
  integrations    Integration[]
  threatFeeds     ThreatFeed[]
  unlockedAppIds  String[]       @default([])
  instrumentDiscoveries InstrumentDiscovery[]

  @@index([ownerId])
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Contact {
  id          String    @id @default(cuid())
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model Workflow {
  id           String          @id @default(cuid())
  name         String
  isActive     Boolean         @default(true)
  triggerType  String          @default("api")
  definition   Json
  workspaceId  String
  workspace    Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs         WorkflowRun[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  log            Json?
  output         Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  @@index([workflowId])
  @@index([workspaceId])
}

// ==============================================================================
//                            OBELISK PAY MODELS
// ==============================================================================

model Transaction {
  id              String            @id @default(cuid())
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus @default(COMPLETED)
  userId          String?
  user            User?             @relation(fields: [userId], references: [id])
  agentId         String?
  instrumentId    String?
  luckWeight      Float?            // For Klepsydra tributes
  outcome         String?           // "win", "loss", "pity_boon"
  boonAmount      Decimal?          // The credits won
  userPsyche      UserPsyche?       // User's psyche at time of tribute
  createdAt       DateTime          @default(now())

  @@index([workspaceId])
  @@index([userId])
}

// ==============================================================================
//                            KLEPSYDRA (PROFIT PULSE) ENGINE MODELS
// ==============================================================================

model PulseProfile {
  id                  String      @id @default(cuid())
  userId              String      @unique
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  amplitude           Float       @default(0.15)    // Â±15% variance from baseline
  frequency           Float       @default(0.01)    // A slow cycle
  phaseOffset         Float       @default(0)       // To de-sync users
  baselineLuck        Float       @default(0.5)     // The base 50/50 odds
  lastEventTimestamp  DateTime    @default(now())
  consecutiveLosses   Int         @default(0)
  lastResolvedPhase   PulsePhase  @default(EQUILIBRIUM)
}

model ChaosCard {
  id            String    @id @default(cuid())
  key           String    @unique
  name          String
  description   String
  cardClass     ChaosCardClass
  cost          Int
  systemEffect  String
  ownedBy       User[]    @relation("UserOwnedChaosCards")
}

model InstrumentDiscovery {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId  String      // The key of the MicroApp or ChaosCard
  firstViewedAt DateTime    @default(now())
  converted     Boolean     @default(false)
  dtt           Int?        // "Discovery To Tribute" in minutes
  nudgeSentAt   DateTime?
  
  @@unique([userId, instrumentId])
  @@index([userId])
}


// ==============================================================================
//                            INTEGRATIONS & FEEDS
// ==============================================================================
model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  @@index([workspaceId])
}

model ThreatFeed {
  id           String    @id @default(cuid())
  url          String
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  
  @@index([workspaceId])
}


// ==============================================================================
//                                    ENUMS
// ==============================================================================

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  idle
  active
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum UserPsyche {
  ZEN_ARCHITECT       // Balanced, seeks flow and harmony
  SYNDICATE_ENFORCER  // Aggressive, seeks power and efficiency
  RISK_AVERSE_ARTISAN // Cautious, seeks stability and perfection
}

enum PulsePhase {
  CREST        // Peak luck
  TROUGH       // Low luck
  EQUILIBRIUM  // Neutral
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}
