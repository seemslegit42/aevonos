// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                      String                 @id @default(cuid())
  firstName               String?
  lastName                String?
  email                   String?                @unique
  emailVerified           DateTime?
  password                String?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  role                    UserRole               @default(OPERATOR)
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  agentAlias              String?
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]            @relation("WorkspaceOwner")
  lastLoginAt             DateTime?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  
  // Custom OS Fields
  unlockedChaosCardKeys   String[]               @default([])
  reclamationGraceUntil   DateTime?

  // For the Rite of Invocation
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Float?
  foundingBenediction     String?
  firstWhisper            String?

  // Relations
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
}

model Workspace {
  id                  String               @id @default(cuid())
  name                String
  ownerId             String
  owner               User                 @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members             User[]               @relation("WorkspaceMembers")
  planTier            PlanTier             @default(Apprentice)
  credits             Decimal              @default(0.0)
  agentActionsUsed    Int                  @default(0)
  overageEnabled      Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  // Relations
  unlockedAppIds      String[]             @default([])
  agents              Agent[]
  contacts            Contact[]
  securityAlerts      SecurityAlert[]
  transactions        Transaction[]
  conversations       Conversation[]
  threatFeeds         ThreatFeed[]
  workflows           Workflow[]
  workflowRuns        WorkflowRun[]
  instrumentDiscoveries InstrumentDiscovery[]
  activeSystemEffects ActiveSystemEffect[]
  integrations        Integration[]
}

model Agent {
  id           String       @id @default(cuid())
  name         String
  type         String
  description  String?
  status       AgentStatus  @default(idle)
  workspaceId  String
  workspace    Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Contact {
  id           String    @id @default(cuid())
  firstName    String?
  lastName     String?
  email        String?
  phone        String?
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@unique([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                String           @id @default(cuid())
  workspaceId       String
  workspace         Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?            @relation(fields: [userId], references: [id])
  type              TransactionType
  amount            Decimal
  description       String
  status            TransactionStatus @default(COMPLETED)
  createdAt         DateTime         @default(now())
  
  // For Folly Instruments
  instrumentId        String?
  luckWeight          Float?
  outcome             String?
  tributeAmount       Decimal?
  boonAmount          Decimal?
  judasFactor         Decimal? // To track the "hollow win" magnitude
  userPsyche          UserPsyche?
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json     // Array of BaseMessage JSON objects
  updatedAt   DateTime @updatedAt
}

model ThreatFeed {
    id          String   @id @default(cuid())
    url         String
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Workflow {
    id           String         @id @default(cuid())
    name         String
    definition   Json
    isActive     Boolean        @default(true)
    triggerType  String         @default("api")
    workspaceId  String
    workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    runs         WorkflowRun[]
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
}

model WorkflowRun {
    id            String            @id @default(cuid())
    workflowId    String
    workflow      Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
    workspaceId   String
    workspace     Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    status        WorkflowRunStatus
    triggerPayload Json?
    output        Json?
    log           Json[]
    startedAt     DateTime
    finishedAt    DateTime?
}

model PulseProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Sine-Rhythm Engine (SRE) parameters
  baselineLuck        Float    @default(0.4) // The neutral point of the luck sine wave
  amplitude           Float    @default(0.15) // How high and low the sine wave goes
  frequency           Float    @default(0.01) // How fast the wave oscillates over time
  phaseOffset         Float    // Unique offset for each user to desynchronize pulses
  
  // Loss-Streak Elasticity (LSE) counter
  consecutiveLosses   Int      @default(0)
  
  // Temporal Clock
  lastEventTimestamp  DateTime @default(now())
  
  // Dynamic Psychological State
  frustration         Float    @default(0.0) // 0-1, how frustrated the user is
  flowState           Float    @default(0.0) // 0-1, how engaged/in the zone the user is
  riskAversion        Float    @default(0.5) // 0-1, user's current willingness to take risks
  
  // Last state for narrative feedback
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)
  lastInteractionType PulseInteractionType @default(WIN)
  
  // Buffs
  loadedDieBuffCount      Int?
  nextTributeGuaranteedWin Boolean?
  hadesBargainActive       Boolean?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model ChaosCard {
    id              String        @id @default(cuid())
    key             String        @unique // e.g., 'GEOLOGIC_TIME'
    name            String
    description     String
    cardClass       ChaosCardClass
    cost            Int
    systemEffect    String
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
}

model InstrumentDiscovery {
    id             String    @id @default(cuid())
    userId         String
    user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspaceId    String
    workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    instrumentId   String
    firstViewedAt  DateTime  @default(now())
    converted      Boolean   @default(false)
    dtt            Int?      // Discovery-to-Tribute Time in minutes
    nudgeSentAt    DateTime?
}

model ActiveSystemEffect {
    id          String    @id @default(cuid())
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    cardKey     String
    expiresAt   DateTime
    createdAt   DateTime  @default(now())
}

model Integration {
  id                    String              @id @default(cuid())
  workspaceId           String
  workspace             Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String // UUID from static manifest
  name                  String
  status                IntegrationStatus   @default(active)
  configDetails         Json?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum AgentStatus {
  idle
  processing
  active
  paused
  error
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}
