
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  NEUTRAL
}

enum EventStatus {
    ACTIVE
    CONCLUDED
    FAILED
}

// MODELS

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole  @default(OPERATOR)
  psyche                  UserPsyche
  agentAlias              String?
  unlockedChaosCardKeys   String[]  @default([])
  lastLoginAt             DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  corePainIndex           Int?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  reclamationGraceUntil   DateTime?

  workspaces              Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[] @relation("WorkspaceOwner")
  transactions            Transaction[]
  securityAlerts          SecurityAlert[]
  contributions           Contribution[]
  pulseProfile            PulseProfile?
  discoveries             InstrumentDiscovery[]
  conversations           Conversation[]
}

model Workspace {
  id                  String      @id @default(cuid())
  name                String
  ownerId             String
  planTier            PlanTier    @default(Apprentice)
  credits             Decimal     @default(0.0)
  agentActionsUsed    Int         @default(0)
  unlockedAppIds      String[]    @default([])
  overageEnabled      Boolean     @default(false)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  owner               User        @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members             User[]      @relation("WorkspaceMembers")

  agents              Agent[]
  contacts            Contact[]
  securityAlerts      SecurityAlert[]
  threatFeeds         ThreatFeed[]
  workflows           Workflow[]
  workflowRuns        WorkflowRun[]
  conversations       Conversation[]
  transactions        Transaction[]
  integrations        Integration[]
  discoveries         InstrumentDiscovery[]
  activeSystemEffects ActiveSystemEffect[]
  contributions       Contribution[]
  winningBlackWagers  GlobalAgenticEvent[] @relation("WinningWorkspace")
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Workflow {
  id            String          @id @default(cuid())
  name          String
  isActive      Boolean         @default(true)
  triggerType   String          @default("api")
  definition    Json
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  workspaceId   String
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs          WorkflowRun[]
}

model WorkflowRun {
  id              String            @id @default(cuid())
  status          WorkflowRunStatus @default(pending)
  triggerPayload  Json?
  output          Json?
  log             Json?
  startedAt       DateTime          @default(now())
  finishedAt      DateTime?

  workflowId      String
  workflow        Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Transaction {
  id              String            @id @default(cuid())
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?
  boonAmount      Decimal?
  judasFactor     Decimal?
  userPsyche      UserPsyche?
  agentId         String?

  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId          String?
  user            User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model PulseProfile {
  id                      String                @id @default(cuid())
  baselineLuck            Float                 @default(0.4)
  amplitude               Float                 @default(0.15)
  frequency               Float                 @default(0.01)
  phaseOffset             Float
  consecutiveLosses       Int                   @default(0)
  lastEventTimestamp      DateTime              @default(now())
  lastResolvedPhase       PulsePhase?
  lastInteractionType     PulseInteractionType?
  frustration             Float                 @default(0)
  flowState               Float                 @default(0)
  riskAversion            Float                 @default(0)

  loadedDieBuffCount      Int?                  @default(0)
  nextTributeGuaranteedWin Boolean?              @default(false)
  hadesBargainActive      Boolean?              @default(false)

  userId                  String                @unique
  user                    User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChaosCard {
  key          String         @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
}

model ActiveSystemEffect {
  id          String   @id @default(cuid())
  cardKey     String
  expiresAt   DateTime

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]

  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String    @id @default(cuid())
  messages    Json
  updatedAt   DateTime  @updatedAt

  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model InstrumentDiscovery {
  id              String    @id @default(cuid())
  instrumentId    String
  firstViewedAt   DateTime  @default(now())
  converted       Boolean   @default(false)
  dtt             Int? // Discovery-to-Tribute time in minutes
  nudgeSentAt     DateTime?

  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Integration {
  id                    String            @id @default(cuid())
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String
}

model GlobalAgenticEvent {
  id                  String      @id @default(cuid())
  eventName           String
  status              EventStatus @default(ACTIVE)
  poolTarget          Decimal
  currentPool         Decimal     @default(0.0)
  expiresAt           DateTime
  shardReward         String

  winningWorkspaceId  String?
  winningWorkspace    Workspace?  @relation("WinningWorkspace", fields: [winningWorkspaceId], references: [id], onDelete: SetNull)

  contributions       Contribution[]
}

model Contribution {
  id          String    @id @default(cuid())
  amount      Decimal
  createdAt   DateTime  @default(now())

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
