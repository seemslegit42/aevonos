// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- Core Tenancy Models ---

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  firstName               String?
  lastName                String?
  role                    UserRole  @default(OPERATOR)
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  agentAlias              String?
  
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Int?
  foundingBenediction     String?
  firstWhisper            String?
  firstCommand            String?
  
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  lastLoginAt             DateTime?

  workspaces              Workspace[] @relation("WorkspaceMembers")
  ownedWorkspace          Workspace? @relation("WorkspaceOwner")
  
  transactions            Transaction[]
  contributions           Contribution[]
  
  conversations           Conversation[]
  
  pulseProfile            PulseProfile?
  
  instrumentDiscoveries   InstrumentDiscovery[]
  potentialAccruals       PotentialAccrualLog[]
  renunciations           Renunciation[]

  unlockedChaosCardKeys   String[]  @default([])
  reclamationGraceUntil   DateTime?
  hasAbyssalScar          Boolean   @default(false)
  canSeeArchive           Boolean   @default(false)
  boons                   Json      @default("[]")
}

model Workspace {
  id                      String    @id @default(cuid())
  name                    String
  ownerId                 String    @unique
  owner                   User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members                 User[]    @relation("WorkspaceMembers")

  planTier                PlanTier @default(Apprentice)
  credits                 Decimal  @default(100.0)
  potential               Decimal @default(0)
  agentActionsUsed        Int      @default(0)
  overageEnabled          Boolean  @default(true)

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  contacts                Contact[]
  agents                  Agent[]
  workflows               Workflow[]
  workflowRuns            WorkflowRun[]
  securityAlerts          SecurityAlert[]
  threatFeeds             ThreatFeed[]
  securityEdicts          SecurityEdict[]
  transactions            Transaction[]
  integrations            Integration[]
  activeSystemEffects     ActiveSystemEffect[]
  contributions           Contribution[]
}


// --- Agentic & Workflow Models ---

model Agent {
  id            String      @id @default(cuid())
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  name          String
  type          String
  description   String?
  status        AgentStatus @default(idle)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Workflow {
  id             String        @id @default(cuid())
  workspaceId    String
  workspace      Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  name           String
  definition     Json
  isActive       Boolean       @default(true)
  triggerType    String        @default("api")

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  runs           WorkflowRun[]
}

model WorkflowRun {
  id             String              @id @default(cuid())
  workspaceId    String
  workspace      Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId     String
  workflow       Workflow            @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  status         WorkflowRunStatus   @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  
  startedAt      DateTime            @default(now())
  finishedAt     DateTime?
}


// --- Economic Engine Models ---

model Transaction {
  id                  String           @id @default(cuid())
  workspaceId         String
  workspace           Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  type                TransactionType
  amount              Decimal          // Net change to balance. Can be negative for debits.
  description         String
  status              TransactionStatus @default(COMPLETED)
  
  userId              String?
  user                User?            @relation(fields: [userId], references: [id], onDelete: SetNull)

  // For tributes from Folly Instruments
  instrumentId        String?
  luckWeight          Float?
  outcome             String?
  tributeAmount       Decimal?
  boonAmount          Decimal?
  judasFactor         Decimal?

  // For real-world transmutations
  isTransmutation     Boolean          @default(false)
  realWorldAmount     Decimal?
  realWorldCurrency   String?
  vendorName          String?
  transmutationTithe  Decimal?

  aegisSignature      String?
  createdAt           DateTime         @default(now())
}

model PulseProfile {
  id                    String        @id @default(cuid())
  userId                String        @unique
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  baselineLuck          Float         @default(0.4)
  amplitude             Float         @default(0.15)
  frequency             Float         @default(0.01)
  phaseOffset           Float

  consecutiveLosses     Int           @default(0)
  lastEventTimestamp    DateTime      @default(now())
  lastResolvedPhase     PulsePhase    @default(EQUILIBRIUM)
  lastInteractionType   PulseInteractionType @default(COMMAND_SUCCESS)

  frustration           Float         @default(0)
  flowState             Float         @default(0)
  riskAversion          Float         @default(0)

  // Buffs / Debuffs
  nextTributeGuaranteedWin Boolean?   @default(false)
  hadesBargainActive      Boolean?   @default(false)
  loadedDieBuffCount      Int?       @default(0)
}

model ChaosCard {
  id            String @id @default(cuid())
  key           String @unique
  name          String
  description   String
  cardClass     ChaosCardClass
  cost          Int
  systemEffect  String
  
  createdAt     DateTime @default(now())
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
}

model PotentialAccrualLog {
  id                  String   @id @default(cuid())
  workspaceId         String
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  instrumentId        String
  luckWeight          Float
  potentialAwarded    Decimal
  narrativeContext    String?
  aegisSignature      String?
  createdAt           DateTime @default(now())
}

model Renunciation {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  renouncedItemType String
  renouncedItemName String
  valueInX          Decimal
  createdAt         DateTime @default(now())
  aegisSignature    String
}


// --- Utility & App Models ---

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  
  userId            String?           // The user who triggered the alert, if applicable
}

model ThreatFeed {
  id            String    @id @default(cuid())
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url           String
  createdAt     DateTime  @default(now())
}

model SecurityEdict {
  id            String    @id @default(cuid())
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  description   String
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
}

model Conversation {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId   String
  
  messages      Json
  updatedAt     DateTime  @updatedAt
}

model InstrumentDiscovery {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId   String
  instrumentId  String
  firstViewedAt DateTime @default(now())
  converted     Boolean  @default(false)
  dtt           Int?     // Discovery-to-Tribute time in minutes
  nudgeSentAt   DateTime?

  @@unique([userId, instrumentId])
}

model Integration {
    id                      String @id @default(cuid())
    workspaceId             String
    workspace               Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    integrationManifestId   String // UUID pointing to a manifest in config
    name                    String
    status                  IntegrationStatus @default(active)
    configDetails           Json // For API keys, etc.
    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt
}

model GlobalAgenticEvent {
  id                    String        @id @default(cuid())
  eventName             String
  poolTarget            Decimal
  currentPool           Decimal       @default(0)
  status                EventStatus   @default(ACTIVE)
  expiresAt             DateTime
  shardReward           String        // A key for a Chaos Card or other reward
  winningWorkspaceId    String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  contributions         Contribution[]
}

model Contribution {
  id            String    @id @default(cuid())
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId       String
  event         GlobalAgenticEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  amount        Decimal
  createdAt     DateTime @default(now())
}


// --- ENUMS ---

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
    ZEN_ARCHITECT
    SYNDICATE_ENFORCER
    RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum IntegrationStatus {
  active
  paused
  error
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}
