
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// -- ENUMS -- //

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  CREDIT
  DEBIT
}


// -- CORE MODELS -- //

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  password      String
  firstName     String?
  lastName      String?
  lastLoginAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaces    Workspace[]  @relation("WorkspaceMembers")
  transactions  Transaction[]
}

model Workspace {
  id                String       @id @default(cuid())
  name              String
  planTier          PlanTier     @default(Apprentice)
  credits           Decimal      @default(0.0)
  agentActionsUsed  Int          @default(0)
  overageEnabled    Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  ownerId           String
  owner             User         @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  
  members           User[]       @relation("WorkspaceMembers")
  
  agents            Agent[]
  contacts          Contact[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  integrations      Integration[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  transactions      Transaction[]

  @@index([ownerId])
}

model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus
  lastActivityAt DateTime?
  
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Contact {
  id              String    @id @default(cuid())
  firstName       String?
  lastName        String?
  email           String?   @unique
  phone           String?
  customProperties Json?
  
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Integration {
  id                    String   @id @default(cuid())
  name                  String
  status                String
  configDetails         Json
  integrationManifestId String // UUID of the manifest from config
  
  workspaceId           String
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([workspaceId])
}


// -- WORKFLOW MODELS -- //

model Workflow {
  id          String   @id @default(cuid())
  name        String
  isActive    Boolean  @default(true)
  triggerType String
  definition  Json
  
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  runs        WorkflowRun[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([workspaceId])
}

// -- OBELISK PAY LEDGER -- //

model Transaction {
  id          String          @id @default(cuid())
  type        TransactionType
  amount      Decimal
  description String
  createdAt   DateTime        @default(now())
  
  workspaceId String
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  // Optional relations for audit trail
  userId      String?
  user        User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  agentId     String?

  @@index([workspaceId])
  @@index([userId])
}
