
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  planTier  String   @default("free")
  agentActionsUsed Int @default(0)
  overageEnabled Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  ownerId String @unique
  owner User @relation(fields: [ownerId], references: [id])

  contacts      Contact[]
  workflows     Workflow[]
  workflowRuns  WorkflowRun[]
  agents        Agent[]
  securityAlerts SecurityAlert[]
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  workspace Workspace?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Contact {
  id          String  @id @default(cuid())
  workspaceId String
  email       String? @unique
  firstName   String?
  lastName    String?
  phone       String?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model Workflow {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  isActive    Boolean  @default(true)
  triggerType String   @default("api")
  definition  Json

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs      WorkflowRun[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([workspaceId])
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspaceId    String
  workflowId     String
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflow  Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
  @@index([workflowId])
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Agent {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  description String?
  status      AgentStatus @default(idle)
  lastActivityAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

model SecurityAlert {
  id          String   @id @default(cuid())
  workspaceId String
  type        String
  explanation String
  riskLevel   SecurityRiskLevel @default(low)
  timestamp   DateTime @default(now())
  actionableOptions String[]

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
}
