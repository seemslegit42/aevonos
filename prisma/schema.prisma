// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  firstName     String?
  lastName      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  owned_workspace   Workspace? @relation("Owner")
  workspaces    Workspace[] @relation("Members")
}

model Workspace {
  id            String    @id @default(cuid())
  name          String
  ownerId       String    @unique
  owner         User      @relation("Owner", fields: [ownerId], references: [id])
  members       User[]    @relation("Members")
  contacts      Contact[]
  securityAlerts SecurityAlert[]
  threatFeeds   ThreatFeed[]
  integrations  Integration[]
  agents        Agent[]
  workflows     Workflow[]
  workflowRuns  WorkflowRun[]
  agentActionsUsed Int      @default(0)
  planTier      String    @default("Apprentice") // e.g., "Apprentice", "Artisan", "Priesthood"
  overageEnabled  Boolean  @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Integration {
  id                   String @id @default(cuid())
  workspaceId          String
  workspace            Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String
  name                 String
  status               String // "active", "inactive", "error"
  configDetails        Json
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@index([workspaceId])
}

model Agent {
  id                   String @id @default(cuid())
  workspaceId          String
  workspace            Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name                 String
  type                 String
  description          String?
  status               AgentStatus
  lastActivityAt       DateTime? @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([workspaceId])
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Workflow {
  id           String        @id @default(cuid())
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name         String
  definition   Json
  isActive     Boolean       @default(true)
  triggerType  String        @default("api") // "api", "schedule", "event"
  runs         WorkflowRun[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  startedAt      DateTime
  finishedAt     DateTime?

  @@index([workflowId])
  @@index([workspaceId])
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}
