
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  password          String
  firstName         String?
  lastName          String?
  role              UserRole            @default(OPERATOR)
  psyche            UserPsyche          @default(ZEN_ARCHITECT)
  agentAlias        String              @default("BEEP")
  foundingVow       String?
  foundingGoal      String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  lastLoginAt       DateTime?
  ownedWorkspaces   Workspace[]         @relation("WorkspaceOwner")
  workspaces        Workspace[]         @relation("WorkspaceMembers")
  transactions      Transaction[]
  pulseProfile      PulseProfile?
  ownedChaosCards   ChaosCard[]
  instrumentViewLog InstrumentDiscovery[]

  @@index([email])
}

model Workspace {
  id                  String              @id @default(cuid())
  name                String
  ownerId             String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  planTier            PlanTier            @default(Apprentice)
  credits             Decimal             @default(0.0)
  agentActionsUsed    Int                 @default(0)
  overageEnabled      Boolean             @default(false)
  unlockedAppIds      String[]            @default([])
  owner               User                @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members             User[]              @relation("WorkspaceMembers")
  agents              Agent[]
  contacts            Contact[]
  securityAlerts      SecurityAlert[]
  transactions        Transaction[]
  workflows           Workflow[]
  workflowRuns        WorkflowRun[]
  threatFeeds         ThreatFeed[]
  integrations        Integration[]
  instrumentViewLog   InstrumentDiscovery[]

  @@index([ownerId])
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Contact {
  id          String    @id @default(cuid())
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Transaction {
  id             String          @id @default(cuid())
  workspaceId    String
  userId         String?
  type           TransactionType
  amount         Decimal
  description    String
  status         TransactionStatus
  instrumentId   String?
  luckWeight     Float?
  outcome        String?
  boonAmount     Decimal?
  userPsyche     UserPsyche?
  createdAt      DateTime        @default(now())
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user           User?           @relation(fields: [userId], references: [id])

  @@index([workspaceId])
  @@index([userId])
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String // This is a UUID from our manifest file
  name                  String
  status                IntegrationStatus @default(pending)
  configDetails         Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Workflow {
  id           String          @id @default(cuid())
  name         String
  isActive     Boolean         @default(true)
  triggerType  String          @default("api")
  definition   Json
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  workspaceId  String
  workspace    Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs         WorkflowRun[]

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  status         WorkflowRunStatus @default(pending)
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  triggerPayload Json?
  output         Json?
  log            Json?
  workspaceId    String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([workspaceId])
}

model PulseProfile {
  id                 String     @id @default(cuid())
  userId             String     @unique
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  amplitude          Float      @default(0.15)
  frequency          Float      @default(0.00347) // ~1 cycle per 4.8 hours
  phaseOffset        Float      @default(0)
  baselineLuck       Float      @default(0.5)
  lastEventTimestamp DateTime   @default(now())
  consecutiveLosses  Int        @default(0)
  lastResolvedPhase  PulsePhase @default(EQUILIBRIUM)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model ChaosCard {
  id           String       @id @default(cuid())
  key          String       @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  owners       User[]
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  userId       String
  workspaceId  String
  instrumentId String // Key of Chaos Card or ID of Micro-App
  firstViewedAt DateTime  @default(now())
  converted    Boolean   @default(false)
  dtt          Int? // Discovered-to-Tribute time in minutes
  nudgeSentAt  DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, instrumentId])
  @@index([userId])
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  idle
  processing
  active
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  pending
  disabled
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}
