
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  firstName               String?
  lastName                String?
  role                    UserRole  @default(OPERATOR)
  agentAlias              String?   @default("BEEP")
  psyche                  UserPsyche
  lastLoginAt             DateTime? @map("last_login_at")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  foundingVow             String?
  foundingGoal            String?
  firstWhisper            String?
  firstCommand            String?
  corePainIndex           Int?
  foundingBenediction     String?
  reclamationGraceUntil   DateTime?

  workspaces            Workspace[]           @relation("WorkspaceMembers")
  ownedWorkspaces       Workspace[]           @relation("WorkspaceOwner")
  transactions          Transaction[]
  conversation          Conversation?
  unlockedChaosCardKeys String[]
  discoveries           InstrumentDiscovery[]
  pulseProfile          PulseProfile?
  contributions         Contribution[]
}

model Workspace {
  id                String    @id @default(cuid())
  name              String
  ownerId           String
  owner             User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  planTier          PlanTier  @default(Apprentice)
  credits           Decimal   @default(0.0)
  agentActionsUsed  Int       @default(0)
  overageEnabled    Boolean   @default(true)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  unlockedAppIds    String[]
  unlockedAgentKeys String[]

  members       User[]                @relation("WorkspaceMembers")
  agents        Agent[]
  contacts      Contact[]
  securityAlerts SecurityAlert[]
  transactions  Transaction[]
  workflows     Workflow[]
  workflowRuns  WorkflowRun[]
  integrations  Integration[]
  threatFeeds   ThreatFeed[]
  discoveries   InstrumentDiscovery[]
  activeEffects ActiveSystemEffect[]
  contributions Contribution[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
}

model Contact {
  id          String    @id @default(cuid())
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  messages    Json
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean       @default(true)
  triggerType String        @default("api")
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now()) @map("started_at")
  finishedAt     DateTime?         @map("finished_at")
}

model Transaction {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  type           TransactionType
  amount         Decimal
  description    String
  status         TransactionStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  instrumentId   String?
  luckWeight     Float?
  outcome        String?
  tributeAmount  Decimal?
  boonAmount     Decimal?
  userPsyche     UserPsyche?
  judasFactor    Decimal?
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String            @map("integration_manifest_id") // Maps to the UUID in the manifest file
  name                  String
  status                IntegrationStatus
  configDetails         Json
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model ChaosCard {
  key          String         @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
}

model InstrumentDiscovery {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId   String // key of the MicroApp or ChaosCard
  firstViewedAt  DateTime  @default(now())
  nudgeSentAt    DateTime?
  converted      Boolean   @default(false)
  dtt            Int? // Discovery-to-Tribute time in minutes
}

model PulseProfile {
  id                  String                @id @default(cuid())
  userId              String                @unique
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  baselineLuck        Float                 @default(0.4)
  amplitude           Float                 @default(0.15)
  frequency           Float                 @default(0.01)
  phaseOffset         Float
  consecutiveLosses   Int                   @default(0)
  lastEventTimestamp  DateTime              @default(now())
  lastResolvedPhase   PulsePhase            @default(EQUILIBRIUM)
  lastInteractionType PulseInteractionType  @default(COMMAND_SUCCESS)
  frustration         Float                 @default(0)
  flowState           Float                 @default(0)
  riskAversion        Float                 @default(0.2)
  nextTributeGuaranteedWin Boolean? @default(false)
  loadedDieBuffCount       Int?     @default(0)
  hadesBargainActive       Boolean? @default(false)
}

model GlobalAgenticEvent {
  id                   String         @id @default(cuid())
  eventName            String
  status               EventStatus    @default(ACTIVE)
  poolTarget           Decimal
  currentPool          Decimal        @default(0)
  expiresAt            DateTime
  winningWorkspaceId   String?
  shardReward          String?
  contributions        Contribution[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

model Contribution {
  id          String   @id @default(cuid())
  amount      Decimal
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}


enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  inactive
  error
}
```