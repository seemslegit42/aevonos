// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core tenancy and user models
model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole               @default(OPERATOR)
  agentAlias              String?
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  firstCommand            String?
  corePainIndex           Int?
  unlockedChaosCardKeys   String[]
  hasAbyssalScar          Boolean                @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]            @relation("WorkspaceOwner")
  transactions            Transaction[]
  contributions           Contribution[]
  pulseProfile            PulseProfile?
  conversations           Conversation[]
  instrumentDiscoveries   InstrumentDiscovery[]
  securityAlerts          SecurityAlert[]
  sigil                   SovereignSigil?
}

model SovereignSigil {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}


model Workspace {
  id                      String                   @id @default(cuid())
  name                    String
  ownerId                 String
  owner                   User                     @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members                 User[]                   @relation("WorkspaceMembers")
  planTier                PlanTier                 @default(Apprentice)
  credits                 Decimal                  @db.Decimal(12, 2)
  potential               Decimal                  @default(0.00) @db.Decimal(18, 6)
  agentActionsUsed        Int                      @default(0)
  overageEnabled          Boolean                  @default(true)
  unlockedAppIds          String[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  agents                  Agent[]
  contacts                Contact[]
  securityAlerts          SecurityAlert[]
  conversations           Conversation[]
  workflows               Workflow[]
  workflowRuns            WorkflowRun[]
  transactions            Transaction[]
  integrations            Integration[]
  activeSystemEffects     ActiveSystemEffect[]
  instrumentDiscoveries   InstrumentDiscovery[]
  threatFeeds             ThreatFeed[]
  securityEdicts          SecurityEdict[]
  contributions           Contribution[]
  globalAgenticEvents     GlobalAgenticEvent[]
}

model Agent {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  name        String
  type        String
  description String?
  status      AgentStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  userId            String?
  user              User?             @relation(fields: [userId], references: [id])
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
}

model Conversation {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  messages    Json
  updatedAt   DateTime @updatedAt
}

model Workflow {
  id           String          @id @default(cuid())
  workspaceId  String
  workspace    Workspace       @relation(fields: [workspaceId], references: [id])
  name         String
  isActive     Boolean         @default(true)
  triggerType  String          @default("api")
  definition   Json
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  runs         WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  status         WorkflowRunStatus
  triggerPayload Json
  output         Json?
  log            Json[]
  startedAt      DateTime
  finishedAt     DateTime?
}

model Transaction {
  id                   String            @id @default(cuid())
  workspaceId          String
  workspace            Workspace         @relation(fields: [workspaceId], references: [id])
  userId               String?
  user                 User?             @relation(fields: [userId], references: [id])
  agentId              String?
  instrumentId         String?
  type                 TransactionType
  amount               Decimal           @db.Decimal(12, 2)
  tributeAmount        Decimal?          @db.Decimal(12, 2)
  boonAmount           Decimal?          @db.Decimal(12, 2)
  judasFactor          Decimal?          @db.Decimal(4, 3)
  description          String
  status               TransactionStatus
  outcome              String?
  luckWeight           Float?
  userPsyche           UserPsyche?
  aegisSignature       String?
  isTransmutation      Boolean?          @default(false)
  realWorldAmount      Float?
  realWorldCurrency    String?
  vendorName           String?
  transmutationTithe   Decimal?          @db.Decimal(12, 2)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
}

model PulseProfile {
  id                  String               @id @default(cuid())
  userId              String               @unique
  user                User                 @relation(fields: [userId], references: [id])
  baselineLuck        Float                @default(0.4) // e.g., 40% base chance
  amplitude           Float                @default(0.15) // Luck swings by +/- 15%
  frequency           Float                @default(0.01) // Completes a cycle every 100 minutes
  phaseOffset         Float
  consecutiveLosses   Int                  @default(0)
  lastEventTimestamp  DateTime             @default(now())
  lastResolvedPhase   PulsePhase           @default(EQUILIBRIUM)
  lastInteractionType PulseInteractionType @default(COMMAND_SUCCESS)
  frustration         Float                @default(0.0)
  flowState           Float                @default(0.0)
  riskAversion        Float                @default(0.5)
  nextTributeGuaranteedWin Boolean? @default(false)
  loadedDieBuffCount       Int?     @default(0)
  hadesBargainActive       Boolean? @default(false)
}

model PotentialAccrualLog {
    id String @id @default(cuid())
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id])
    userId String
    user User @relation(fields: [userId], references: [id])
    instrumentId String
    luckWeight Float
    potentialAwarded Decimal @db.Decimal(18, 6)
    narrativeContext String
    aegisSignature String?
    createdAt DateTime @default(now())
}

model Integration {
    id String @id @default(cuid())
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id])
    integrationManifestId String
    name String
    status IntegrationStatus
    configDetails Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ActiveSystemEffect {
    id String @id @default(cuid())
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id])
    cardKey String
    expiresAt DateTime
    createdAt DateTime @default(now())
}

model ChaosCard {
    key           String          @id
    name          String
    description   String
    cardClass     ChaosCardClass
    cost          Int
    systemEffect  String
}

model InstrumentDiscovery {
    id String @id @default(cuid())
    userId String
    user User @relation(fields: [userId], references: [id])
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id])
    instrumentId String
    firstViewedAt DateTime @default(now())
    nudgeSentAt DateTime?
    converted Boolean @default(false)
    dtt Int? // Discovery to Tribute time in minutes
}

model ThreatFeed {
    id String @id @default(cuid())
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id])
    url String
    createdAt DateTime @default(now())
}

model SecurityEdict {
    id String @id @default(cuid())
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id])
    description String
    isActive Boolean @default(true)
    createdAt DateTime @default(now())
}

model GlobalAgenticEvent {
  id            String      @id @default(cuid())
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id])
  eventName     String
  status        EventStatus @default(ACTIVE)
  poolTarget    Decimal     @db.Decimal(12, 2)
  currentPool   Decimal     @default(0) @db.Decimal(12, 2)
  expiresAt     DateTime
  shardReward   String? // The key of the system effect or Chaos Card awarded
  winningWorkspaceId String?
  contributions Contribution[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Contribution {
  id          String      @id @default(cuid())
  amount      Decimal     @db.Decimal(12, 2)
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  createdAt   DateTime    @default(now())
}


enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
    active
    inactive
    error
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
    BOON
}
