// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String
  firstName       String?
  lastName        String?
  role            UserRole @default(OPERATOR)
  lastLoginAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaces      Workspace[] @relation("WorkspaceMembers")
  transactions    Transaction[]

  pulseProfile    PulseProfile?
  ownedChaosCards ChaosCard[] @relation("UserOwnedChaosCards")
}

model Workspace {
  id              String   @id @default(cuid())
  name            String
  ownerId         String
  owner           User     @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members         User[]   @relation("WorkspaceMembers")
  planTier        PlanTier @default(Artisan)
  
  credits         Decimal  @default(0.0)
  agentActionsUsed Int      @default(0)
  overageEnabled  Boolean  @default(true)
  unlockedAppIds  String[] @default([])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  agents        Agent[]
  securityAlerts SecurityAlert[]
  contacts      Contact[]
  workflows     Workflow[]
  workflowRuns  WorkflowRun[]
  integrations  Integration[]
  threatFeeds   ThreatFeed[]
  transactions  Transaction[]
}

model PulseProfile {
  id                  String   @id @default(cuid())
  user                User     @relation(fields: [userId], references: [id])
  userId              String   @unique
  
  amplitude           Float    @default(0.15) // Volatility
  frequency           Float    @default(0.1)  // Pacing
  phaseOffset         Float    // De-sync users
  baselineLuck        Float    @default(0.5)
  consecutiveLosses   Int      @default(0)
  lastEventTimestamp  DateTime @default(now())
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus
  lastActivityAt DateTime?
  
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   String
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId       String
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Contact {
  id            String   @id @default(cuid())
  email         String?  @unique
  firstName     String?
  lastName      String?
  phone         String?
  customProperties Json?
  
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   String
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Workflow {
  id            String   @id @default(cuid())
  name          String
  definition    Json
  isActive      Boolean  @default(true)
  triggerType   String   @default("api")
  
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   String
  runs          WorkflowRun[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  
  workflow       Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId     String
  
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId    String
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Integration {
  id                    String @id @default(cuid())
  name                  String
  status                String
  configDetails         Json
  integrationManifestId String
  
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId           String
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  @@unique([workspaceId, url])
}

model Transaction {
  id            String   @id @default(cuid())
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   String
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  agentId       String?

  type          TransactionType
  amount        Decimal
  description   String
  status        TransactionStatus

  // For TributeLog functionality
  instrumentId  String?
  luckWeight    Float?
  outcome       String?
  boonAmount    Decimal?

  createdAt     DateTime @default(now())
}

model ChaosCard {
  id              String   @id @default(cuid())
  key             String   @unique
  name            String
  description     String
  cardClass       ChaosCardClass
  cost            Int
  systemEffect    String

  owners User[] @relation("UserOwnedChaosCards")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}
