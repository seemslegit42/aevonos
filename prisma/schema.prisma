// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  firstName     String?
  lastName      String?
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  ownedWorkspace Workspace? @relation("WorkspaceOwner")
  workspaces    Workspace[] @relation("WorkspaceMembers")
}

model Workspace {
  id                 String          @id @default(cuid())
  name               String
  ownerId            String          @unique
  owner              User            @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members            User[]          @relation("WorkspaceMembers")
  agentActionsUsed   Int             @default(0)
  planTier           String          @default("Apprentice") // "Apprentice", "Artisan", "Priesthood"
  overageEnabled     Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  contacts           Contact[]
  workflows          Workflow[]
  workflowRuns       WorkflowRun[]
  agents             Agent[]
  integrations       Integration[]
  securityAlerts     SecurityAlert[]
  threatFeeds        ThreatFeed[]
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Workflow {
  id             String          @id @default(cuid())
  workspaceId    String
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name           String
  isActive       Boolean         @default(true)
  triggerType    String          @default("api") // "api", "schedule", "event"
  definition     Json
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  runs           WorkflowRun[]
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Agent {
  id                 String      @id @default(cuid())
  workspaceId        String
  workspace          Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name               String
  type               String
  description        String?
  status             AgentStatus @default(idle)
  assignedWorkflowId String?
  lastActivityAt     DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model Integration {
  id                    String    @id @default(cuid())
  workspaceId           String
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String // UUID of the manifest
  name                  String
  status                String    // "active", "inactive", "error"
  configDetails         Json
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime  @default(now())
}
