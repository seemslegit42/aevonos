// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id                      String       @id @default(cuid())
  email                   String       @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole     @default(OPERATOR)
  psyche                  UserPsyche   @default(ZEN_ARCHITECT)
  agentAlias              String?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  workspaces              Workspace[]  @relation("WorkspaceMembers")
  ownedWorkspace          Workspace?   @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  Conversation            Conversation?
  unlockedChaosCardKeys   String[]     @default([])
  discoveries             InstrumentDiscovery[]

  // Vercel Auth fields
  accounts Account[]
  sessions Session[]

  // Added for Rite of Invocation
  foundingVow           String?
  foundingGoal          String?
  corePainIndex         Float?
  foundingBenediction   String?
  firstWhisper          String?
}

model Workspace {
  id                String       @id @default(cuid())
  name              String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  ownerId           String       @unique
  owner             User         @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members           User[]       @relation("WorkspaceMembers")
  integrations      Integration[]
  agents            Agent[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  contacts          Contact[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  transactions      Transaction[]
  conversations     Conversation[]
  unlockedAppIds    String[]     @default([])
  activeSystemEffects ActiveSystemEffect[]
  discoveries       InstrumentDiscovery[]

  // Billing
  planTier          PlanTier     @default(Apprentice)
  credits           Decimal      @default(0.0)
  agentActionsUsed  Int          @default(0)
  overageEnabled    Boolean      @default(false)
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String // This will be the UUID from the static manifest config
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model Agent {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  type        String // e.g., 'dr-syntax', 'winston-wolfe'
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Workflow {
  id           String          @id @default(cuid())
  workspaceId  String
  workspace    Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name         String
  definition   Json
  isActive     Boolean         @default(true)
  triggerType  String          @default("api") // e.g., 'api', 'schedule', 'event'
  runs         WorkflowRun[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime  @default(now())
}

model Transaction {
  id              String          @id @default(cuid())
  workspaceId     String
  workspace       Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus
  createdAt       DateTime        @default(now())
  userId          String?
  user            User?           @relation(fields: [userId], references: [id])
  agentId         String? // Optional: Link to the agent that triggered the action
  instrumentId    String? // Optional: Link to a MicroApp or Chaos Card
  
  // Fields for Klepsydra Engine / Folly Instruments
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?
  boonAmount      Decimal?
  judasFactor     Decimal? // Factor by which a win was hollowed (0.8 = 20% reduction)
  userPsyche      UserPsyche?
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json[] // Array of LangChain message objects
  updatedAt   DateTime  @updatedAt
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

// =============================================================
// Klepsydra Engine & Chaos Card Models
// =============================================================

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulsePhase {
  CREST // Luck is high
  TROUGH // Luck is low
  EQUILIBRIUM // Luck is baseline
}

enum PulseInteractionType {
    WIN
    LOSS
}

model ChaosCard {
    id              String          @id @default(cuid())
    key             String          @unique // e.g., 'GEOLOGIC_TIME'
    name            String
    description     String
    cardClass       ChaosCardClass
    cost            Int
    systemEffect    String
}

model ActiveSystemEffect {
    id              String          @id @default(cuid())
    workspaceId     String
    workspace       Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    cardKey         String
    createdAt       DateTime        @default(now())
    expiresAt       DateTime
}

model PulseProfile {
    id                      String     @id @default(cuid())
    userId                  String     @unique
    user                    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    lastEventTimestamp      DateTime   @default(now())
    consecutiveLosses       Int        @default(0)
    
    // Configurable pulse wave parameters
    baselineLuck            Float      @default(0.4) // The center of the luck wave
    amplitude               Float      @default(0.15) // How high/low the wave goes
    frequency               Float      @default(0.01) // How fast the wave oscillates
    phaseOffset             Float      @default(0) // Unique start point for each user's wave

    // Dynamic psychological state (0.0 to 1.0)
    frustration             Float      @default(0)
    flowState               Float      @default(0)
    riskAversion            Float      @default(0.5)
    
    // Status tracking for stateful boons/buffs
    nextTributeGuaranteedWin Boolean?
    hadesBargainActive      Boolean?
    loadedDieBuffCount      Int?

    // For analytics and display
    lastResolvedPhase       PulsePhase?
    lastInteractionType     PulseInteractionType?
}

// For the Nudge Engine
model InstrumentDiscovery {
    id              String @id @default(cuid())
    userId          String
    user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspaceId     String
    workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    instrumentId    String // The ID of the MicroApp or ChaosCard from the manifest
    firstViewedAt   DateTime @default(now())
    nudgeSentAt     DateTime?
    converted       Boolean @default(false)
    dtt             Int? // Discovery-to-Tribute time in minutes

    @@unique([userId, instrumentId])
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}
