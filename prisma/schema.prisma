
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  firstName     String?
  lastName      String?
  password      String?
  lastLoginAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  ownedWorkspace Workspace? @relation("WorkspaceOwner")
  workspaces    Workspace[] @relation("WorkspaceMembers")
}

model Workspace {
  id                String       @id @default(cuid())
  name              String
  planTier          String       @default("Apprentice")
  agentActionsUsed  Int          @default(0)
  overageEnabled    Boolean      @default(false)
  ownerId           String       @unique
  owner             User         @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members           User[]       @relation("WorkspaceMembers")
  contacts          Contact[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  agents            Agent[]
  integrations      Integration[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SecurityAlert {
  id                String             @id @default(cuid())
  workspaceId       String
  workspace         Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime
  actionableOptions String[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime  @default(now())
}

model Workflow {
  id           String        @id @default(cuid())
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  definition   Json
  runs         WorkflowRun[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  startedAt      DateTime
  finishedAt     DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model Agent {
  id                  String      @id @default(cuid())
  workspaceId         String
  workspace           Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name                String
  type                String
  description         String?
  status              AgentStatus
  lastActivityAt      DateTime?
  assignedWorkflowId  String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Integration {
    id                      String @id @default(cuid())
    workspaceId             String
    workspace               Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    integrationManifestId   String // This is the UUID from the manifest file
    name                    String
    status                  String
    configDetails           Json
    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt
}
