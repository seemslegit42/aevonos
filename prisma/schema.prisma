// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  password              String
  firstName             String?
  lastName              String?
  role                  UserRole              @default(OPERATOR)
  agentAlias            String?
  psyche                UserPsyche
  foundingVow           String?
  foundingGoal          String?
  lastLoginAt           DateTime?
  ownedWorkspaces       Workspace[]           @relation("WorkspaceOwner")
  workspaces            Workspace[]           @relation("WorkspaceMembers")
  transactions          Transaction[]
  ownedChaosCards       ChaosCard[]
  instrumentDiscoveries InstrumentDiscovery[]
  pulseProfile          PulseProfile?
  conversation          Conversation?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model Workspace {
  id                      String                 @id @default(cuid())
  name                    String
  ownerId                 String
  owner                   User                   @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  planTier                PlanTier               @default(Apprentice)
  credits                 Decimal                @default(0.0)
  agentActionsUsed        Int                    @default(0)
  overageEnabled          Boolean                @default(true)
  unlockedAppIds          String[]               @default([])
  reclamationGraceUntil   DateTime?
  members                 User[]                 @relation("WorkspaceMembers")
  agents                  Agent[]
  securityAlerts          SecurityAlert[]
  contacts                Contact[]
  transactions            Transaction[]
  workflows               Workflow[]
  workflowRuns            WorkflowRun[]
  integrations            Integration[]
  threatFeeds             ThreatFeed[]
  instrumentDiscoveries   InstrumentDiscovery[]
  activeSystemEffects     ActiveSystemEffect[]
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
}

model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus
  configuration Json?
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ChaosCard {
  id           String         @id @default(cuid())
  key          String         @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  owners       User[]
}

model Transaction {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  userId         String?
  user           User?             @relation(fields: [userId], references: [id])
  type           TransactionType
  amount         Decimal
  description    String
  status         TransactionStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  instrumentId   String?
  luckWeight     Float?
  outcome        String?
  boonAmount     Decimal?
  userPsyche     UserPsyche?
}

model InstrumentDiscovery {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId   String
  firstViewedAt  DateTime  @default(now())
  converted      Boolean   @default(false)
  dtt            Int? // minutes
  nudgeSentAt    DateTime?

  @@unique([userId, instrumentId])
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  cardKey     String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
}

model PulseProfile {
  id                 String     @id @default(cuid())
  userId             String     @unique
  user               User       @relation(fields: [userId], references: [id])
  baselineLuck       Float
  amplitude          Float      @default(0.1)
  frequency          Float      @default(0.05)
  phaseOffset        Float
  consecutiveLosses  Int        @default(0)
  lastEventTimestamp DateTime   @default(now())
  lastResolvedPhase  PulsePhase @default(EQUILIBRIUM)
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  workspaceId String
  messages    Json
  updatedAt   DateTime @updatedAt
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  definition   Json
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  runs         WorkflowRun[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  integrationManifestId String
  name                  String
  status                IntegrationStatus
  configDetails         Json
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
}


// ENUMS
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum IntegrationStatus {
  active
  inactive
  error
}
