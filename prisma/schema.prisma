// This is the main Prisma schema file,
// defining the database schema and models for the application.

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
}

// ==========================================
// Enums
// ==========================================

enum UserRole {
  ADMIN
  MEMBER
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum WorkflowTriggerType {
  api
  schedule
  event
}

// ==========================================
// Models
// ==========================================

model User {
  id              String      @id @default(cuid())
  email           String      @unique
  password        String
  firstName       String?
  lastName        String?
  role            UserRole    @default(MEMBER)
  lastLoginAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  ownedWorkspace  Workspace?  @relation("Owner")
  workspaces      Workspace[] @relation("Members")
  transactions    Transaction[]
}

model Workspace {
  id              String      @id @default(cuid())
  name            String
  ownerId         String
  owner           User        @relation("Owner", fields: [ownerId], references: [id])
  members         User[]      @relation("Members")
  planTier        PlanTier    @default(Artisan)
  credits         Decimal     @default(0.0)
  agentActionsUsed Int        @default(0)
  overageEnabled  Boolean     @default(true)
  unlockedAppIds  String[]    @default([])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  agents          Agent[]
  contacts        Contact[]
  securityAlerts  SecurityAlert[]
  threatFeeds     ThreatFeed[]
  transactions    Transaction[]
  workflows       Workflow[]
  workflowRuns    WorkflowRun[]
  integrations    Integration[]

  @@index([ownerId])
}

model Agent {
  id              String      @id @default(cuid())
  name            String
  type            String
  description     String?
  status          AgentStatus
  workspaceId     String
  workspace       Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  lastActivityAt  DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  transactions    Transaction[]
  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Contact {
  id              String    @id @default(cuid())
  firstName       String?
  lastName        String?
  email           String?
  phone           String?
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([workspaceId])
  @@index([email])
}

model Transaction {
  id              String          @id @default(cuid())
  workspaceId     String
  workspace       Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus @default(COMPLETED)
  userId          String?
  user            User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  agentId         String?
  agent           Agent?          @relation(fields: [agentId], references: [id], onDelete: SetNull)
  createdAt       DateTime        @default(now())

  @@index([workspaceId])
}

model Workflow {
  id            String            @id @default(cuid())
  name          String
  isActive      Boolean           @default(true)
  triggerType   WorkflowTriggerType @default(api)
  definition    Json
  workspaceId   String
  workspace     Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs          WorkflowRun[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([workspaceId])
}

model WorkflowRun {
  id              String            @id @default(cuid())
  workflowId      String
  workflow        Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status          WorkflowRunStatus
  triggerPayload  Json?
  output          Json?
  log             Json?
  startedAt       DateTime
  finishedAt      DateTime?

  @@index([workflowId])
  @@index([workspaceId])
}

model ThreatFeed {
  id            String      @id @default(cuid())
  url           String
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())

  @@index([workspaceId])
}

model Integration {
  id                    String    @id @default(cuid())
  workspaceId           String
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String    // Links to the static manifest ID
  name                  String
  status                String    // e.g., "active", "inactive", "error"
  configDetails         Json
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([workspaceId])
}
