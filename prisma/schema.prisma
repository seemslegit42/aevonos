
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  // Add multiple binary targets to ensure compatibility across different
  // Linux environments, especially those with different OpenSSL versions.
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

// AUTHENTICATION & TENANCY
model User {
  id                      String      @id @default(cuid())
  email                   String      @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole    @default(OPERATOR)
  psyche                  UserPsyche  @default(ZEN_ARCHITECT)
  agentAlias              String?     @default("BEEP")
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?

  // Vow and Psyche Engine
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Float?
  foundingBenediction     String?
  firstWhisper            String?
  
  // Relations
  workspaces              Workspace[] @relation("WorkspaceMembers")
  ownedWorkspace          Workspace?  @relation("WorkspaceOwner")
  transactions            Transaction[]
  contributions           Contribution[]
  pulseProfile            PulseProfile?
  conversation            Conversation?
  discoveries             InstrumentDiscovery[]

  // Economy & Unlocks
  unlockedChaosCardKeys   String[]
}

model Workspace {
  id                String    @id @default(cuid())
  name              String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Owner
  ownerId           String
  owner             User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  
  // Members
  members           User[]    @relation("WorkspaceMembers")

  // Economy
  planTier          PlanTier  @default(Apprentice)
  credits           Decimal   @default(0.0)
  agentActionsUsed  Int       @default(0)
  overageEnabled    Boolean   @default(true)
  
  // Relations
  agents            Agent[]
  contacts          Contact[]
  securityAlerts    SecurityAlert[]
  transactions      Transaction[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  integrations      Integration[]
  threatFeeds       ThreatFeed[]
  conversations     Conversation[]
  discoveries       InstrumentDiscovery[]
  activeEffects     ActiveSystemEffect[]

  // Unlocks
  unlockedAppIds    String[]
}

// AGENTS & WORKFLOWS
model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Workflow {
  id            String          @id @default(cuid())
  name          String
  isActive      Boolean         @default(true)
  triggerType   String          @default("api")
  definition    Json
  workspaceId   String
  workspace     Workspace       @relation(fields: [workspaceId], references: [id])
  runs          WorkflowRun[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model WorkflowRun {
  id              String            @id @default(cuid())
  workflowId      String
  workflow        Workflow          @relation(fields: [workflowId], references: [id])
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id])
  status          WorkflowRunStatus @default(pending)
  triggerPayload  Json?
  output          Json?
  log             Json?
  startedAt       DateTime          @default(now())
  finishedAt      DateTime?
}

// CRM
model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, email])
}

// SECURITY (AEGIS)
model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  userId            String?
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
}

// ECONOMY (OBELISK & KLEPSYDRA)
model Transaction {
  id              String          @id @default(cuid())
  workspaceId     String
  workspace       Workspace       @relation(fields: [workspaceId], references: [id])
  userId          String?
  user            User?           @relation(fields: [userId], references: [id])
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus @default(COMPLETED)
  createdAt       DateTime        @default(now())

  // For Tributes
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?
  boonAmount      Decimal?
  judasFactor     Decimal?
  userPsyche      UserPsyche?
}

model PulseProfile {
  id                    String        @id @default(cuid())
  userId                String        @unique
  user                  User          @relation(fields: [userId], references: [id])
  
  // Sine-Rhythm Engine
  baselineLuck          Float         @default(0.4)
  amplitude             Float         @default(0.15)
  frequency             Float         @default(0.01)
  phaseOffset           Float
  
  // State Trackers
  lastEventTimestamp    DateTime      @default(now())
  consecutiveLosses     Int           @default(0)
  lastResolvedPhase     PulsePhase    @default(EQUILIBRIUM)
  lastInteractionType   PulseInteractionType @default(COMMAND_SUCCESS)
  
  // Psychological State
  frustration           Float         @default(0.0)
  flowState             Float         @default(0.0)
  riskAversion          Float         @default(0.3)

  // Buffs
  loadedDieBuffCount      Int?          @default(0)
  nextTributeGuaranteedWin Boolean?     @default(false)
  hadesBargainActive       Boolean?     @default(false)
}

model ChaosCard {
  id           String        @id @default(cuid())
  key          String        @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
}

model InstrumentDiscovery {
    id              String    @id @default(cuid())
    userId          String
    user            User      @relation(fields: [userId], references: [id])
    workspaceId     String
    workspace       Workspace @relation(fields: [workspaceId], references: [id])
    instrumentId    String
    firstViewedAt   DateTime  @default(now())
    converted       Boolean   @default(false)
    dtt             Int? // Discovery-to-Tribute time in minutes
    nudgeSentAt     DateTime?

    @@unique([userId, instrumentId])
}

model ActiveSystemEffect {
    id          String    @id @default(cuid())
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    cardKey     String
    createdAt   DateTime  @default(now())
    expiresAt   DateTime
}

model GlobalAgenticEvent {
    id                  String        @id @default(cuid())
    eventName           String
    status              EventStatus   @default(ACTIVE)
    poolTarget          Decimal
    currentPool         Decimal       @default(0)
    createdAt           DateTime      @default(now())
    expiresAt           DateTime
    winningWorkspaceId  String?
    shardReward         String?
    contributions       Contribution[]
}

model Contribution {
    id          String              @id @default(cuid())
    amount      Decimal
    createdAt   DateTime            @default(now())
    eventId     String
    event       GlobalAgenticEvent  @relation(fields: [eventId], references: [id])
    workspaceId String
    userId      String
    user        User                @relation(fields: [userId], references: [id])
}

// UTILITY & INTEGRATIONS
model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Json     
  updatedAt   DateTime @updatedAt
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  integrationManifestId String
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

// ENUMS

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
    pending
    running
    completed
    failed
    paused
}

enum PulsePhase {
    CREST
    TROUGH
    EQUILIBRIUM
}

enum PulseInteractionType {
    WIN
    LOSS
    COMMAND_SUCCESS
    COMMAND_FAILURE
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum EventStatus {
  ACTIVE
  CONCLUDED
}
