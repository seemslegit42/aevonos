
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole                @default(OPERATOR)
  agentAlias              String?
  psyche                  UserPsyche              @default(ZEN_ARCHITECT)
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  workspaces              Workspace[]             @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]             @relation("WorkspaceOwner")
  transactions            Transaction[]
  conversations           Conversation[]
  pulseProfile            PulseProfile?
  ownedChaosCards         ChaosCard[]
  instrumentDiscoveries   InstrumentDiscovery[]
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

model Workspace {
  id                    String                @id @default(cuid())
  name                  String
  ownerId               String
  owner                 User                  @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  planTier              PlanTier              @default(Apprentice)
  credits               Decimal               @default(0.0)
  agentActionsUsed      Int                   @default(0)
  overageEnabled        Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  unlockedAppIds        String[]              @default([])
  reclamationGraceUntil DateTime?
  members               User[]                @relation("WorkspaceMembers")
  agents                Agent[]
  contacts              Contact[]
  securityAlerts        SecurityAlert[]
  threatFeeds           ThreatFeed[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  transactions          Transaction[]
  conversations         Conversation[]
  integrations          Integration[]
  activeSystemEffects   ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

model Agent {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  type        String // e.g., 'text-generation', 'data-analysis'
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

model Workflow {
  id           String        @id @default(cuid())
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api") // 'api', 'schedule', 'event'
  definition   Json
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  runs         WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  triggerPayload Json?
  log            Json?
  output         Json?
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime  @default(now())
}

model Transaction {
  id             String          @id @default(cuid())
  workspaceId    String
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?           @relation(fields: [userId], references: [id])
  agentId        String?
  type           TransactionType
  amount         Decimal
  description    String
  status         TransactionStatus @default(COMPLETED)
  createdAt      DateTime        @default(now())
  // Fields for Folly Instrument tributes
  instrumentId   String?
  luckWeight     Float?
  outcome        String?
  boonAmount     Decimal?
  userPsyche     UserPsyche?
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

enum IntegrationStatus {
  active
  inactive
  error
}

model PulseProfile {
  id                 String     @id @default(cuid())
  userId             String     @unique
  user               User       @relation(fields: [userId], references: [id])
  baselineLuck       Float      @default(0.5)
  luckWeight         Float      @default(1.0)
  amplitude          Float      @default(0.2)
  frequency          Float      @default(0.00347) // ~1 cycle per 4.8 hours
  phaseOffset        Float      @default(0)
  lastEventTimestamp DateTime   @default(now())
  consecutiveLosses  Int        @default(0)
  lastResolvedPhase  PulsePhase @default(EQUILIBRIUM)
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

model ChaosCard {
  id           String   @id @default(cuid())
  key          String   @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  owners       User[]
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  cardKey     String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
}

model InstrumentDiscovery {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId   String // ID of the MicroApp or ChaosCard
  firstViewedAt  DateTime  @default(now())
  converted      Boolean   @default(false)
  dtt            Int? // Discovery-to-Tribute time in minutes
  nudgeSentAt    DateTime?

  @@unique([userId, instrumentId])
}
