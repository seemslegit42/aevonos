
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  password      String?
  firstName     String?
  lastName      String?
  lastLoginAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  ownedWorkspace   Workspace? @relation("Owner")
  workspaces       Workspace[] @relation("Members")
}

model Workspace {
  id               String       @id @default(cuid())
  name             String
  planTier         String       @default("free")
  agentActionsUsed Int          @default(0)
  overageEnabled   Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  owner            User         @relation("Owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId          String       @unique
  
  members          User[]       @relation("Members")
  contacts         Contact[]
  workflows        Workflow[]
  workflowRuns     WorkflowRun[]
  agents           Agent[]
  integrations     Integration[]
  threatFeeds      ThreatFeed[]
  securityAlerts   SecurityAlert[]
}

model Contact {
  id          String   @id @default(cuid())
  email       String?  @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model Workflow {
  id           String          @id @default(cuid())
  name         String
  isActive     Boolean         @default(true)
  triggerType  String          @default("api")
  definition   Json
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
  workspace    Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String
  runs         WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId    String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId     String
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model Agent {
  id                 String      @id @default(cuid())
  name               String
  type               String
  description        String?
  status             AgentStatus
  assignedWorkflowId String?
  lastActivityAt     DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  
  workspace          Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId        String
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Integration {
  id                  String   @id @default(cuid())
  name                String
  status              String
  configDetails       Json
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  workspace           Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId         String
  integrationManifestId String // This links to the static manifest ID
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  createdAt   DateTime  @default(now())
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]

  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId       String
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}
