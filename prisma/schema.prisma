
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole               @default(OPERATOR)
  agentAlias              String?
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  lastLoginAt             DateTime?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspace          Workspace?             @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  unlockedChaosCardKeys   String[]               @default([])
  discoveries             InstrumentDiscovery[]
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Int?
  firstWhisper            String?
  reclamationGraceUntil   DateTime?
  Conversation            Conversation?
}

model Workspace {
  id                 String              @id @default(cuid())
  name               String
  ownerId            String              @unique
  owner              User                @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members            User[]              @relation("WorkspaceMembers")
  planTier           PlanTier            @default(Apprentice)
  credits            Decimal             @default(0)
  agentActionsUsed   Int                 @default(0)
  overageEnabled     Boolean             @default(false)
  unlockedAppIds     String[]            @default([])
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  agents             Agent[]
  contacts           Contact[]
  securityAlerts     SecurityAlert[]
  workflows          Workflow[]
  workflowRuns       WorkflowRun[]
  transactions       Transaction[]
  integrations       Integration[]
  threatFeeds        ThreatFeed[]
  discoveries        InstrumentDiscovery[]
  activeSystemEffect ActiveSystemEffect?
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
}

model Workflow {
  id            String         @id @default(cuid())
  name          String
  definition    Json
  isActive      Boolean        @default(true)
  triggerType   String         @default("api") // e.g., 'api', 'schedule', 'event'
  workspace     Workspace      @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  runs          WorkflowRun[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workflowId     String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json
  output         Json?
  log            Json[]
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Transaction {
  id                String           @id @default(cuid())
  workspace         Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  user              User?            @relation(fields: [userId], references: [id])
  userId            String?
  type              TransactionType
  amount            Decimal
  description       String
  status            TransactionStatus @default(COMPLETED)
  createdAt         DateTime         @default(now())
  
  // Fields for Folly Instruments
  instrumentId      String?
  luckWeight        Float?
  outcome           String?
  boonAmount        Decimal?
  tributeAmount     Decimal?
  judasFactor       Decimal?
  userPsyche        UserPsyche?
}

model Integration {
    id                      String   @id @default(cuid())
    workspaceId             String
    workspace               Workspace @relation(fields: [workspaceId], references: [id])
    integrationManifestId   String // The UUID of the manifest
    name                    String // User-defined instance name
    status                  IntegrationStatus @default(active)
    configDetails           Json // Encrypted credentials
    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt
}

model ThreatFeed {
    id          String      @id @default(cuid())
    url         String
    workspaceId String
    workspace   Workspace   @relation(fields: [workspaceId], references: [id])
    createdAt   DateTime    @default(now())
}

model PulseProfile {
    id                       String  @id @default(cuid())
    userId                   String  @unique
    user                     User    @relation(fields: [userId], references: [id])
    baselineLuck             Float   @default(0.4)
    amplitude                Float   @default(0.15)
    frequency                Float   @default(0.01)
    phaseOffset              Float
    consecutiveLosses        Int     @default(0)
    lastEventTimestamp       DateTime @default(now())
    lastResolvedPhase        PulsePhase @default(EQUILIBRIUM)
    frustration              Float   @default(0)
    flowState                Float   @default(0)
    riskAversion             Float   @default(0.3)
    nextTributeGuaranteedWin Boolean @default(false)
    loadedDieBuffCount       Int     @default(0)
    hadesBargainActive       Boolean @default(false)
    lastInteractionType      PulseInteractionType?
}

model ChaosCard {
    key             String          @id // e.g., GEOLOGIC_TIME
    name            String
    description     String
    cardClass       ChaosCardClass
    cost            Int
    systemEffect    String
}

model InstrumentDiscovery {
    id              String      @id @default(cuid())
    userId          String
    user            User        @relation(fields: [userId], references: [id])
    workspaceId     String
    workspace       Workspace   @relation(fields: [workspaceId], references: [id])
    instrumentId    String      // Key of the Chaos Card or Micro-App
    firstViewedAt   DateTime    @default(now())
    converted       Boolean     @default(false)
    dtt             Int?        // Discovery-to-tribute time in minutes
    nudgeSentAt     DateTime?
}

model ActiveSystemEffect {
    id              String      @id @default(cuid())
    workspaceId     String      @unique
    workspace       Workspace   @relation(fields: [workspaceId], references: [id])
    cardKey         String
    expiresAt       DateTime
    createdAt       DateTime    @default(now())
}

model Conversation {
    id          String      @id @default(cuid())
    userId      String      @unique
    user        User        @relation(fields: [userId], references: [id])
    workspaceId String
    messages    Json[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
    CREDIT
    DEBIT
    TRIBUTE
}

enum TransactionStatus {
    PENDING
    COMPLETED
    FAILED
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
}
