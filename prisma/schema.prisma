// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}

model User {
  id                  String       @id @default(cuid())
  firstName           String?
  lastName            String?
  email               String       @unique
  emailVerified       DateTime?
  password            String?
  image               String?
  role                UserRole     @default(OPERATOR)
  accounts            Account[]
  sessions            Session[]
  workspaces          Workspace[]  @relation("WorkspaceMembers")
  ownedWorkspace      Workspace?   @relation("WorkspaceOwner")
  transactions        Transaction[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  lastLoginAt         DateTime?
  conversations       Conversation[]
  ownedChaosCards     ChaosCard[]  @relation("UserOwnedChaosCards")
  instrumentDiscovery InstrumentDiscovery[]

  // Rite of Invocation
  psyche                UserPsyche @default(ZEN_ARCHITECT)
  agentAlias            String?
  foundingVow           String? // "What must end so you can begin?"
  foundingGoal          String? // "Tell me what you're building."
  corePainIndex         Int? // 0-100
  foundingBenediction   String?
  firstWhisper          String?

  // Profile data for personalization
  pulseProfile        PulseProfile?

  // Reclamation Protocol
  reclamationGraceUntil DateTime?
}

model Workspace {
  id              String         @id @default(cuid())
  name            String
  ownerId         String         @unique
  owner           User           @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members         User[]         @relation("WorkspaceMembers")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  planTier        PlanTier       @default(Apprentice)
  credits         Decimal        @default(100.0)
  overageEnabled  Boolean        @default(true)
  agentActionsUsed Int           @default(0) // Counter for actions within current billing cycle
  unlockedAppIds  String[]       @default([]) // List of unlocked Micro-App IDs from the Armory

  // Relations
  contacts        Contact[]
  agents          Agent[]
  workflows       Workflow[]
  workflowRuns    WorkflowRun[]
  securityAlerts  SecurityAlert[]
  threatFeeds     ThreatFeed[]
  transactions    Transaction[]
  conversations   Conversation[]
  activeSystemEffects ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]

  @@index([ownerId])
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, email])
  @@index([workspaceId])
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Agent {
  id            String      @id @default(cuid())
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name          String
  type          String // e.g., 'winston-wolfe', 'kif-kroker'
  description   String?
  status        AgentStatus @default(idle)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  transactions  Transaction[]

  @@index([workspaceId])
}

model Workflow {
  id            String      @id @default(cuid())
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name          String
  isActive      Boolean     @default(true)
  triggerType   String      @default("api") // e.g., 'api', 'schedule', 'event'
  definition    Json // The graph structure of the workflow
  runs          WorkflowRun[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([workspaceId])
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model WorkflowRun {
  id              String            @id @default(cuid())
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId      String
  workflow        Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  status          WorkflowRunStatus @default(pending)
  startedAt       DateTime
  finishedAt      DateTime?
  triggerPayload  Json?
  output          Json?
  log             Json?

  @@index([workflowId])
  @@index([workspaceId])
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type              String // e.g., 'Anomalous Login', 'Suspicious Command'
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Transaction {
  id            String            @id @default(cuid())
  workspaceId   String
  workspace     Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId        String?
  user          User?             @relation(fields: [userId], references: [id], onDelete:SetNull)
  agentId       String?
  agent         Agent?            @relation(fields: [agentId], references: [id], onDelete:SetNull)
  instrumentId  String?           // Can be a Micro-App ID, Chaos Card key, etc.
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  amount        Decimal
  description   String
  createdAt     DateTime          @default(now())

  // Fields for Klepsydra Engine Tributes
  luckWeight    Float?
  outcome       String?
  tributeAmount Decimal?
  boonAmount    Decimal?
  judasFactor   Decimal?
  userPsyche    UserPsyche?

  @@index([workspaceId])
  @@index([userId])
}

model Conversation {
    id String @id @default(cuid())
    userId String @unique
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    messages Json[] // Array of serialized LangChain BaseMessage objects
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([workspaceId, userId])
}

model PulseProfile {
  id                  String    @id @default(cuid())
  userId              String    @unique
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  baselineLuck        Float     @default(0.4)
  amplitude           Float     @default(0.15)
  frequency           Float     @default(0.01) // cycles per minute
  phaseOffset         Float     @default(0)
  consecutiveLosses   Int       @default(0)
  lastEventTimestamp  DateTime  @default(now()) @updatedAt
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)
  loadedDieBuffCount  Int       @default(0)
  nextTributeGuaranteedWin Boolean @default(false)
  hadesBargainActive  Boolean @default(false)

  // Dynamic Psychological State
  frustration         Float     @default(0) // 0 to 1
  flowState           Float     @default(0) // 0 to 1
  riskAversion        Float     @default(0.5) // 0 to 1
  lastInteractionType PulseInteractionType?

  @@index([userId])
}

model ChaosCard {
  id              String      @id @default(cuid())
  key             String      @unique // e.g., "GEOLOGIC_TIME"
  name            String
  description     String
  cardClass       ChaosCardClass
  cost            Int
  systemEffect    String
  owners          User[]      @relation("UserOwnedChaosCards")
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
}

// Model to track which temporary system-wide effects are active
model ActiveSystemEffect {
    id          String    @id @default(cuid())
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    cardKey     String    // The key of the Chaos Card or other source that triggered the effect
    expiresAt   DateTime
    createdAt   DateTime  @default(now())

    @@index([workspaceId])
}

model InstrumentDiscovery {
    id              String @id @default(cuid())
    userId          String
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspaceId     String
    workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    instrumentId    String // The ID of the Micro-App or Chaos Card
    firstViewedAt   DateTime @default(now())
    converted       Boolean @default(false)
    dtt             Int? // Discovery-to-Tribute time in minutes
    nudgeSentAt     DateTime?

    @@unique([userId, instrumentId])
}

model Integration {
    id                      String      @id @default(cuid())
    workspaceId             String
    workspace               Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    integrationManifestId   String      // The UUID from the static manifest
    name                    String
    status                  IntegrationStatus @default(active)
    configDetails           Json        // Encrypted credentials and settings
    createdAt               DateTime    @default(now())
    updatedAt               DateTime    @updatedAt

    @@index([workspaceId])
}

enum IntegrationStatus {
  active
  paused
  error
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

      