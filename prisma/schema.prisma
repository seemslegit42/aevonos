// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum EventStatus {
  ACTIVE
  CONCLUDED
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole                @default(OPERATOR)
  psyche                  UserPsyche              @default(ZEN_ARCHITECT)
  agentAlias              String?                 @default("BEEP")
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  lastLoginAt             DateTime?
  corePainIndex           Float?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  reclamationGraceUntil   DateTime?
  unlockedChaosCardKeys   String[]                @default([]) @map("unlocked_chaos_card_keys")

  workspaces              Workspace[]             @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]             @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  conversation            Conversation?
  discoveries             InstrumentDiscovery[]
  contributions           Contribution[]
}

model Workspace {
  id                      String                  @id @default(cuid())
  name                    String
  ownerId                 String
  owner                   User                    @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  planTier                PlanTier                @default(Apprentice)
  credits                 Decimal                 @default(0.0)
  agentActionsUsed        Int                     @default(0) @map("agent_actions_used")
  overageEnabled          Boolean                 @default(false) @map("overage_enabled")
  unlockedAppIds          String[]                @default([]) @map("unlocked_app_ids")
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  members                 User[]                  @relation("WorkspaceMembers")
  agents                  Agent[]
  contacts                Contact[]
  securityAlerts          SecurityAlert[]
  transactions            Transaction[]
  workflows               Workflow[]
  workflowRuns            WorkflowRun[]
  integrations            Integration[]
  discoveries             InstrumentDiscovery[]
  activeEffects           ActiveSystemEffect[]
  threatFeeds             ThreatFeed[]
  conversations           Conversation[]
  contributions           Contribution[]
  winningEvents           GlobalAgenticEvent[]
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, email])
}

model Agent {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  actionableOptions String[]
  timestamp         DateTime          @default(now())
}

model Transaction {
  id            String             @id @default(cuid())
  workspaceId   String
  workspace     Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId        String?
  user          User?              @relation(fields: [userId], references: [id])
  type          TransactionType
  amount        Decimal
  description   String
  status        TransactionStatus  @default(PENDING)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  instrumentId  String?
  luckWeight    Float?
  outcome       String?
  boonAmount    Decimal?
  tributeAmount Decimal?
  judasFactor   Decimal?
  userPsyche    UserPsyche?
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json      @default("[]")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PulseProfile {
  id                       String               @id @default(cuid())
  userId                   String               @unique
  user                     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  baselineLuck             Float                @default(0.4)
  amplitude                Float                @default(0.15)
  frequency                Float                @default(0.01)
  phaseOffset              Float
  lastEventTimestamp       DateTime             @default(now())
  consecutiveLosses        Int                  @default(0)
  lastResolvedPhase        PulsePhase           @default(EQUILIBRIUM)
  lastInteractionType      PulseInteractionType?
  frustration              Float                @default(0.0)
  flowState                Float                @default(0.0)
  riskAversion             Float                @default(0.0)
  loadedDieBuffCount       Int                  @default(0)
  nextTributeGuaranteedWin Boolean              @default(false)
  hadesBargainActive       Boolean              @default(false)
}

model Workflow {
  id          String        @id @default(cuid())
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  isActive    Boolean       @default(true)
  triggerType String        @default("api")
  definition  Json
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  runs        WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String            @map("integration_manifest_id")
  name                  String
  status                IntegrationStatus @default(inactive)
  configDetails         Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime  @default(now())
}

model ChaosCard {
  key          String         @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId  String
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false)
  dtt           Int?      @map("discovery_to_tribute_minutes")
  nudgeSentAt   DateTime?
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
}

model GlobalAgenticEvent {
  id                   String       @id @default(cuid())
  eventName            String       @map("event_name")
  status               EventStatus  @default(ACTIVE)
  poolTarget           Decimal      @map("pool_target")
  currentPool          Decimal      @default(0.0) @map("current_pool")
  expiresAt            DateTime     @map("expires_at")
  shardReward          String       @map("shard_reward")
  winningWorkspaceId   String?      @unique
  winningWorkspace     Workspace?   @relation(fields: [winningWorkspaceId], references: [id])
  contributions        Contribution[]
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  createdAt   DateTime           @default(now())
}
