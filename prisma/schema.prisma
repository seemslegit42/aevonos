
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator accelerate {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------
// Enums
// -------------------

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

// -------------------
// Models
// -------------------

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaces      Workspace[] @relation("WorkspaceMembers")
}

model Workspace {
  id               String    @id @default(cuid())
  name             String
  planTier         PlanTier  @default(Apprentice)
  agentActionsUsed Int       @default(0)
  overageEnabled   Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  ownerId String
  owner   User   @relation("WorkspaceOwner", fields: [ownerId], references: [id])

  members User[] @relation("WorkspaceMembers")

  contacts       Contact[]
  securityAlerts SecurityAlert[]
  threatFeeds    ThreatFeed[]
  workflows      Workflow[]
  workflowRuns   WorkflowRun[]
  agents         Agent[]
  integrations   Integration[]

  @@index([ownerId])
}

model Contact {
  id          String    @id @default(cuid())
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime
  actionableOptions String[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Workflow {
  id          String   @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean  @default(true)
  triggerType String   @default("api") // e.g., 'api', 'schedule', 'event'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  runs WorkflowRun[]

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  startedAt      DateTime
  finishedAt     DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([workflowId])
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String // Maps to MicroAppType
  description String?
  status      AgentStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Integration {
  id                    String   @id @default(cuid())
  name                  String
  status                String // active, inactive, error
  configDetails         Json?
  integrationManifestId String // Corresponds to ID in config/integration-manifests.ts
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}
