// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // For Prisma Accelerate, you'd also need a direct URL.
  // directUrl = env("DIRECT_DATABASE_URL")
}

// In a multi-tenant application, Workspace would often represent a Tenant.
model Workspace {
  id                Int           @id @default(autoincrement())
  uuid              String        @unique @default(uuid())
  name              String
  planTier          String        @default("Artisan")
  agentActionsUsed  Int           @default(0)
  overageEnabled    Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  contacts          Contact[]
}

model Workflow {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  name        String
  definition  Json
  isActive    Boolean  @default(true)
  triggerType String   @default("api") // api, schedule, event
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  runs        WorkflowRun[]
}

model WorkflowRun {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid())
  status      String    // pending, running, completed, failed, paused
  triggerPayload Json?
  output      Json?
  startedAt   DateTime  @default(now())
  finishedAt  DateTime?
  
  workflowId  Int
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([workspaceId])
}

model Contact {
  id        String   @id @default(cuid())
  email     String?  @unique
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  workspaceId Int?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
}
