// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String      @id @default(cuid())
  email     String      @unique
  password  String
  firstName String?
  lastName  String?
  role      UserRole    @default(OPERATOR)
  rank      UserRank    @default(NEOPHYTE)
  xp        Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  lastLoginAt DateTime?
  
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaces      Workspace[] @relation("WorkspaceMembers")
  transactions    Transaction[]
  accolades       Accolade[]
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserRank {
  NEOPHYTE
  ARCHITECT
  FORGE_PRIEST
  DEMIURGE
}

model Accolade {
  id          String @id @default(cuid())
  key         String @unique
  name        String
  description String
  xpValue     Int
  users       User[]
}

model Workspace {
  id                String        @id @default(cuid())
  name              String
  ownerId           String
  owner             User          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members           User[]        @relation("WorkspaceMembers")
  planTier          PlanTier      @default(Apprentice)
  credits           Decimal       @default(0.0) @db.Decimal(10, 2)
  agentActionsUsed  Int           @default(0)
  overageEnabled    Boolean       @default(true)
  unlockedAppIds    String[]      @default([])
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  agents        Agent[]
  securityAlerts SecurityAlert[]
  contacts      Contact[]
  threatFeeds   ThreatFeed[]
  workflows     Workflow[]
  workflowRuns  WorkflowRun[]
  transactions  Transaction[]
  integrations  Integration[]
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  lastActivityAt DateTime?
  
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

model Contact {
  id                String    @id @default(cuid())
  workspaceId       String
  workspace         Workspace @relation(fields: [workspaceId], references: [id])
  
  email             String?
  firstName         String?
  lastName          String?
  phone             String?
  
  // JSONB for flexible custom fields
  customProperties  Json?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([workspaceId, email])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  createdAt   DateTime  @default(now())
}

model Workflow {
  id            String    @id @default(cuid())
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  
  name          String
  isActive      Boolean   @default(true)
  triggerType   String    // e.g., 'api', 'schedule', 'event'
  definition    Json      // LangGraph JSON definition
  
  runs          WorkflowRun[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model WorkflowRun {
  id              String            @id @default(cuid())
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id])
  
  workflowId      String
  workflow        Workflow          @relation(fields: [workflowId], references: [id])
  
  status          WorkflowRunStatus
  triggerPayload  Json?
  output          Json?
  log             Json?             @default("[]")
  
  startedAt       DateTime
  finishedAt      DateTime?
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model Transaction {
  id            String @id @default(cuid())
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  
  type          TransactionType
  amount        Decimal @db.Decimal(10, 2)
  description   String
  status        TransactionStatus
  
  userId        String? // User who initiated
  user          User?   @relation(fields: [userId], references: [id])

  agentId       String? // Agent that triggered the transaction (future use)
  
  createdAt     DateTime  @default(now())
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Integration {
  id                    String    @id @default(cuid())
  workspaceId           String
  workspace             Workspace @relation(fields: [workspaceId], references: [id])
  integrationManifestId String    // Link to the static manifest ID
  
  name                  String    // User-defined name, e.g. "Marketing Slack"
  status                String    // 'active', 'inactive', 'error'
  configDetails         Json      // Encrypted API keys, tokens, etc.
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}
