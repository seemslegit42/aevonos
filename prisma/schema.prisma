// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // For migrations without connection pooling
}

generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

// --- CORE TENANCY & USERS ---

model User {
  id                      String                @id @default(cuid())
  email                   String                @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole              @default(OPERATOR)
  agentAlias              String?
  psyche                  UserPsyche            @default(ZEN_ARCHITECT)
  foundingVow             String?               @db.Text
  foundingGoal            String?               @db.Text
  corePainIndex           Int?
  foundingBenediction     String?               @db.Text
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?

  ownedWorkspaces         Workspace[]           @relation("WorkspaceOwner")
  workspaces              Workspace[]           @relation("WorkspaceMembers")
  ownedChaosCards         ChaosCard[]
  pulseProfile            PulseProfile?
  transactions            Transaction[]
  conversations           Conversation[]
  instrumentDiscoveries   InstrumentDiscovery[]

  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
}

model Workspace {
  id                    String               @id @default(cuid())
  name                  String
  planTier              PlanTier             @default(Apprentice)
  credits               Decimal              @default(0.0)
  agentActionsUsed      Int                  @default(0)
  overageEnabled        Boolean              @default(false)
  unlockedAppIds        String[]

  ownerId               String
  owner                 User                 @relation("WorkspaceOwner", fields: [ownerId], references: [id])

  members               User[]               @relation("WorkspaceMembers")

  agents                Agent[]
  contacts              Contact[]
  transactions          Transaction[]
  securityAlerts        SecurityAlert[]
  threatFeeds           ThreatFeed[]
  activeSystemEffects   ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  integrations          Integration[]

  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  @@index([ownerId])
}

// --- AGENTS & WORKFLOWS ---

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)

  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([workspaceId])
}

model Workflow {
  id          String      @id @default(cuid())
  name        String
  definition  Json        @default("{}")
  isActive    Boolean     @default(true)
  triggerType String      @default("api")

  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  startedAt      DateTime
  finishedAt     DateTime?
  output         Json?
  log            Json?             @default("[]")

  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt      DateTime          @default(now())

  @@index([workflowId])
  @@index([workspaceId])
}

// --- CRM ---

model Contact {
  id        String    @id @default(cuid())
  email     String?   @unique
  firstName String?
  lastName  String?
  phone     String?

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

// --- SECURITY & AEGIS ---

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String            @db.Text
  riskLevel         SecurityRiskLevel
  timestamp         DateTime
  actionableOptions String[]

  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String    @unique
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

// --- BILLING & ECONOMY ---

model Transaction {
  id          String            @id @default(cuid())
  type        TransactionType
  amount      Decimal
  description String
  status      TransactionStatus @default(PENDING)

  workspaceId String
  workspace   Workspace         @relation(fields: [workspaceId], references: [id])

  userId      String?
  user        User?             @relation(fields: [userId], references: [id])

  // Optional metadata for tributes
  instrumentId String?
  luckWeight   Float?
  outcome      String?
  boonAmount   Decimal?
  userPsyche   UserPsyche?

  createdAt   DateTime          @default(now())

  @@index([workspaceId])
  @@index([userId])
}

// --- KLEPSYDRA ENGINE ---

model PulseProfile {
  id                  String     @id @default(cuid())
  userId              String     @unique
  user                User       @relation(fields: [userId], references: [id])

  baselineLuck        Float      @default(0.5)
  luckWeight          Float      @default(0.5) // The final calculated luck
  amplitude           Float      @default(0.15)
  frequency           Float      @default(0.01)
  phaseOffset         Float
  consecutiveLosses   Int        @default(0)
  lastEventTimestamp  DateTime   @default(now())
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)

  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model ChaosCard {
  id           String         @id @default(cuid())
  key          String         @unique // e.g., 'GEOLOGIC_TIME'
  name         String
  description  String         @db.Text
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String         @db.Text

  owners       User[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey     String
  expiresAt   DateTime

  createdAt   DateTime  @default(now())

  @@unique([workspaceId, cardKey])
}


// --- NUDGE ENGINE ---

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId  String // ID of the MicroApp or ChaosCard
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false)
  dtt           Int? // Discovery-to-Tribute time in minutes
  nudgeSentAt   DateTime?

  @@unique([userId, instrumentId])
}


// --- MISC UTILITIES ---

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  messages    Json     @default("[]")
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String // UUID from the static manifest
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json? // Encrypted API keys, etc.

  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([workspaceId])
}


// --- ENUMS ---

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}
