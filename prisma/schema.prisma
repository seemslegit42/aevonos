
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  adapter   = "neon"
  directUrl = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  password                String
  firstName               String?
  lastName                String?
  agentAlias              String                 @default("BEEP")
  role                    UserRole               @default(OPERATOR)
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  corePainIndex           Int?
  foundingVow             String?
  foundingGoal            String?
  firstWhisper            String?
  reclamationGraceUntil   DateTime?
  lastLoginAt             DateTime?              @updatedAt
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]            @relation("WorkspaceOwner")
  transactions            Transaction[]
  instrumentDiscoveries   InstrumentDiscovery[]
  unlockedChaosCardKeys   String[]               @default([])
  contributions           Contribution[]
  conversation            Conversation?
  pulseProfile            PulseProfile?
  // Add relation to ActiveSystemEffect if needed
}

model Workspace {
  id                    String                 @id @default(cuid())
  name                  String
  ownerId               String                 @unique
  owner                 User                   @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members               User[]                 @relation("WorkspaceMembers")
  credits               Decimal                @default(100.0)
  planTier              PlanTier               @default(Apprentice)
  agentActionsUsed      Int                    @default(0)
  overageEnabled        Boolean                @default(false)
  unlockedAppIds        String[]               @default([])
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  agents                Agent[]
  contacts              Contact[]
  securityAlerts        SecurityAlert[]
  conversations         Conversation[]
  transactions          Transaction[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  threatFeeds           ThreatFeed[]
  instrumentDiscoveries InstrumentDiscovery[]
  activeSystemEffects   ActiveSystemEffect[]
  contributions         Contribution[]
  winningEvents         GlobalAgenticEvent[]   @relation("WinningWorkspace")
  integrations          Integration[]
}

model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus @default(idle)
  configuration Json?
  workspace     Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  userId            String?
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  user        User     @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Json
  updatedAt   DateTime @updatedAt
}

model Transaction {
  id             String          @id @default(cuid())
  workspaceId    String
  workspace      Workspace       @relation(fields: [workspaceId], references: [id])
  userId         String?
  user           User?           @relation(fields: [userId], references: [id])
  type           TransactionType
  amount         Decimal
  description    String
  status         TransactionStatus
  createdAt      DateTime        @default(now())
  // For Folly Instruments
  instrumentId   String?
  luckWeight     Float?
  outcome        String?
  tributeAmount  Decimal?
  boonAmount     Decimal?
  judasFactor    Decimal?
  userPsyche     UserPsyche?
}

model Workflow {
  id            String          @id @default(cuid())
  name          String
  isActive      Boolean         @default(true)
  triggerType   String          @default("api")
  definition    Json
  workspaceId   String
  workspace     Workspace       @relation(fields: [workspaceId], references: [id])
  runs          WorkflowRun[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json
  output         Json?
  log            Json[]
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
}

model ChaosCard {
  key          String         @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
}

model ActiveSystemEffect {
  id           String    @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  cardKey      String
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
}

model InstrumentDiscovery {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId   String
  firstViewedAt  DateTime  @default(now())
  converted      Boolean   @default(false)
  dtt            Int? // Discovery-to-tribute time in minutes
  nudgeSentAt    DateTime?
}

model PulseProfile {
  id                  String              @id @default(cuid())
  userId              String              @unique
  user                User                @relation(fields: [userId], references: [id])
  baselineLuck        Float               @default(0.4) // Center of the sine wave
  amplitude           Float               @default(0.15) // How high/low the wave goes
  frequency           Float               @default(0.01) // How fast the wave oscillates
  phaseOffset         Float               // Unique starting point on the wave
  consecutiveLosses   Int                 @default(0)
  lastEventTimestamp  DateTime            @default(now())
  lastResolvedPhase   PulsePhase          @default(EQUILIBRIUM)
  lastInteractionType PulseInteractionType @default(LOGIN)
  frustration         Float               @default(0.1) // 0 to 1
  flowState           Float               @default(0.1) // 0 to 1
  riskAversion        Float               @default(0.5) // 0 to 1
  nextTributeGuaranteedWin Boolean? @default(false)
  loadedDieBuffCount Int? @default(0)
  hadesBargainActive Boolean? @default(false)
}

model GlobalAgenticEvent {
  id                   String       @id @default(cuid())
  eventName            String
  status               EventStatus  @default(ACTIVE)
  poolTarget           Decimal
  currentPool          Decimal      @default(0)
  expiresAt            DateTime
  shardReward          String // Key for the Chaos Card reward
  createdAt            DateTime     @default(now())
  concludedAt          DateTime?
  winningWorkspaceId   String?      @unique
  winningWorkspace     Workspace?   @relation("WinningWorkspace", fields: [winningWorkspaceId], references: [id])
  contributions        Contribution[]
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  createdAt   DateTime           @default(now())
}


enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  LOGIN
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  EXPIRED
}
