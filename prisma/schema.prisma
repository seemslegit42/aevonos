// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  engineType = "library" // Essential for serverless environments like Vercel Edge.
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // For migrations
}

// ========================================
// Core Tenancy & User Models
// ========================================
model User {
  id                      String          @id @default(cuid())
  email                   String          @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole        @default(OPERATOR)
  psyche                  UserPsyche      @default(ZEN_ARCHITECT)
  agentAlias              String?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  corePainIndex           Int?
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?       @map("reclamation_grace_until")
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  
  workspaces              Workspace[]     @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]     @relation("WorkspaceOwner")
  transactions            Transaction[]
  ownedChaosCards         ChaosCard[]
  pulseProfile            PulseProfile?
  conversation            Conversation?
  discoveries             InstrumentDiscovery[]
}

model Workspace {
  id                String    @id @default(cuid())
  name              String
  ownerId           String
  planTier          PlanTier  @default(Apprentice)
  credits           Decimal   @default(0)
  agentActionsUsed  Int       @default(0) @map("agent_actions_used")
  unlockedAppIds    String[]  @default([]) @map("unlocked_app_ids")
  overageEnabled    Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  owner             User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members           User[]    @relation("WorkspaceMembers")
  agents            Agent[]
  contacts          Contact[]
  transactions      Transaction[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  integrations      Integration[]
  conversation      Conversation[]
  discoveries       InstrumentDiscovery[]
  activeSystemEffects ActiveSystemEffect[]
}

// ========================================
// Agentic & Workflow Models
// ========================================
model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  definition   Json
  workspaceId  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs         WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  workspaceId    String
  
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

// ========================================
// Economic Engine Models (Obelisk & Klepsydra)
// ========================================
model Transaction {
  id             String          @id @default(cuid())
  workspaceId    String
  userId         String?
  type           TransactionType
  amount         Decimal
  description    String
  status         TransactionStatus @default(COMPLETED)
  instrumentId   String?
  luckWeight     Float?
  outcome        String?
  boonAmount     Decimal?
  userPsyche     UserPsyche?
  createdAt      DateTime        @default(now())
  
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user           User?           @relation(fields: [userId], references: [id])
}

model PulseProfile {
  id                  String      @id @default(cuid())
  userId              String      @unique
  baselineLuck        Float       @default(0.5)
  amplitude           Float       @default(0.15)
  frequency           Float       @default(0.01)
  phaseOffset         Float
  consecutiveLosses   Int         @default(0)
  lastEventTimestamp  DateTime    @default(now())
  lastResolvedPhase   PulsePhase  @default(EQUILIBRIUM)
  
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChaosCard {
  id          String      @id @default(cuid())
  key         String      @unique
  name        String
  description String
  cardClass   ChaosCardClass
  cost        Int
  systemEffect String
  
  owners      User[]
}

model ActiveSystemEffect {
  id          String      @id @default(cuid())
  workspaceId String
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime    @default(now())
  
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

// ========================================
// Utility & Application Models
// ========================================
model Contact {
  id          String    @id @default(cuid())
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([url, workspaceId])
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  workspaceId String
  messages    Json      @default("[]")
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  workspaceId   String
  instrumentId  String
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false)
  dtt           Int?      // Discovery-to-Tribute time in minutes
  nudgeSentAt   DateTime?
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, instrumentId])
}

model Integration {
    id                      String              @id @default(cuid())
    workspaceId             String
    integrationManifestId   String
    name                    String
    status                  IntegrationStatus   @default(active)
    configDetails           Json
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    workspace               Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

// ========================================
// ENUMS
// ========================================
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
    PENDING
    COMPLETED
    FAILED
}

enum PulsePhase {
    CREST
    TROUGH
    EQUILIBRIUM
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
}

enum IntegrationStatus {
    active
    inactive
    error
}
