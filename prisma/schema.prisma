// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  firstName               String?
  lastName                String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  lastLoginAt             DateTime               @default(now())
  role                    UserRole               @default(OPERATOR)
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  agentAlias              String?
  unlockedChaosCardKeys   String[]               @default([])
  hasAbyssalScar          Boolean                @default(false)
  foundingVow             String?
  foundingGoal            String?
  firstWhisper            String?
  firstCommand            String?
  foundingBenediction     String?
  corePainIndex           Int?
  reclamationGraceUntil   DateTime?
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]            @relation("WorkspaceOwner")
  transactions            Transaction[]
  contributions           Contribution[]
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
  potentialAccrualLogs    PotentialAccrualLog[]
  conversationHistory     Conversation[]
  securityAlerts          SecurityAlert[]
  purchaseOrders          PurchaseOrder[]
  createdAgentIntegrities AgentIntegrity[]
}

model Workspace {
  id                String                 @id @default(cuid())
  name              String
  owner             User                   @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId           String
  planTier          PlanTier               @default(Apprentice)
  credits           Decimal                @default(0.0)
  potential         Decimal                @default(0.0)
  agentActionsUsed  Int                    @default(0)
  overageEnabled    Boolean                @default(true)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  unlockedAppIds    String[]               @default([])
  members           User[]                 @relation("WorkspaceMembers")
  agents            Agent[]
  contacts          Contact[]
  transactions      Transaction[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  securityEdicts    SecurityEdict[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  integrations      Integration[]
  pulseEngineConfig PulseEngineConfig?
  contributions     Contribution[]
  instrumentDiscoveries InstrumentDiscovery[]
  potentialAccrualLogs PotentialAccrualLog[]
  activeSystemEffects ActiveSystemEffect[]
  inventoryProducts   Product[]
  inventorySuppliers  Supplier[]
  inventoryOrders     PurchaseOrder[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?   @unique
  phone       String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Transaction {
  id              String           @id @default(cuid())
  workspace       Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  user            User?            @relation(fields: [userId], references: [id])
  userId          String?
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus @default(COMPLETED)
  createdAt       DateTime         @default(now())
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?
  boonAmount      Decimal?
  judasFactor     Decimal?
  userPsyche      UserPsyche?
  isTransmutation Boolean          @default(false)
  realWorldAmount Decimal?
  realWorldCurrency String?
  vendorName      String?
  transmutationTithe Decimal?
  aegisSignature  String?
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  user              User?             @relation(fields: [userId], references: [id])
  userId            String?
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime  @default(now())
}

model SecurityEdict {
  id          String @id @default(cuid())
  description String
  isActive    Boolean @default(true)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime @default(now())
}


model Workflow {
  id           String        @id @default(cuid())
  name         String
  definition   Json
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  runs         WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workflowId     String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  status         WorkflowRunStatus
  startedAt      DateTime
  finishedAt     DateTime?
  triggerPayload Json?
  output         Json?
  log            Json?
}

model Integration {
  id String @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  integrationManifestId String
  name        String
  status      IntegrationStatus @default(inactive)
  configDetails Json? // For API keys, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PulseProfile {
  id                       String               @id @default(cuid())
  userId                   String               @unique
  amplitude                Float                @default(0.15)
  frequency                Float                @default(0.01)
  phaseOffset              Float
  baselineLuck             Float                @default(0.4)
  lastEventTimestamp       DateTime             @default(now())
  consecutiveLosses        Int                  @default(0)
  lastResolvedPhase        PulsePhase?
  lastInteractionType      PulseInteractionType?
  frustration              Float                @default(0.0)
  flowState                Float                @default(0.0)
  riskAversion             Float                @default(0.0)
  nextTributeGuaranteedWin Boolean?
  loadedDieBuffCount       Int?
  hadesBargainActive       Boolean?
  user                     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model PulseEngineConfig {
  id String @id @default(cuid())
  workspaceId String @unique
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  pityThreshold Int @default(5)
  festivalTriggerPercent Int @default(20) // e.g. 20% drop triggers event
  transmutationTithe Decimal @default(0.18)
}

model GlobalAgenticEvent {
  id                   String         @id @default(cuid())
  eventName            String
  status               EventStatus    @default(ACTIVE)
  createdAt            DateTime       @default(now())
  expiresAt            DateTime
  poolTarget           Decimal        @default(100000)
  currentPool          Decimal        @default(0)
  winningWorkspaceId   String?
  shardReward          String // A Chaos Card ID
  contributions        Contribution[]
}

model Contribution {
  id           String             @id @default(cuid())
  amount       Decimal
  workspace    Workspace          @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  user         User               @relation(fields: [userId], references: [id])
  userId       String
  event        GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  eventId      String
  createdAt    DateTime           @default(now())
}

model InstrumentDiscovery {
    id String @id @default(cuid())
    userId String
    user User @relation(fields: [userId], references: [id])
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id])
    instrumentId String
    firstViewedAt DateTime @default(now())
    converted Boolean @default(false)
    nudgeSentAt DateTime?
    dtt Int? // Discovery-to-Tribute time in minutes
    
    @@unique([userId, instrumentId])
}

model PotentialAccrualLog {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  instrumentId String
  createdAt DateTime @default(now())
  luckWeight Float
  potentialAwarded Decimal
  narrativeContext String?
  aegisSignature String?
}

model ChaosCard {
  key String @id
  name String
  description String
  cardClass ChaosCardClass
  cost Int
  systemEffect String?
  createdAt DateTime @default(now())
}

model ActiveSystemEffect {
    id String @id @default(cuid())
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id])
    cardKey String
    createdAt DateTime @default(now())
    expiresAt DateTime
}

model Conversation {
    id          String   @id @default(cuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id])
    messages    Json // Array of serialized LangChain messages
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    @@unique([userId])
}

// Models for Inventory Daemon
model Product {
    id          String @id @default(cuid())
    name        String
    description String
    stockLevel  Int @default(0)
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    purchaseOrderItems PurchaseOrderItem[]
}

model Supplier {
    id          String @id @default(cuid())
    name        String
    contactEmail String @unique
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
    id          String @id @default(cuid())
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    supplierId  String
    supplier    Supplier @relation(fields: [supplierId], references: [id])
    status      PurchaseOrderStatus @default(PENDING)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    items       PurchaseOrderItem[]
}

model PurchaseOrderItem {
    id              String @id @default(cuid())
    purchaseOrderId String
    purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    productId       String
    product         Product @relation(fields: [productId], references: [id])
    quantity        Int
}

model AgentIntegrity {
    id          String      @id @default(cuid())
    agentType   String      @unique
    createdBy   User        @relation(fields: [createdById], references: [id])
    createdById String
    version     Int
    hash        String
    passedAt    DateTime?
    failedAt    DateTime?
    isPassing   Boolean     @default(false)
    createdAt   DateTime    @default(now())
}


enum EventStatus {
  ACTIVE
  CONCLUDED
  FAILED
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum PurchaseOrderStatus {
    PENDING
    SUBMITTED
    COMPLETED
    CANCELLED
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

    