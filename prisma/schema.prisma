
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// --------------------------------------
// ENUMS
// --------------------------------------

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  CREDIT
  DEBIT
}

// --------------------------------------
// MODELS
// --------------------------------------

model User {
  id          String      @id @default(cuid())
  email       String      @unique
  password    String
  firstName   String?
  lastName    String?
  lastLoginAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaces      Workspace[] @relation("WorkspaceMembers")
  transactions    Transaction[]
}

model Workspace {
  id          String      @id @default(cuid())
  name        String
  ownerId     String
  planTier    PlanTier    @default(Apprentice)
  credits     Decimal     @default(0.0)
  agentActionsUsed Int    @default(0)
  overageEnabled Boolean  @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  owner         User          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members       User[]        @relation("WorkspaceMembers")
  agents        Agent[]
  contacts      Contact[]
  workflows     Workflow[]
  workflowRuns  WorkflowRun[]
  securityAlerts SecurityAlert[]
  threatFeeds   ThreatFeed[]
  integrations  Integration[]
  transactions  Transaction[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String // e.g., winston-wolfe, kif-kroker
  description String?
  status      AgentStatus @default(idle)
  lastActivityAt DateTime?
  
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  customProperties Json?

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([workspaceId, email])
}

model SecurityAlert {
  id          String            @id @default(cuid())
  type        String
  explanation String
  riskLevel   SecurityRiskLevel @default(low)
  timestamp   DateTime          @default(now())
  actionableOptions String[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ThreatFeed {
  id          String      @id @default(cuid())
  url         String
  
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime    @default(now())
}

model Integration {
  id            String    @id @default(cuid())
  integrationManifestId String // Corresponds to the ID in the static manifest config
  name          String
  status        String    @default("active") // "active", "inactive", "error"
  configDetails Json
  
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}


model Workflow {
  id          String      @id @default(cuid())
  name        String
  isActive    Boolean     @default(true)
  triggerType String      @default("api") // "api", "schedule", "event"
  definition  Json

  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId  String
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String          @id @default(cuid())
  type        TransactionType
  amount      Decimal
  description String
  createdAt   DateTime        @default(now())

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  agentId     String?
  agent       Agent?    @relation(fields: [agentId], references: [id])
}
