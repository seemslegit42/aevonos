// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String?
  firstName               String?   @map("first_name")
  lastName                String?   @map("last_name")
  agentAlias              String?   @map("agent_alias")
  role                    UserRole  @default(OPERATOR)
  psyche                  UserPsyche
  corePainIndex           Int?      @map("core_pain_index")
  foundingVow             String?   @map("founding_vow")
  foundingGoal            String?   @map("founding_goal")
  foundingBenediction     String?   @map("founding_benediction")
  firstWhisper            String?   @map("first_whisper")
  firstCommand            String?   @map("first_command")
  lastLoginAt             DateTime? @map("last_login_at")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  reclamationGraceUntil   DateTime? @map("reclamation_grace_until")
  unlockedChaosCardKeys   String[]  @map("unlocked_chaos_card_keys")

  workspaces     Workspace[]
  transactions   Transaction[]
  pulseProfile   PulseProfile?
  discoveries    InstrumentDiscovery[]
  conversations  Conversation[]
}

model Workspace {
  id                   String                 @id @default(cuid())
  name                 String
  ownerId              String                 @map("owner_id")
  planTier             PlanTier               @default(Apprentice) @map("plan_tier")
  credits              Decimal                @default(0) @db.Decimal(12, 2)
  agentActionsUsed     Int                    @default(0) @map("agent_actions_used")
  overageEnabled       Boolean                @default(false) @map("overage_enabled")
  unlockedAppIds       String[]               @map("unlocked_app_ids")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  
  owner                User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members              User[]
  agents               Agent[]
  contacts             Contact[]
  securityAlerts       SecurityAlert[]
  securityEdicts       SecurityEdict[]
  threatFeeds          ThreatFeed[]
  transactions         Transaction[]
  workflows            Workflow[]
  workflowRuns         WorkflowRun[]
  activeSystemEffects  ActiveSystemEffect[]
  contributions        Contribution[]
  discoveries          InstrumentDiscovery[]
  conversations        Conversation[]

  @@index([ownerId])
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus
  workspaceId String      @map("workspace_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Contact {
  id          String   @id @default(cuid())
  email       String?
  firstName   String?  @map("first_name")
  lastName    String?  @map("last_name")
  phone       String?
  workspaceId String   @map("workspace_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model SecurityAlert {
  id          String   @id @default(cuid())
  type        String
  explanation String
  riskLevel   SecurityRiskLevel
  timestamp   DateTime @default(now())
  actionableOptions String[] @map("actionable_options")
  workspaceId String   @map("workspace_id")
  userId      String?   @map("user_id")

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([workspaceId])
}

model SecurityEdict {
  id          String  @id @default(cuid())
  description String
  isActive    Boolean @default(true)
  workspaceId String  @map("workspace_id")
  createdAt   DateTime @default(now()) @map("created_at")

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ThreatFeed {
  id          String @id @default(cuid())
  url         String
  workspaceId String @map("workspace_id")

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}


model Transaction {
  id           String   @id @default(cuid())
  workspaceId  String   @map("workspace_id")
  userId       String?  @map("user_id") // Optional, for system transactions
  type         TransactionType
  amount       Decimal  @db.Decimal(12, 2)
  description  String
  status       TransactionStatus @default(PENDING)
  createdAt    DateTime @default(now()) @map("created_at")

  // For Folly Instruments
  instrumentId        String?
  luckWeight          Float?
  outcome             String?
  boonAmount          Decimal? @db.Decimal(12, 2)
  tributeAmount       Decimal? @db.Decimal(12, 2)
  judasFactor         Decimal? @db.Decimal(4, 3) @map("judas_factor")
  userPsyche          UserPsyche?

  // For GAEs
  contribution Contribution[]

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  agentId     String?
  
  @@index([workspaceId])
  @@index([userId])
}

model PulseProfile {
  id                 String  @id @default(cuid())
  userId             String  @unique @map("user_id")
  baselineLuck       Float   @default(0.5) @map("baseline_luck")
  amplitude          Float   @default(0.2)
  frequency          Float   @default(0.1)
  phaseOffset        Float   @map("phase_offset")
  consecutiveLosses  Int     @default(0) @map("consecutive_losses")
  frustration        Float   @default(0)
  flowState          Float   @default(0) @map("flow_state")
  riskAversion       Float   @default(0.5) @map("risk_aversion")
  
  lastEventTimestamp DateTime @default(now()) @map("last_event_timestamp")
  lastInteractionType PulseInteractionType? @map("last_interaction_type")
  lastResolvedPhase  PulsePhase? @map("last_resolved_phase")

  nextTributeGuaranteedWin Boolean? @default(false) @map("next_tribute_guaranteed_win")
  loadedDieBuffCount Int? @default(0) @map("loaded_die_buff_count")
  hadesBargainActive Boolean? @default(false) @map("hades_bargain_active")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workflow {
  id           String   @id @default(cuid())
  name         String
  isActive     Boolean  @default(true)
  triggerType  String   @default("api")
  definition   Json
  workspaceId  String   @map("workspace_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs      WorkflowRun[]
}

model WorkflowRun {
  id             String   @id @default(cuid())
  workflowId     String   @map("workflow_id")
  workspaceId    String   @map("workspace_id")
  status         WorkflowRunStatus
  triggerPayload Json     @map("trigger_payload")
  output         Json?
  log            Json?
  startedAt      DateTime @default(now()) @map("started_at")
  finishedAt     DateTime? @map("finished_at")

  workflow  Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Integration {
  id                    String      @id @default(cuid())
  name                  String
  workspaceId           String      @map("workspace_id")
  integrationManifestId String      @map("integration_manifest_id")
  status                IntegrationStatus @default(active)
  configDetails         Json        @map("config_details")
  createdAt             DateTime    @default(now()) @map("created_at")
  updatedAt             DateTime    @updatedAt @map("updated_at")
  
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  @@index([workspaceId])
}

model ChaosCard {
  key          String        @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
}

model ActiveSystemEffect {
  id           String   @id @default(cuid())
  workspaceId  String   @map("workspace_id")
  cardKey      String
  expiresAt    DateTime
  createdAt    DateTime @default(now()) @map("created_at")

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  @@index([workspaceId])
}

model GlobalAgenticEvent {
  id                 String      @id @default(cuid())
  eventName          String      @map("event_name")
  status             EventStatus @default(ACTIVE)
  poolTarget         Decimal     @db.Decimal(12, 2) @map("pool_target")
  currentPool        Decimal     @default(0) @db.Decimal(12, 2) @map("current_pool")
  expiresAt          DateTime    @map("expires_at")
  winningWorkspaceId String?     @map("winning_workspace_id")
  shardReward        String      // Key of the Chaos Card or effect
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")

  contributions      Contribution[]
}

model Contribution {
  id          String   @id @default(cuid())
  workspaceId String   @map("workspace_id")
  userId      String   @map("user_id")
  eventId     String   @map("event_id")
  amount      Decimal  @db.Decimal(12, 2)
  createdAt   DateTime @default(now()) @map("created_at")

  event     GlobalAgenticEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  workspace Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id])
}

model InstrumentDiscovery {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  workspaceId  String   @map("workspace_id")
  instrumentId String   @map("instrument_id") // App or Card ID
  firstViewedAt DateTime @default(now()) @map("first_viewed_at")
  converted    Boolean  @default(false)
  dtt          Int?     @map("dtt") // Discovery-to-Tribute time in minutes
  nudgeSentAt  DateTime? @map("nudge_sent_at")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, instrumentId])
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  workspaceId String   @map("workspace_id")
  messages    Json     @default("[]")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

```