// This schema is based on the application's data models and relationships.
// It defines the structure of the database and is used by Prisma to generate the client.

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  // The `binaryTargets` flag is essential for ensuring Prisma generates a compatible
  // query engine for both the native development environment and the Vercel/Debian-based deployment environment.
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole  @default(OPERATOR)
  agentAlias              String    @default("BEEP")
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Int?
  foundingBenediction     String?
  firstWhisper            String?
  reclamationGraceUntil   DateTime?
  lastLoginAt             DateTime? @updatedAt

  workspaces              Workspace[]
  transactions            Transaction[]
  contributions           Contribution[]
  instrumentDiscoveries   InstrumentDiscovery[]
  conversations           Conversation[]
  pulseProfile            PulseProfile?
  
  unlockedChaosCardKeys   String[]  @default([])
  securityAlerts          SecurityAlert[]
}

model Workspace {
  id               String    @id @default(cuid())
  name             String
  ownerId          String
  planTier         PlanTier  @default(Apprentice)
  credits          Decimal   @default(0.0)
  agentActionsUsed Int       @default(0)
  overageEnabled   Boolean   @default(false)
  unlockedAppIds   String[]  @default([])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  owner                 User      @relation(fields: [ownerId], references: [id])
  members               User[]

  agents                Agent[]
  contacts              Contact[]
  securityAlerts        SecurityAlert[]
  transactions          Transaction[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  integrations          Integration[]
  threatFeeds           ThreatFeed[]
  instrumentDiscoveries InstrumentDiscovery[]
  conversations         Conversation[]
  activeSystemEffects   ActiveSystemEffect[]
  contributions         Contribution[]
}

model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus @default(idle)
  configuration Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model Contact {
  id          String   @id @default(cuid())
  email       String?  @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  isAcknowledged    Boolean           @default(false)
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
}

model Transaction {
  id             String          @id @default(cuid())
  workspaceId    String
  userId         String?
  type           TransactionType
  amount         Decimal
  description    String
  status         TransactionStatus @default(COMPLETED)
  createdAt      DateTime        @default(now())

  // For Klepsydra Engine
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?
  boonAmount      Decimal?
  judasFactor     Decimal?
  userPsyche      UserPsyche?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id])
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api") // api, schedule, event
  definition   Json
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String
  runs         WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workspaceId    String
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json[]
  startedAt      DateTime
  finishedAt     DateTime?

  workflow  Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id])
}

model Integration {
  id                    String            @id @default(cuid())
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId           String
  integrationManifestId String // This will be the UUID from the manifest file
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json? // Encrypted API keys, etc.
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  messages    Json[]
  updatedAt   DateTime @updatedAt
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model PulseProfile {
  id                  String  @id @default(cuid())
  userId              String  @unique
  baselineLuck        Float   @default(0.4)
  amplitude           Float   @default(0.15)
  frequency           Float   @default(0.01)
  phaseOffset         Float
  consecutiveLosses   Int     @default(0)
  lastEventTimestamp  DateTime @default(now())
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)
  lastInteractionType PulseInteractionType @default(COMMAND_SUCCESS)
  
  frustration         Float   @default(0.0)
  flowState           Float   @default(0.0)
  riskAversion        Float   @default(0.5)

  // Buffs
  loadedDieBuffCount      Int     @default(0)
  nextTributeGuaranteedWin Boolean @default(false)
  hadesBargainActive       Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InstrumentDiscovery {
    id              String      @id @default(cuid())
    userId          String
    workspaceId     String
    instrumentId    String      // The key of the MicroApp/ChaosCard from the manifest
    firstViewedAt   DateTime    @default(now())
    converted       Boolean     @default(false)
    dtt             Int?        // Discovery-to-Tribute time in minutes

    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace       Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([userId, instrumentId])
}

model ChaosCard {
    key         String          @id
    name        String
    description String
    cardClass   ChaosCardClass
    cost        Int
    systemEffect String?

    @@map("chaos_cards")
}

model ActiveSystemEffect {
    id          String @id @default(cuid())
    workspaceId String
    cardKey     String
    createdAt   DateTime @default(now())
    expiresAt   DateTime

    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

// Global Agentic Events
model GlobalAgenticEvent {
    id                  String      @id @default(cuid())
    eventName           String
    status              EventStatus @default(ACTIVE)
    poolTarget          Decimal
    currentPool         Decimal     @default(0)
    createdAt           DateTime    @default(now())
    expiresAt           DateTime
    winningWorkspaceId  String?
    shardReward         String?     // e.g., 'THEME_CRIMSON_RUIN'

    contributions       Contribution[]
}

model Contribution {
    id              String      @id @default(cuid())
    eventId         String
    workspaceId     String
    userId          String
    amount          Decimal
    createdAt       DateTime    @default(now())

    event           GlobalAgenticEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
    workspace       Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    user            User               @relation(fields: [userId], references: [id])
}


enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum IntegrationStatus {
    active
    inactive
    error
}

enum PulsePhase {
    CREST
    TROUGH
    EQUILIBRIUM
}

enum PulseInteractionType {
    WIN
    LOSS
    COMMAND_SUCCESS
    COMMAND_FAILURE
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
    BOON
}

enum EventStatus {
    ACTIVE
    CONCLUDED
    FAILED
}
