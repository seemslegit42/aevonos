
// Datasource and generator blocks
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
}

// ------------------------------------------
// Core Tenancy & Auth Models
// ------------------------------------------

model User {
  id                      String                  @id @default(cuid())
  firstName               String?
  lastName                String?
  email                   String?                 @unique
  emailVerified           DateTime?
  password                String?
  image                   String?
  role                    UserRole                @default(OPERATOR)
  psyche                  UserPsyche              @default(ZEN_ARCHITECT)
  agentAlias              String?
  lastLoginAt             DateTime?               @updatedAt
  createdAt               DateTime                @default(now())
  reclamationGraceUntil   DateTime?
  
  // Vow artifacts from the Rite of Invocation
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Int?
  foundingBenediction     String?
  firstWhisper            String?

  accounts                Account[]
  sessions                Session[]
  workspaces              Workspace[]             @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]             @relation("WorkspaceOwner")
  transactions            Transaction[]
  ownedChaosCards         ChaosCard[]
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id                String    @id @default(cuid())
  name              String
  ownerId           String
  owner             User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members           User[]    @relation("WorkspaceMembers")
  planTier          PlanTier
  credits           Decimal   @default(0)
  agentActionsUsed  Int       @default(0)
  overageEnabled    Boolean   @default(true)
  unlockedAppIds    String[]

  agents                Agent[]
  contacts              Contact[]
  conversations         Conversation[]
  securityAlerts        SecurityAlert[]
  threatFeeds           ThreatFeed[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  transactions          Transaction[]
  activeSystemEffects   ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
  intelligenceCases     IntelligenceCase[]
  laheyLogEntries       LaheyLogEntry[]
  expenseEntries        ExpenseEntry[]
  receipts              Receipt[]
  products              Product[]
  suppliers             Supplier[]
  purchaseOrders        PurchaseOrder[]
  directories           Directory[]
  files                 File[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// ------------------------------------------
// Agentic & Workflow Models
// ------------------------------------------

model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  transactions  Transaction[]
}

model Workflow {
  id            String          @id @default(cuid())
  name          String
  definition    Json
  isActive      Boolean         @default(true)
  triggerType   String          @default("api")
  workspaceId   String
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs          WorkflowRun[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model WorkflowRun {
  id              String            @id @default(cuid())
  workflowId      String
  workspaceId     String
  status          WorkflowRunStatus
  startedAt       DateTime
  finishedAt      DateTime?
  triggerPayload  Json?
  output          Json?
  log             Json?
  
  workflow        Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  messages    Json[]
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

// ------------------------------------------
// Economic Engine Models (Obelisk Pay & Klepsydra)
// ------------------------------------------

model Transaction {
  id            String          @id @default(cuid())
  workspaceId   String
  userId        String?
  agentId       String?
  type          TransactionType
  amount        Decimal
  description   String
  status        TransactionStatus @default(PENDING)
  createdAt     DateTime        @default(now())
  
  // Fields for Folly Instrument Tributes
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  boonAmount      Decimal?
  tributeAmount   Decimal?
  userPsyche      UserPsyche?

  workspace     Workspace       @relation(fields: [workspaceId], references: [id])
  user          User?           @relation(fields: [userId], references: [id])
  agent         Agent?          @relation(fields: [agentId], references: [id])
}

model ChaosCard {
  id            String @id @default(cuid())
  key           String @unique // e.g., 'GEOLOGIC_TIME'
  name          String
  description   String
  cardClass     ChaosCardClass
  cost          Int
  systemEffect  String
  users         User[]
  
  @@index([key])
}

model ActiveSystemEffect {
  id            String    @id @default(cuid())
  workspaceId   String
  cardKey       String
  expiresAt     DateTime
  
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([workspaceId, cardKey])
}

model PulseProfile {
  id                  String  @id @default(cuid())
  userId              String  @unique
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Sine-Rhythm Engine Parameters
  amplitude           Float   @default(0.15)
  frequency           Float   @default(0.01)
  phaseOffset         Float
  baselineLuck        Float
  
  // State Trackers
  lastEventTimestamp  DateTime  @default(now())
  consecutiveLosses   Int       @default(0)
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)
  lastInteractionType PulseInteractionType?

  // Psyche-Calibration Engine Metrics
  riskAversion        Float   @default(0.5) // 0=risk-seeking, 1=risk-averse
  frustration         Float   @default(0.1) // 0=calm, 1=tilted
  flowState           Float   @default(0.2) // 0=distracted, 1=hyper-focused
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  workspaceId   String
  instrumentId  String    // e.g., micro-app id or chaos card key
  firstViewedAt DateTime  @default(now())
  nudgeSentAt   DateTime?
  converted     Boolean   @default(false)
  dtt           Int?      // Discovery-to-Tribute Time in minutes
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, instrumentId])
}

// ------------------------------------------
// Utility & Application Models
// ------------------------------------------

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([workspaceId, email])
}

model SecurityAlert {
  id                String             @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime           @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String // This is the UUID from the static manifest
  name                  String
  status                IntegrationStatus
  configDetails         Json
  
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
}

// ------------------------------------------
// Micro-App Specific Models
// ------------------------------------------

model IntelligenceCase {
  id          String    @id @default(cuid())
  targetName  String
  status      String    @default("Open") // Open, Closed, Cold
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model LaheyLogEntry {
  id              String   @id @default(cuid())
  employee        String
  event           String
  duration_minutes Int?
  shitstorm_index Int
  lahey_commentary String
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
}

model ExpenseEntry {
  id                String   @id @default(cuid())
  description       String
  amount            Decimal
  category          String
  judgmental_remark String
  workspaceId       String
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt         DateTime  @default(now())
}

model Receipt {
  id          String   @id @default(cuid())
  vendor      String
  amount      Decimal
  date        DateTime
  lead        String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

// Inventory Daemon
model Product {
  id          String @id @default(cuid())
  name        String
  description String?
  stockLevel  Int
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  purchaseOrders PurchaseOrder[]
}

model Supplier {
  id          String @id @default(cuid())
  name        String
  contactEmail String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
  id          String @id @default(cuid())
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  supplierId  String
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  quantity    Int
  status      String @default("Placed") // Placed, Shipped, Received
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

// File Explorer
model Directory {
  id          String @id @default(cuid())
  name        String
  parentId    String?
  parent      Directory? @relation("Subdirectories", fields: [parentId], references: [id])
  children    Directory[] @relation("Subdirectories")
  files       File[]
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  
  @@unique([parentId, name, workspaceId])
}

model File {
  id          String @id @default(cuid())
  name        String
  type        String
  size        Int
  url         String
  directoryId String
  directory   Directory @relation(fields: [directoryId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  
  @@unique([directoryId, name, workspaceId])
}


// ------------------------------------------
// Enums
// ------------------------------------------

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}
