// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Auth.js Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  firstName             String?
  lastName              String?
  role                  UserRole               @default(OPERATOR)
  psyche                UserPsyche             @default(ZEN_ARCHITECT)
  agentAlias            String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  lastLoginAt           DateTime?
  reclamationGraceUntil DateTime?
  foundingVow           String?
  foundingGoal          String?
  corePainIndex         Int?
  firstWhisper          String?

  // Relations
  accounts              Account[]
  sessions              Session[]
  workspaces            Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspaces       Workspace[]            @relation("WorkspaceOwner")
  ownedChaosCards       ChaosCard[]
  pulseProfile          PulseProfile?
  transactions          Transaction[]
  conversations         Conversation[]
  instrumentDiscoveries InstrumentDiscovery[]
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

model Workspace {
  id                String    @id @default(cuid())
  name              String
  owner             User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId           String
  planTier          PlanTier  @default(Apprentice)
  credits           Decimal   @default(0)
  overageEnabled    Boolean   @default(true)
  agentActionsUsed  Int       @default(0)
  unlockedAppIds    String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  members           User[]    @relation("WorkspaceMembers")
  agents            Agent[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  contacts          Contact[]
  transactions      Transaction[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  conversations     Conversation[]
  integrations      Integration[]
  activeSystemEffects ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  transactions Transaction[]
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Workflow {
  id            String          @id @default(cuid())
  name          String
  isActive      Boolean         @default(true)
  triggerType   String          @default("api")
  definition    Json
  workspace     Workspace       @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  runs          WorkflowRun[]
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workflowId     String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  status         WorkflowRunStatus @default(pending)
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  triggerPayload Json?
  output         Json?
  log            Json?
}

model Contact {
  id          String    @id @default(cuid())
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Transaction {
  id           String            @id @default(cuid())
  workspace    Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  user         User?             @relation(fields: [userId], references: [id])
  userId       String?
  agent        Agent?            @relation(fields: [agentId], references: [id])
  agentId      String?
  type         TransactionType
  amount       Decimal
  description  String
  status       TransactionStatus @default(PENDING)
  createdAt    DateTime          @default(now())
  instrumentId String? // e.g., the key of the Chaos Card or MicroApp
  luckWeight   Float? // For tribute events
  outcome      String? // For tribute events
  boonAmount   Decimal? // For tribute events
  userPsyche   UserPsyche? // For tribute events
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  url         String
  createdAt   DateTime  @default(now())
}

model Conversation {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  messages    Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum IntegrationStatus {
  active
  inactive
  error
}

model Integration {
  id                    String            @id @default(cuid())
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId           String
  integrationManifestId String // This will map to the static manifests in the code
  name                  String
  status                IntegrationStatus @default(inactive)
  configDetails         Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

// --- Folly & Fortune Engine ---
enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

model PulseProfile {
  id                  String     @id @default(cuid())
  user                User       @relation(fields: [userId], references: [id])
  userId              String     @unique
  baselineLuck        Float
  amplitude           Float
  frequency           Float
  phaseOffset         Float
  consecutiveLosses   Int        @default(0)
  lastEventTimestamp  DateTime   @default(now())
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

model ChaosCard {
  id          String         @id @default(cuid())
  key         String         @unique
  name        String
  description String
  cardClass   ChaosCardClass
  cost        Int
  systemEffect String
  owners      User[]
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  cardKey     String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
}

model InstrumentDiscovery {
  id             String    @id @default(cuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  workspace      Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  instrumentId   String // The ID of the MicroApp or ChaosCard
  firstViewedAt  DateTime  @default(now())
  converted      Boolean   @default(false)
  dtt            Int? // Discovery-to-Tribute time in minutes
  nudgeSentAt    DateTime?
}
