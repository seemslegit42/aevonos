
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. Core Tenancy & User Models
// =================================================================

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole               @default(OPERATOR)
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  agentAlias              String?                @default("BEEP")
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Int?
  foundingBenediction     String?
  firstWhisper            String?
  unlockedChaosCardKeys   String[]
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]            @relation("WorkspaceOwner")
  transactions            Transaction[]
  securityAlerts          SecurityAlert[]
  conversations           Conversation[]
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
  contributions           Contribution[]
}

model Workspace {
  id                    String                 @id @default(cuid())
  name                  String
  ownerId               String
  planTier              PlanTier               @default(Apprentice)
  credits               Decimal                @default(100.0)
  agentActionsUsed      Int                    @default(0)
  unlockedAppIds        String[]
  overageEnabled        Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  owner                 User                   @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members               User[]                 @relation("WorkspaceMembers")
  agents                Agent[]
  contacts              Contact[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  integrations          Integration[]
  threatFeeds           ThreatFeed[]
  transactions          Transaction[]
  securityAlerts        SecurityAlert[]
  conversations         Conversation[]
  instrumentDiscoveries InstrumentDiscovery[]
  activeSystemEffects   ActiveSystemEffect[]
  contributions         Contribution[]

  @@index([ownerId])
}

// =================================================================
// 2. Agentic & Workflow Models
// =================================================================

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([workspaceId])
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  definition   Json
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowRuns WorkflowRun[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: NoAction) // Avoid cascading delete cycles

  @@index([workflowId])
  @@index([workspaceId])
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json[]
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([workspaceId])
}

// =================================================================
// 3. Economic Engine Models (Obelisk Pay & Klepsydra)
// =================================================================

model Transaction {
  id              String          @id @default(cuid())
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus @default(PENDING)
  tributeAmount   Decimal?
  boonAmount      Decimal?
  luckWeight      Float?
  judasFactor     Decimal?
  outcome         String?
  userPsyche      UserPsyche?
  workspaceId     String
  workspace       Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId          String?
  user            User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  agentId         String?
  instrumentId    String?
  createdAt       DateTime        @default(now())

  @@index([workspaceId])
  @@index([userId])
}

model PulseProfile {
  id                  String               @id @default(cuid())
  userId              String               @unique
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  baselineLuck        Float                @default(0.4)
  amplitude           Float                @default(0.15)
  frequency           Float                @default(0.01)
  phaseOffset         Float
  consecutiveLosses   Int                  @default(0)
  lastEventTimestamp  DateTime             @default(now())
  lastResolvedPhase   PulsePhase?
  lastInteractionType PulseInteractionType?
  frustration         Float                @default(0) // 0.0 to 1.0
  flowState           Float                @default(0) // 0.0 to 1.0
  riskAversion        Float                @default(0.5) // 0.0 to 1.0
  nextTributeGuaranteedWin Boolean?        @default(false)
  hadesBargainActive  Boolean?             @default(false)
  loadedDieBuffCount  Int?                 @default(0)

  @@index([userId])
}

model ChaosCard {
  key          String         @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String

  @@map("chaos_cards")
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId String
  firstViewedAt DateTime @default(now())
  converted    Boolean   @default(false)
  dtt          Int? // Discovery-to-Tribute time in minutes
  nudgeSentAt  DateTime?

  @@index([userId])
}


// =================================================================
// 4. Utility & Application Models
// =================================================================

model Contact {
  id          String    @id @default(cuid())
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}

model Integration {
  id                    String            @id @default(cuid())
  name                  String
  integrationManifestId String // The UUID of the manifest
  status                IntegrationStatus @default(active)
  configDetails         Json
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([workspaceId])
}

// =================================================================
// 5. Global Agentic Event Models
// =================================================================

model GlobalAgenticEvent {
  id                 String         @id @default(cuid())
  eventName          String
  status             EventStatus    @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal        @default(0)
  shardReward        String
  expiresAt          DateTime
  winningWorkspaceId String?
  contributions      Contribution[]
  createdAt          DateTime       @default(now())
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime           @default(now())

  @@index([eventId])
  @@index([workspaceId])
}


// =================================================================
// ENUMS
// =================================================================

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}

enum EventStatus {
  ACTIVE
  CONCLUDED
}
