// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  password      String?
  firstName     String?
  lastName      String?
  lastLoginAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  ownedWorkspace Workspace? @relation("WorkspaceOwner")
}

model Workspace {
  id               String   @id @default(cuid())
  name             String
  planTier         String   @default("free")
  agentActionsUsed Int      @default(0)
  overageEnabled   Boolean  @default(false)
  owner            User     @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId          String   @unique
  contacts         Contact[]
  agents           Agent[]
  workflows        Workflow[]
  workflowRuns     WorkflowRun[]
  securityAlerts   SecurityAlert[]
  integrations     Integration[]
  threatFeeds      ThreatFeed[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Contact {
  id          String     @id @default(cuid())
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([workspaceId])
}

model Agent {
  id           String     @id @default(cuid())
  name         String
  description  String?
  status       AgentStatus
  workspace    Workspace  @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([workspaceId])
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  definition   Json
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  runs         WorkflowRun[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workflowId     String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  @@index([workflowId])
  @@index([workspaceId])
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String

  @@index([workspaceId])
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}


model Integration {
  id                    String    @id @default(cuid())
  name                  String
  status                String // e.g., active, inactive, error
  configDetails         Json
  workspace             Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId           String
  integrationManifestId String // Corresponds to the ID in the static manifest file
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([workspaceId])
}
