
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                String      @id @default(cuid())
  email             String      @unique
  password          String
  firstName         String?
  lastName          String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastLoginAt       DateTime?
  ownedWorkspaces   Workspace[] @relation("WorkspaceOwner")
  memberOfWorkspaces Workspace[] @relation("WorkspaceMembers")
  initiatedTransactions Transaction[]
}

model Workspace {
  id                String      @id @default(cuid())
  name              String
  ownerId           String
  owner             User        @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  planTier          PlanTier    @default(Apprentice)
  credits           Float       @default(100)
  overageEnabled    Boolean     @default(true)
  agentActionsUsed  Int         @default(0)
  members           User[]      @relation("WorkspaceMembers")
  agents            Agent[]
  contacts          Contact[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  integrations      Integration[]
  transactions      Transaction[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id                String   @id @default(cuid())
  firstName         String?
  lastName          String?
  email             String?
  phone             String?
  customProperties  Json?
  workspaceId       String
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@unique([workspaceId, url])
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean       @default(true)
  triggerType String        @default("api") // api, schedule, event
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Integration {
  id                    String   @id @default(cuid())
  integrationManifestId String
  name                  String
  status                String // active, inactive, error
  configDetails         Json
  workspaceId           String
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Transaction {
  id                String          @id @default(cuid())
  workspaceId       String
  workspace         Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type              TransactionType
  amount            Float
  description       String
  initiatingUserId  String?
  initiatingUser    User?           @relation(fields: [initiatingUserId], references: [id], onDelete: SetNull)
  metadata          Json?
  balanceAfter      Float
  createdAt         DateTime        @default(now())
}


// --- ENUMS --- //
enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  AGENT_ACTION
  MICRO_APP_PURCHASE
  TRANSFER_IN
  TRANSFER_OUT
  REFUND
}
