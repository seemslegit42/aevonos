
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------
// Enums
// --------------------------------------

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}


// --------------------------------------
// Models
// --------------------------------------

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  password    String
  firstName   String?
  lastName    String?
  role        UserRole      @default(OPERATOR)
  lastLoginAt DateTime?
  potential   Decimal       @default(0.0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  ownedWorkspaces Workspace[]     @relation("WorkspaceOwner")
  workspaces      Workspace[]     @relation("WorkspaceMembers")
  ownedChaosCards ChaosCard[]
  transactions    Transaction[]
  tributeLogs     TributeLog[]
  pulseProfile    PulseProfile?
  securityAlerts  SecurityAlert[]
}

model Workspace {
  id                String       @id @default(cuid())
  name              String
  planTier          PlanTier     @default(Apprentice)
  credits           Decimal      @default(0.0)
  agentActionsUsed  Int          @default(0)
  overageEnabled    Boolean      @default(false)
  unlockedAppIds    String[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  owner             User         @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String
  members           User[]       @relation("WorkspaceMembers")

  agents            Agent[]
  securityAlerts    SecurityAlert[]
  contacts          Contact[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  transactions      Transaction[]
  threatFeeds       ThreatFeed[]
  integrations      Integration[]
}

model Agent {
  id             String      @id @default(cuid())
  name           String
  type           String
  description    String?
  status         AgentStatus
  lastActivityAt DateTime?   @default(now())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  workspace      Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId    String
  Transaction    Transaction[]
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]

  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId       String
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId            String?
}

model Contact {
  id               String   @id @default(cuid())
  email            String?
  firstName        String?
  lastName         String?
  phone            String?
  customProperties Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId      String
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  isActive    Boolean       @default(true)
  triggerType String        @default("api")
  definition  Json
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  runs        WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  workflow     Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId   String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId  String
}

model Transaction {
  id          String            @id @default(cuid())
  type        TransactionType
  amount      Decimal
  description String
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  agent       Agent?      @relation(fields: [agentId], references: [id], onDelete: SetNull)
  agentId     String?
}

model ChaosCard {
  id           String         @id @default(cuid())
  key          String         @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  imageUrl     String         @default("https://placehold.co/400x560.png")
  imageHint    String         @default("card art")

  owners User[]
}

model ThreatFeed {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now())

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model Integration {
  id                    String   @id @default(cuid())
  name                  String
  status                String
  configDetails         Json
  integrationManifestId String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model PulseProfile {
  id                String     @id @default(cuid())
  archetype         String?
  amplitude         Float      @default(0.1)
  frequency         Float      @default(0.1)
  phaseOffset       Float
  baselineLuck      Float
  lastEventTimestamp DateTime   @default(now())
  consecutiveLosses Int        @default(0)
  lastResolvedPhase PulsePhase @default(EQUILIBRIUM)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model TributeLog {
  id            String   @id @default(cuid())
  instrumentId  String
  tributeAmount Decimal
  luckWeight    Float
  outcome       String
  boonAmount    Decimal  @default(0.0)
  createdAt     DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}
