// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


// --- ENUMS ---

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}


// --- CORE TENANCY & USER MODELS ---

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  firstName             String?
  lastName              String?
  role                  UserRole  @default(OPERATOR)
  psyche                UserPsyche @default(ZEN_ARCHITECT)
  agentAlias            String?   @default("BEEP")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  lastLoginAt           DateTime?
  reclamationGraceUntil DateTime?

  // Onboarding & Lore
  foundingVow          String?
  foundingGoal         String?
  corePainIndex        Int?
  foundingBenediction  String?
  firstWhisper         String?
  firstCommand         String?

  // Economy & Unlocks
  unlockedChaosCardKeys String[]
  hasAbyssalScar       Boolean @default(false)
  canSeeArchive        Boolean @default(false)
  boons                Json    @default("[]")

  // Relations
  workspaces      Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  transactions    Transaction[]
  contributions   Contribution[]
  conversation    Conversation?
  pulseProfile    PulseProfile?
  securityAlerts  SecurityAlert[]
  workflowRuns    WorkflowRun[] @relation("WorkflowRunInitiator")
}

model Workspace {
  id               String      @id @default(cuid())
  name             String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  planTier         PlanTier    @default(Apprentice)
  credits          Decimal     @default(100.0) @db.Decimal(12, 2)
  potential        Decimal     @default(0.0)   @db.Decimal(18, 4)
  agentActionsUsed Int         @default(0)
  overageEnabled   Boolean     @default(true)
  unlockedAppIds   String[]

  // Relations
  ownerId          String
  owner            User        @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members          User[]      @relation("WorkspaceMembers")
  agents           Agent[]
  contacts         Contact[]
  transactions     Transaction[]
  securityAlerts   SecurityAlert[]
  threatFeeds      ThreatFeed[]
  securityEdicts   SecurityEdict[]
  integrations     Integration[]
  workflows        Workflow[]
  workflowRuns     WorkflowRun[]
  contributions    Contribution[]
  activeEffects    ActiveSystemEffect[]
  conversation     Conversation[]
  instrumentDiscoveries InstrumentDiscovery[]
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  messages    Json     @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace  Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([userId, workspaceId])
}

// --- AGENTIC & WORKFLOW MODELS ---

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model Workflow {
  id           String   @id @default(cuid())
  name         String
  definition   Json
  isActive     Boolean  @default(true)
  triggerType  String   @default("api")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  runs         WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  log            Json?
  output         Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  // Relations
  workflowId     String
  workflow       Workflow  @relation(fields: [workflowId], references: [id])
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id])
  initiatedBy    User?     @relation("WorkflowRunInitiator", fields: [userId], references: [id])
  userId         String?
}

// --- ECONOMIC ENGINE MODELS ---

model Transaction {
  id               String            @id @default(cuid())
  type             TransactionType
  amount           Decimal           @db.Decimal(12, 2)
  status           TransactionStatus @default(PENDING)
  description      String
  instrumentId     String?
  createdAt        DateTime          @default(now())

  // For Tribute Transactions
  luckWeight       Float?
  outcome          String?
  tributeAmount    Decimal?          @db.Decimal(12, 2)
  boonAmount       Decimal?          @db.Decimal(12, 2)
  judasFactor      Decimal?          @db.Decimal(8, 6)

  // For Transmutations
  isTransmutation    Boolean? @default(false)
  realWorldAmount    Decimal? @db.Decimal(12, 2)
  realWorldCurrency  String?
  vendorName         String?
  transmutationTithe Decimal? @db.Decimal(12, 2)

  // Relations
  workspaceId      String
  workspace        Workspace @relation(fields: [workspaceId], references: [id])
  userId           String?
  user             User?     @relation(fields: [userId], references: [id])
  aegisSignature   String?

  @@index([workspaceId, createdAt])
}

model PulseProfile {
  id                      String      @id @default(cuid())
  userId                  String      @unique
  user                    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Sine-Rhythm Engine parameters
  amplitude               Float       @default(0.15)
  frequency               Float       @default(0.01)
  phaseOffset             Float
  baselineLuck            Float       @default(0.4)

  // State Trackers
  lastEventTimestamp      DateTime    @default(now())
  consecutiveLosses       Int         @default(0)
  lastResolvedPhase       PulsePhase?
  lastInteractionType     PulseInteractionType?

  // Psychological Metrics (0.0 to 1.0)
  frustration             Float       @default(0.0)
  flowState               Float       @default(0.0)
  riskAversion            Float       @default(0.5)

  // Temporary Buffs
  nextTributeGuaranteedWin Boolean?
  loadedDieBuffCount      Int?
  hadesBargainActive      Boolean?
}

model PotentialAccrualLog {
  id               String      @id @default(cuid())
  workspaceId      String
  userId           String
  instrumentId     String
  luckWeight       Float
  potentialAwarded Decimal     @db.Decimal(18, 4)
  narrativeContext String?
  aegisSignature   String?
  createdAt        DateTime    @default(now())

  @@index([workspaceId, userId, createdAt])
}

model ChaosCard {
  key            String         @id
  name           String
  description    String
  cardClass      ChaosCardClass
  cost           Int
  systemEffect   String?
}

model ActiveSystemEffect {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}

model Renunciation {
  id                String   @id @default(cuid())
  userId            String
  renouncedItemType String
  renouncedItemName String
  valueInX          Decimal  @db.Decimal(18, 2)
  createdAt         DateTime @default(now())
  aegisSignature    String
}

// --- UTILITY & APPLICATION MODELS ---

model Contact {
  id          String   @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  actionableOptions Json
  timestamp         DateTime          @default(now())

  // Relations
  workspaceId       String
  workspace         Workspace @relation(fields: [workspaceId], references: [id])
  userId            String?
  user              User?     @relation(fields: [userId], references: [id])
}

model ThreatFeed {
  id          String @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, url])
}

model SecurityEdict {
  id           String   @id @default(cuid())
  description  String
  isActive     Boolean  @default(true)
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  createdAt    DateTime @default(now())
}

model Integration {
  id                    String   @id @default(cuid())
  workspaceId           String
  workspace             Workspace @relation(fields: [workspaceId], references: [id])
  integrationManifestId String
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model InstrumentDiscovery {
    id            String @id @default(cuid())
    userId        String
    workspaceId   String
    workspace     Workspace @relation(fields: [workspaceId], references: [id])
    instrumentId  String
    firstViewedAt DateTime @default(now())
    converted     Boolean  @default(false)
    dtt           Int?
    nudgeSentAt   DateTime?

    @@unique([userId, instrumentId])
}

model GlobalAgenticEvent {
  id                  String   @id @default(cuid())
  eventName           String
  status              EventStatus @default(ACTIVE)
  poolTarget          Decimal  @db.Decimal(18, 2)
  currentPool         Decimal  @db.Decimal(18, 2) @default(0)
  expiresAt           DateTime
  shardReward         String
  winningWorkspaceId  String?

  contributions       Contribution[]
  createdAt           DateTime @default(now())
}

model Contribution {
  id            String    @id @default(cuid())
  amount        Decimal   @db.Decimal(12, 2)
  createdAt     DateTime  @default(now())

  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  eventId       String
  event         GlobalAgenticEvent @relation(fields: [eventId], references: [id])
}
