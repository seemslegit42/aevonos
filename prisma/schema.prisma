
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  password              String
  firstName             String?
  lastName              String?
  agentAlias            String?
  role                  UserRole               @default(OPERATOR)
  psyche                UserPsyche             @default(ZEN_ARCHITECT)
  lastLoginAt           DateTime?
  reclamationGraceUntil DateTime?
  unlockedChaosCardKeys String[]               @default([])
  firstWhisper          String?
  foundingVow           String?
  foundingGoal          String?
  corePainIndex         Int?
  foundingBenediction   String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  workspaces            Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspaces       Workspace[]            @relation("WorkspaceOwner")
  transactions          Transaction[]
  discoveries           InstrumentDiscovery[]
  pulseProfile          PulseProfile?
  contributions         Contribution[]
}

model Workspace {
  id                String                 @id @default(cuid())
  name              String
  owner             User                   @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId           String
  members           User[]                 @relation("WorkspaceMembers")
  planTier          PlanTier               @default(Apprentice)
  credits           Decimal                @default(100.0)
  agentActionsUsed  Int                    @default(0)
  overageEnabled    Boolean                @default(false)
  unlockedAppIds    String[]               @default([])
  agents            Agent[]
  contacts          Contact[]
  transactions      Transaction[]
  securityAlerts    SecurityAlert[]
  conversations     Conversation[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  threatFeeds       ThreatFeed[]
  discoveries       InstrumentDiscovery[]
  activeEffects     ActiveSystemEffect[]
  contributions     Contribution[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
}

model Agent {
  id          String      @id @default(cuid())
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Transaction {
  id              String           @id @default(cuid())
  workspace       Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  user            User?            @relation(fields: [userId], references: [id])
  userId          String?
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?
  boonAmount      Decimal?
  judasFactor     Decimal?
  userPsyche      UserPsyche?
  createdAt       DateTime         @default(now())
}

model SecurityAlert {
  id              String            @id @default(cuid())
  workspace       Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  userId          String?
  type            String
  explanation     String
  riskLevel       SecurityRiskLevel
  actionableOptions String[]
  timestamp       DateTime          @default(now())
}

model Conversation {
  id          String   @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  userId      String   @unique
  messages    Json
  updatedAt   DateTime @updatedAt
}

model Workflow {
  id            String        @id @default(cuid())
  workspace     Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  name          String
  definition    Json
  isActive      Boolean       @default(true)
  triggerType   String        @default("api") // e.g., 'api', 'schedule', 'event'
  runs          WorkflowRun[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workflowId     String
  status         WorkflowRunStatus
  triggerPayload Json
  output         Json?
  log            Json[]
  startedAt      DateTime
  finishedAt     DateTime?
}

model ThreatFeed {
    id          String @id @default(cuid())
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId String
    url         String
    createdAt   DateTime @default(now())
}

model InstrumentDiscovery {
    id              String @id @default(cuid())
    user            User @relation(fields: [userId], references: [id])
    userId          String
    workspace       Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId     String
    instrumentId    String // e.g., 'RENO_MODE' or 'GEOLOGIC_TIME'
    firstViewedAt   DateTime @default(now())
    converted       Boolean @default(false)
    dtt             Int? // Discovery-to-Tribute time in minutes
    nudgeSentAt     DateTime?
}

model PulseProfile {
    id                  String  @id @default(cuid())
    user                User    @relation(fields: [userId], references: [id])
    userId              String  @unique
    baselineLuck        Float   @default(0.4)
    amplitude           Float   @default(0.15)
    frequency           Float   @default(0.01)
    phaseOffset         Float
    consecutiveLosses   Int     @default(0)
    lastEventTimestamp  DateTime @default(now())
    lastInteractionType PulseInteractionType @default(COMMAND_SUCCESS)
    lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)
    frustration         Float @default(0)
    flowState           Float @default(0)
    riskAversion        Float @default(0.3)
    nextTributeGuaranteedWin Boolean @default(false)
    loadedDieBuffCount  Int @default(0)
    hadesBargainActive  Boolean @default(false)
}

model ActiveSystemEffect {
    id           String @id @default(cuid())
    workspace    Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId  String
    cardKey      String
    expiresAt    DateTime
    createdAt    DateTime @default(now())
}

model ChaosCard {
  key            String         @id
  name           String
  description    String
  cardClass      ChaosCardClass
  cost           Int
  systemEffect   String
}

model GlobalAgenticEvent {
  id                  String @id @default(cuid())
  eventName           String
  status              EventStatus @default(ACTIVE)
  poolTarget          Decimal
  currentPool         Decimal @default(0)
  expiresAt           DateTime
  shardReward         String
  winningWorkspaceId  String?
  contributions       Contribution[]
  createdAt           DateTime @default(now())
}

model Contribution {
  id            String @id @default(cuid())
  event         GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  eventId       String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  user          User @relation(fields: [userId], references: [id])
  userId        String
  amount        Decimal
  createdAt     DateTime @default(now())
}

model Integration {
  id                    String            @id @default(cuid())
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId           String
  integrationManifestId String            // This will be a UUID string linking to the static manifest
  name                  String            // User-defined name for this instance
  status                IntegrationStatus @default(active)
  configDetails         Json?             // Encrypted API keys, tokens, etc.
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
    ZEN_ARCHITECT
    SYNDICATE_ENFORCER
    RISK_AVERSE_ARTISAN
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
    WIN
    LOSS
    COMMAND_SUCCESS
    COMMAND_FAILURE
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
    BOON
}

enum EventStatus {
    ACTIVE
    CONCLUDED
    FAILED
}

enum IntegrationStatus {
    active
    inactive
    error
}
