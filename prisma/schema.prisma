
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id               String          @id @default(cuid())
  email            String          @unique
  password         String
  firstName        String?
  lastName         String?
  role             UserRole        @default(OPERATOR)
  ownedChaosCards  ChaosCard[]     @relation("UserOwnedChaosCards")
  pulseProfile     PulseProfile?
  ownedWorkspaces  Workspace[]     @relation("WorkspaceOwner")
  workspaces       Workspace[]     @relation("WorkspaceMembers")
  transactions     Transaction[]
  lastLoginAt      DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Workspace {
  id                  String        @id @default(cuid())
  name                String
  ownerId             String
  owner               User          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members             User[]        @relation("WorkspaceMembers")
  planTier            PlanTier      @default(Apprentice)
  credits             Decimal       @default(0)
  agentActionsUsed    Int           @default(0)
  overageEnabled      Boolean       @default(true)
  unlockedAppIds      String[]      @default([])
  agents              Agent[]
  securityAlerts      SecurityAlert[]
  contacts            Contact[]
  workflows           Workflow[]
  workflowRuns        WorkflowRun[]
  transactions        Transaction[]
  integrations        Integration[]
  threatFeeds         ThreatFeed[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Agent {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  isAcknowledged    Boolean           @default(false)
}

model Contact {
  id               String    @id @default(cuid())
  workspaceId      String
  workspace        Workspace @relation(fields: [workspaceId], references: [id])
  firstName        String?
  lastName         String?
  email            String?
  phone            String?
  customProperties Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Workflow {
  id             String          @id @default(cuid())
  workspaceId    String
  workspace      Workspace       @relation(fields: [workspaceId], references: [id])
  name           String
  definition     Json
  isActive       Boolean         @default(true)
  triggerType    String          @default("api")
  workflowRuns   WorkflowRun[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Transaction {
  id            String          @id @default(cuid())
  workspaceId   String
  workspace     Workspace       @relation(fields: [workspaceId], references: [id])
  type          TransactionType
  amount        Decimal
  description   String
  status        TransactionStatus @default(COMPLETED)
  userId        String?
  user          User?           @relation(fields: [userId], references: [id])
  agentId       String?
  createdAt     DateTime        @default(now())
}

model Integration {
    id                    String @id @default(cuid())
    workspaceId           String
    workspace             Workspace @relation(fields: [workspaceId], references: [id])
    integrationManifestId String // Corresponds to IntegrationManifest.id
    name                  String
    status                String
    configDetails         Json
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt
}

model ThreatFeed {
    id          String @id @default(cuid())
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    url         String
    name        String?
    lastChecked DateTime?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model ChaosCard {
  id           String      @id @default(cuid())
  key          String      @unique // e.g., 'WEEPING_GLASS'
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  owners       User[]      @relation("UserOwnedChaosCards")
}

model PulseProfile {
  id                String     @id @default(cuid())
  userId            String     @unique
  user              User       @relation(fields: [userId], references: [id])
  amplitude         Float      @default(0.15)
  frequency         Float      @default(0.01) // cycles per minute
  phaseOffset       Float
  baselineLuck      Float      @default(0.5)
  consecutiveLosses Int        @default(0)
  lastResolvedPhase PulsePhase @default(EQUILIBRIUM)
  lastWinTimestamp  DateTime   @default(now())
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum AgentStatus {
  idle
  active
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
