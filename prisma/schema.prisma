// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole                @default(OPERATOR)
  psyche                  UserPsyche              @default(ZEN_ARCHITECT)
  agentAlias              String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  lastLoginAt             DateTime?
  workspaces              Workspace[]             @relation("WorkspaceMembers")
  ownedWorkspace          Workspace?              @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
  unlockedChaosCardKeys   String[]
  reclamationGraceUntil   DateTime?
  corePainIndex           Float?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  firstCommand            String?
  contributions           Contribution[]
}

model Workspace {
  id                   String                 @id @default(cuid())
  name                 String
  ownerId              String                 @unique
  owner                User                   @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members              User[]                 @relation("WorkspaceMembers")
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  planTier             PlanTier               @default(Apprentice)
  credits              Decimal                @default(0)
  agentActionsUsed     Int                    @default(0)
  overageEnabled       Boolean                @default(false)
  agents               Agent[]
  contacts             Contact[]
  transactions         Transaction[]
  securityAlerts       SecurityAlert[]
  unlockedAppIds       String[]
  securityEdicts       SecurityEdict[]
  threatFeeds          ThreatFeed[]
  workflows            Workflow[]
  workflowRuns         WorkflowRun[]
  conversations        Conversation[]
  instrumentDiscoveries InstrumentDiscovery[]
  activeSystemEffects  ActiveSystemEffect[]
  winningEvents        GlobalAgenticEvent[]
  contributions        Contribution[]
}

model Agent {
  id           String      @id @default(cuid())
  name         String
  type         String // e.g., 'winston-wolfe', 'dr-syntax'
  description  String?
  status       AgentStatus
  workspaceId  String
  workspace    Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  @@index([workspaceId])
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  firstName   String?
  lastName    String?
  email       String?   
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, email])
  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]

  @@index([workspaceId])
}

model Transaction {
  id             String          @id @default(cuid())
  workspaceId    String
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  type           TransactionType
  amount         Decimal
  description    String
  status         TransactionStatus
  createdAt      DateTime        @default(now())
  agentId        String?
  instrumentId   String?
  luckWeight     Float?
  outcome        String?
  boonAmount     Decimal?
  tributeAmount  Decimal?
  judasFactor    Decimal?
  userPsyche     UserPsyche?

  @@index([workspaceId])
}

model Workflow {
  id           String        @id @default(cuid())
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name         String
  definition   Json
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  runs         WorkflowRun[]

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: NoAction)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json
  output         Json?
  log            Json[]
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  @@index([workflowId])
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json[]
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
}

model PulseProfile {
  id                 String                @id @default(cuid())
  user               User                  @relation(fields: [userId], references: [id])
  userId             String                @unique
  baselineLuck       Float                 @default(0.4) // Center of the sine wave
  amplitude          Float                 @default(0.15) // How high/low the wave goes
  frequency          Float                 @default(0.01) // How fast the wave oscillates
  phaseOffset        Float                 @default(0) // Random offset per user
  consecutiveLosses  Int                   @default(0)
  lastEventTimestamp DateTime              @default(now())
  lastResolvedPhase  PulsePhase            @default(EQUILIBRIUM)
  lastInteractionType PulseInteractionType @default(COMMAND_SUCCESS)
  frustration        Float                 @default(0) // 0 to 1
  flowState          Float                 @default(0) // 0 to 1
  riskAversion       Float                 @default(0.5) // 0 to 1
  loadedDieBuffCount Int                   @default(0)
  nextTributeGuaranteedWin Boolean         @default(false)
  hadesBargainActive Boolean               @default(false)
}

model InstrumentDiscovery {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId   String // The ID from the artifact manifest
  firstViewedAt  DateTime  @default(now())
  converted      Boolean   @default(false)
  dtt            Int? // Discovery-to-tribute time in minutes
  nudgeSentAt    DateTime?

  @@unique([userId, instrumentId])
  @@index([userId, converted, nudgeSentAt])
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())

  @@index([workspaceId, expiresAt])
}

model GlobalAgenticEvent {
  id                 String      @id @default(cuid())
  eventName          String
  status             EventStatus @default(ACTIVE)
  expiresAt          DateTime
  poolTarget         Decimal
  currentPool        Decimal     @default(0)
  shardReward        String
  createdAt          DateTime    @default(now())
  winningWorkspaceId String?
  winningWorkspace   Workspace?  @relation(fields: [winningWorkspaceId], references: [id])
  contributions      Contribution[]

  @@index([status])
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  createdAt   DateTime           @default(now())

  @@index([eventId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  url         String
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}

model SecurityEdict {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  description String    @db.Text
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String // This is the UUID from the static manifest
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([workspaceId])
}

// ENUMS
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

model ChaosCard {
  id           String       @id @default(cuid())
  key          String       @unique // e.g., 'GEOLOGIC_TIME'
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  createdAt    DateTime     @default(now())
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

enum IntegrationStatus {
    active
    inactive
    error
}
