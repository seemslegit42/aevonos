// This is the complete schema from the previous turn
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  firstName               String?
  lastName                String?
  role                    UserRole  @default(OPERATOR)
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  agentAlias              String?
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  unlockedChaosCardKeys   String[]
  hasAbyssalScar          Boolean   @default(false)
  canSeeArchive           Boolean   @default(false)
  boons                   Json      @default("[]")
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  workspaces              Workspace[]
  ownedWorkspaces         Workspace[]        @relation("OwnedWorkspaces")
  contributions           Contribution[]
  pulseProfile            PulseProfile?

  foundingVow         String?
  foundingGoal        String?
  corePainIndex       Int?
  foundingBenediction String?
  firstWhisper        String?
  firstCommand        String?
}

model Workspace {
  id                    String    @id @default(cuid())
  name                  String
  ownerId               String
  owner                 User      @relation("OwnedWorkspaces", fields: [ownerId], references: [id], onDelete: Cascade)
  planTier              PlanTier  @default(Apprentice)
  credits               Decimal   @default(100.0)
  agentActionsUsed      Int       @default(0)
  unlockedAppIds        String[]
  overageEnabled        Boolean   @default(false)
  potential             Decimal   @default(0.0)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  members              User[]
  agents               Agent[]
  contacts             Contact[]
  securityAlerts       SecurityAlert[]
  workflows            Workflow[]
  workflowRuns         WorkflowRun[]
  transactions         Transaction[]
  instrumentDiscoveries InstrumentDiscovery[]
  threatFeeds          ThreatFeed[]
  securityEdicts       SecurityEdict[]
  activeSystemEffects  ActiveSystemEffect[]
  contributions        Contribution[]
  conversations        Conversation[]
}

model Agent {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
}

model Workflow {
  id           String        @id @default(cuid())
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name         String
  definition   Json
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  runs         WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Transaction {
  id                 String             @id @default(cuid())
  workspaceId        String
  workspace          Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId             String?
  type               TransactionType
  amount             Decimal
  description        String
  status             TransactionStatus
  instrumentId       String?
  luckWeight         Float?
  outcome            String?
  boonAmount         Decimal?
  tributeAmount      Decimal?
  judasFactor        Decimal?
  userPsyche         UserPsyche?
  isTransmutation    Boolean            @default(false)
  realWorldAmount    Decimal?
  realWorldCurrency  String?
  vendorName         String?
  transmutationTithe Decimal?
  aegisSignature     String?
  createdAt          DateTime           @default(now())
}

model PulseProfile {
  id                    String        @id @default(cuid())
  userId                String        @unique
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  sreWave               Float?
  lastEventTimestamp    DateTime      @default(now())
  consecutiveLosses     Int           @default(0)
  phaseOffset           Float
  baselineLuck          Float         @default(0.4)
  amplitude             Float         @default(0.15)
  frequency             Float         @default(0.01)
  frustration           Float         @default(0)
  flowState             Float         @default(0)
  riskAversion          Float         @default(0.5)
  lastInteractionType   PulseInteractionType?
  lastResolvedPhase     PulsePhase?
  loadedDieBuffCount    Int           @default(0)
  nextTributeGuaranteedWin Boolean?
  hadesBargainActive    Boolean?
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  userId       String
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId String
  firstViewedAt DateTime @default(now())
  converted    Boolean   @default(false)
  dtt          Int? // Discovery-to-tribute time in minutes
  nudgeSentAt  DateTime?
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime  @default(now())
}

model SecurityEdict {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  description String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
}

model ChaosCard {
  id           String         @id @default(cuid())
  key          String         @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String?
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
}

model GlobalAgenticEvent {
  id                   String         @id @default(cuid())
  eventName            String
  status               EventStatus    @default(ACTIVE)
  poolTarget           Decimal
  currentPool          Decimal        @default(0.0)
  expiresAt            DateTime
  shardReward          String // The key of the ChaosCard or Boon being offered
  winningWorkspaceId   String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  contributions        Contribution[]
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  createdAt   DateTime           @default(now())
}

model Conversation {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  userId      String   @unique
  messages    Json
  updatedAt   DateTime @updatedAt
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String // UUID of the manifest
  name                  String
  status                IntegrationStatus
  configDetails         Json // Encrypted API keys, etc.
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model Renunciation {
  id                String   @id @default(cuid())
  userId            String
  renouncedItemType String
  renouncedItemName String
  valueInX          BigInt
  createdAt         DateTime @default(now())
  aegisSignature    String
}

model PotentialAccrualLog {
  id                 String    @id @default(cuid())
  workspaceId        String
  userId             String
  instrumentId       String
  luckWeight         Float
  potentialAwarded   Decimal
  aegisSignature     String?
  narrativeContext   String?
  createdAt          DateTime  @default(now())
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}
