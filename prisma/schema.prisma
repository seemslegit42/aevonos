
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  firstName       String?
  lastName        String?
  role            UserRole  @default(OPERATOR)
  psyche          UserPsyche @default(ZEN_ARCHITECT)
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  workspaces      Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")

  transactions    Transaction[]
  discoveries     InstrumentDiscovery[]
  ownedChaosCards ChaosCard[] @relation("OwnedChaosCards")
  pulseProfile    PulseProfile?
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
  AGENTIC_EXPLORER
}

model Workspace {
  id               String    @id @default(cuid())
  name             String
  ownerId          String
  owner            User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  planTier         PlanTier  @default(Artisan)
  credits          Decimal   @default(0.0)
  agentActionsUsed Int       @default(0)
  overageEnabled   Boolean   @default(true)
  unlockedAppIds   String[]  @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members      User[]          @relation("WorkspaceMembers")
  agents       Agent[]
  securityAlerts SecurityAlert[]
  contacts     Contact[]
  workflows    Workflow[]
  workflowRuns WorkflowRun[]
  transactions Transaction[]
  integrations Integration[]
  threatFeeds  ThreatFeed[]
  discoveries  InstrumentDiscovery[]
}

enum PlanTier {
  Apprentice // Free
  Artisan    // Pro
  Priesthood // Enterprise
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  lastActivityAt DateTime?
  
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workspaceId, email])
}


model Workflow {
  id           String    @id @default(cuid())
  name         String
  isActive     Boolean   @default(true)
  triggerType  String    @default("api")
  definition   Json
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs         WorkflowRun[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model WorkflowRun {
  id              String            @id @default(cuid())
  workflowId      String
  workflow        Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status          WorkflowRunStatus
  triggerPayload  Json?
  output          Json?
  log             Json?
  startedAt       DateTime          @default(now())
  finishedAt      DateTime?
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}


model Transaction {
  id           String            @id @default(cuid())
  workspaceId  String
  workspace    Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId       String?
  user         User?             @relation(fields: [userId], references: [id])
  agentId      String?
  
  type         TransactionType
  status       TransactionStatus @default(COMPLETED)
  amount       Decimal
  description  String

  // For Folly Instruments
  instrumentId String?
  luckWeight   Float?
  outcome      String?
  boonAmount   Decimal?

  createdAt DateTime @default(now())
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Integration {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String
  name String
  status String
  configDetails Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThreatFeed {
  id String @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url String

  @@unique([workspaceId, url])
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId String // This can be a MicroApp ID or a Chaos Card Key
  firstViewedAt DateTime  @default(now())
  converted    Boolean   @default(false)
  // Time To Tribute (in minutes), calculated on conversion
  dtt          Int?
  nudgeSentAt  DateTime?

  @@unique([userId, instrumentId])
  @@index([userId])
  @@index([workspaceId])
}

model ChaosCard {
  id           String @id @default(cuid())
  key          String @unique // e.g., 'WEEPING_GLASS'
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  
  owners       User[] @relation("OwnedChaosCards")

  @@index([key])
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

model PulseProfile {
  id                   String      @id @default(cuid())
  userId               String      @unique
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  amplitude            Float       @default(0.15) // How much luck swings
  frequency            Float       @default(0.1) // How fast luck swings over time (in minutes)
  phaseOffset          Float       @default(0.0) // Random start point for the sine wave
  baselineLuck         Float       @default(0.5)
  consecutiveLosses    Int         @default(0)
  lastEventTimestamp   DateTime    @default(now())
  lastResolvedPhase    PulsePhase  @default(EQUILIBRIUM)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}
