// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime @default(now())

  firstName String?
  lastName  String?

  role   UserRole @default(OPERATOR)
  psyche UserPsyche @default(ZEN_ARCHITECT)
  
  agentAlias            String?
  foundingVow           String?
  foundingGoal          String?
  foundingBenediction   String?
  corePainIndex         Int?
  firstWhisper          String?
  firstCommand          String?
  reclamationGraceUntil DateTime?

  // A user can be a member of multiple workspaces
  workspaces Workspace[]

  // A user has one wallet per workspace, but this relation isn't direct. It's through Workspace.
  // A user has one pulse profile.
  pulseProfile PulseProfile?
  
  // A user owns all their transactions across all workspaces
  transactions Transaction[]
  
  // What chaos cards the user has personally unlocked (not tied to a workspace)
  unlockedChaosCardKeys String[]

  // Tracks what the user has seen in the Armory
  instrumentDiscoveries InstrumentDiscovery[]

  // What they have contributed to
  contributions Contribution[]

  // What security alerts are tied to them
  securityAlerts SecurityAlert[]
}

model Workspace {
  id                String    @id @default(cuid())
  name              String
  planTier          PlanTier  @default(Apprentice)
  credits           Decimal   @default(100.0) @db.Decimal(12, 4)
  potential         Decimal   @default(0) @db.Decimal(18, 8)
  agentActionsUsed  Int       @default(0)
  overageEnabled    Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  ownerId           String
  owner             User      @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "owner_fk") // Explicitly name relation to avoid ambiguity
  members           User[]

  contacts      Contact[]
  agents        Agent[]
  workflows     Workflow[]
  workflowRuns  WorkflowRun[]
  transactions  Transaction[]
  integrations  Integration[]
  
  // Workspace-level unlocks
  unlockedAppIds String[]

  // Workspace-level configurations and logs
  pulseEngineConfig    PulseEngineConfig?
  potentialAccrualLogs PotentialAccrualLog[]
  activeSystemEffects  ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
  contributions Contribution[]
  securityAlerts SecurityAlert[]
  threatFeeds    ThreatFeed[]
  securityEdicts SecurityEdict[]

  purchaseOrders PurchaseOrder[]
  products Product[]
  suppliers Supplier[]
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([workspaceId, email])
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Workflow {
  id          String          @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean         @default(true)
  triggerType String          @default("api")
  workspaceId String
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Transaction {
  id           String          @id @default(cuid())
  workspaceId  String
  workspace    Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId       String?
  user         User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  type         TransactionType
  status       TransactionStatus @default(COMPLETED)
  amount       Decimal         @db.Decimal(12, 4) // Net amount
  description  String
  
  // For Folly Instruments
  instrumentId  String?
  luckWeight    Float?
  outcome       String?
  tributeAmount Decimal? @db.Decimal(12, 4)
  boonAmount    Decimal? @db.Decimal(12, 4)
  judasFactor   Decimal? @db.Decimal(5,4)
  userPsyche    UserPsyche?

  // For real-world transmutations
  isTransmutation Boolean? @default(false)
  realWorldAmount Decimal? @db.Decimal(12, 2)
  realWorldCurrency String?
  vendorName String?
  transmutationTithe Decimal? @db.Decimal(12, 4)
  
  createdAt    DateTime        @default(now())
  aegisSignature String?
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String // This is the UUID from the static manifest config
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json // Encrypted credentials
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

// Model for tracking user's psychological state for Klepsydra Engine
model PulseProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // SRE Parameters
  amplitude   Float    @default(0.2) // How much the sine wave deviates
  frequency   Float    @default(0.01) // How fast the sine wave oscillates
  phaseOffset Float    // Random start point for the user's sine wave
  baselineLuck Float   @default(0.5) // User's base probability anchor

  // State Tracking
  lastEventTimestamp      DateTime              @default(now())
  consecutiveLosses       Int                   @default(0)
  lastResolvedPhase       PulsePhase?
  lastInteractionType     PulseInteractionType?
  
  // Psychological Metrics (0.0 to 1.0)
  frustration             Float                 @default(0.0)
  flowState               Float                 @default(0.0)
  riskAversion            Float                 @default(0.5)

  // One-time buffs from Chaos Cards
  nextTributeGuaranteedWin Boolean? @default(false)
  loadedDieBuffCount      Int?     @default(0)
  hadesBargainActive      Boolean? @default(false)
}

// Configuration for the Pulse Engine, per workspace, managed by Architect
model PulseEngineConfig {
  id                     String    @id @default(cuid())
  workspaceId            String    @unique
  workspace              Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  pityThreshold          Int       @default(5)
  festivalTriggerPercent Int       @default(25)
  transmutationTithe     Decimal   @default(0.18) @db.Decimal(5, 4) // 18%
}

// Log for the non-spendable meta-asset, Potential (Î¦)
model PotentialAccrualLog {
  id               String    @id @default(cuid())
  workspaceId      String
  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId           String
  instrumentId     String
  luckWeight       Float
  potentialAwarded Decimal   @db.Decimal(18, 8)
  narrativeContext String
  createdAt        DateTime  @default(now())
  aegisSignature   String?
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  messages    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// This model stores the list of Chaos Cards available in the system.
// It is seeded from the artifacts manifest.
model ChaosCard {
    key           String @id
    name          String
    description   String @db.Text
    cardClass     ChaosCardClass
    cost          Int
    systemEffect  String @db.Text
    rarity        String?
    durationMinutes Int?
}

// This model tracks which system-wide effects (from Chaos Cards) are currently active for a workspace.
model ActiveSystemEffect {
    id          String   @id @default(cuid())
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    cardKey     String   // The ID of the Chaos Card that triggered this effect
    expiresAt   DateTime
    createdAt   DateTime @default(now())

    @@index([workspaceId, expiresAt])
}

// Log to track when a user first views an instrument in the Armory
model InstrumentDiscovery {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId String // The artifact ID from the manifest
  firstViewedAt DateTime @default(now())
  
  // Tracking conversion
  converted Boolean @default(false)
  dtt Int? // Discovery to Tribute Time in minutes

  // For Nudge Engine
  nudgeSentAt DateTime?

  @@unique([userId, instrumentId])
}

model GlobalAgenticEvent {
  id String @id @default(cuid())
  eventName String
  status EventStatus @default(ACTIVE)
  poolTarget Decimal @db.Decimal(18, 4)
  currentPool Decimal @default(0) @db.Decimal(18, 4)
  expiresAt DateTime
  
  winningWorkspaceId String?
  
  shardReward String? // ID of the Chaos Card to be awarded

  contributions Contribution[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contribution {
  id String @id @default(cuid())
  amount Decimal @db.Decimal(12, 4)
  
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  
  eventId String
  event GlobalAgenticEvent @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
}

model ThreatFeed {
  id          String   @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([workspaceId, url])
}

model SecurityEdict {
  id          String   @id @default(cuid())
  description String   @db.Text
  isActive    Boolean  @default(true)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([workspaceId, description])
}

// Inventory Management
model Product {
    id          String @id @default(cuid())
    name        String
    description String?
    stockLevel  Int @default(0)
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    purchaseOrderItems PurchaseOrderItem[]
}

model Supplier {
    id String @id @default(cuid())
    name String
    contactEmail String?
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
    id String @id @default(cuid())
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    supplierId String
    supplier Supplier @relation(fields: [supplierId], references: [id])
    status PurchaseOrderStatus @default(PENDING)
    createdAt DateTime @default(now())
    items PurchaseOrderItem[]
}

model PurchaseOrderItem {
    id String @id @default(cuid())
    purchaseOrderId String
    purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    productId String
    product Product @relation(fields: [productId], references: [id])
    quantity Int
}


enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
    ZEN_ARCHITECT
    SYNDICATE_ENFORCER
    RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE // Special type for Folly Instruments
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum PurchaseOrderStatus {
    PENDING
    SUBMITTED
    COMPLETED
    CANCELLED
}

enum PulsePhase {
    CREST
    TROUGH
    EQUILIBRIUM
}

enum PulseInteractionType {
    WIN
    LOSS
    COMMAND_SUCCESS
    COMMAND_FAILURE
}

enum EventStatus {
    ACTIVE
    CONCLUDED
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
    BOON
}
