// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  role          UserRole  @default(OPERATOR)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  workspaces    Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  transactions  Transaction[]
}

model Workspace {
  id             String        @id @default(cuid())
  name           String
  ownerId        String
  owner          User          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members        User[]        @relation("WorkspaceMembers")
  planTier       PlanTier      @default(Apprentice)
  agentActionsUsed Int         @default(0)
  credits        Decimal       @default(0.0) @db.Decimal(10, 2)
  overageEnabled Boolean       @default(true)
  unlockedAppIds String[]      @default([])

  agents       Agent[]
  contacts     Contact[]
  securityAlerts SecurityAlert[]
  threatFeeds  ThreatFeed[]
  transactions Transaction[]
  workflows    Workflow[]
  integrations Integration[]
  workflowRuns WorkflowRun[]
  
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN // Can manage workspace, billing, and users
  MANAGER // Can manage projects and assigned users
  OPERATOR // Standard user, can run agents and workflows
  AUDITOR // Read-only access to logs and reports
}

model Agent {
  id           String      @id @default(cuid())
  name         String
  type         String
  description  String?
  status       AgentStatus
  workspace    Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Contact {
  id          String     @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
}

model Transaction {
  id          String            @id @default(cuid())
  type        TransactionType
  amount      Decimal           @db.Decimal(10, 2)
  description String
  status      TransactionStatus @default(COMPLETED)
  workspace   Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId String
  user        User?             @relation(fields: [userId], references: [id])
  userId      String?
  agentId     String?
  createdAt   DateTime          @default(now())
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean       @default(true)
  triggerType String        @default("api")
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId String
  runs        WorkflowRun[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workflowId     String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId    String
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model Integration {
  id                    String    @id @default(cuid())
  integrationManifestId String    // Maps to the manifest UUID
  name                  String
  status                String    @default("active")
  configDetails         Json
  workspace             Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId           String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}
