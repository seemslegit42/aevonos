
// datasource db defines the database connection details.
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
}

// generator client tells Prisma to generate the Prisma Client.
generator client {
  provider = "prisma-client-js"
}

// User model represents the users of the application.
model User {
  id                      String   @id @default(cuid())
  email                   String   @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole @default(OPERATOR)
  psyche                  UserPsyche @default(ZEN_ARCHITECT)
  agentAlias              String?
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime? // For the Rite of Reclamation gift
  
  // Fields from the Rite of Invocation
  foundingVow           String?   @db.Text
  foundingGoal          String?   @db.Text
  corePainIndex         Int?
  foundingBenediction   String?   @db.Text
  firstWhisper          String?   @db.Text

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  workspaces              Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[] @relation("WorkspaceOwner")
  transactions            Transaction[]
  conversations           Conversation[]
  pulseProfile            PulseProfile?
  ownedChaosCards         ChaosCard[] @relation("UserOwnedChaosCards")
  instrumentDiscoveries   InstrumentDiscovery[]
}

// Workspace model represents the multi-tenant container for all data.
model Workspace {
  id                String   @id @default(cuid())
  name              String
  ownerId           String
  planTier          PlanTier @default(Apprentice)
  credits           Decimal  @default(0.0) @db.Decimal(10, 2)
  agentActionsUsed  Int      @default(0)
  unlockedAppIds    String[] @default([])
  overageEnabled    Boolean  @default(true)

  owner             User     @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members           User[]   @relation("WorkspaceMembers")
  agents            Agent[]
  contacts          Contact[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  transactions      Transaction[]
  conversations     Conversation[]
  activeSystemEffects ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Agent model represents a deployed AI agent instance.
model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus @default(idle)
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Contact model for the simple CRM.
model Contact {
  id          String    @id @default(cuid())
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Workflow {
    id            String @id @default(cuid())
    name          String
    definition    Json
    isActive      Boolean @default(true)
    triggerType   String  @default("api")
    workspaceId   String
    workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    runs          WorkflowRun[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model WorkflowRun {
    id              String @id @default(cuid())
    workflowId      String
    workflow        Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
    workspaceId     String
    workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    status          WorkflowRunStatus
    triggerPayload  Json?
    startedAt       DateTime
    finishedAt      DateTime?
    output          Json?
    log             Json?
}

model SecurityAlert {
    id                  String @id @default(cuid())
    type                String
    explanation         String @db.Text
    riskLevel           SecurityRiskLevel
    timestamp           DateTime @default(now())
    actionableOptions   String[]
    workspaceId         String
    workspace           Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ThreatFeed {
  id            String    @id @default(cuid())
  url           String
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
}

model Transaction {
    id              String @id @default(cuid())
    workspaceId     String
    workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    userId          String?
    user            User? @relation(fields: [userId], references: [id], onDelete: SetNull)
    agentId         String?
    type            TransactionType
    amount          Decimal @db.Decimal(10, 2)
    description     String
    status          TransactionStatus
    
    // Fields for Tribute transactions
    instrumentId    String?
    luckWeight      Float?
    outcome         String?
    boonAmount      Decimal? @db.Decimal(10, 2)
    userPsyche      UserPsyche?

    createdAt       DateTime @default(now())
}

model Integration {
  id                      String   @id @default(cuid())
  workspaceId             String
  integrationManifestId   String // UUID from the manifest file
  name                    String // User-defined name for this instance
  status                  IntegrationStatus @default(active)
  configDetails           Json? // Encrypted details
  lastSync                DateTime?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model Conversation {
    id            String @id @default(cuid())
    userId        String @unique
    user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspaceId   String
    workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    messages      Json[] // Array of serialized BaseMessage objects
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model PulseProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id])
  baselineLuck        Float    @default(0.5)
  amplitude           Float    @default(0.15) // How much luck oscillates
  frequency           Float    @default(0.01) // How fast luck oscillates
  phaseOffset         Float    // Unique starting point for the user's pulse wave
  consecutiveLosses   Int      @default(0)
  lastEventTimestamp  DateTime @default(now())
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model ChaosCard {
  id            String @id @default(cuid())
  key           String @unique // e.g., 'GEOLOGIC_TIME'
  name          String
  description   String
  cardClass     ChaosCardClass
  cost          Int
  systemEffect  String
  owners        User[] @relation("UserOwnedChaosCards")
}

model ActiveSystemEffect {
    id            String @id @default(cuid())
    workspaceId   String
    workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    cardKey       String
    expiresAt     DateTime
    createdAt     DateTime @default(now())
}

model InstrumentDiscovery {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId    String   // ID of the MicroApp or ChaosCard
  firstViewedAt   DateTime @default(now())
  converted       Boolean  @default(false)
  nudgeSentAt     DateTime?
  dtt             Int? // Discovery-to-Tribute time in minutes

  @@unique([userId, instrumentId])
}


enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
    Apprentice
    Artisan
    Priesthood
}

enum AgentStatus {
    active
    processing
    idle
    paused
    error
}

enum WorkflowRunStatus {
    pending
    running
    completed
    failed
    paused
}

enum SecurityRiskLevel {
    none
    low
    medium
    high
    critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  paused
  error
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}
