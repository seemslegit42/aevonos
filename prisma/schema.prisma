// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Core Tenancy & User Models ---

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole                @default(OPERATOR)
  psyche                  UserPsyche              @default(ZEN_ARCHITECT)
  agentAlias              String                  @default("BEEP")
  unlockedChaosCardKeys   String[]
  hasAbyssalScar          Boolean                 @default(false)
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Float?
  foundingBenediction     String?
  firstWhisper            String?
  firstCommand            String?

  workspaces              Workspace[]             @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]             @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
  contributions           Contribution[]
}

model Workspace {
  id                  String               @id @default(cuid())
  name                String
  ownerId             String
  planTier            PlanTier             @default(Apprentice)
  credits             Decimal              @default(0.0)
  potential           Decimal              @default(0.0)
  agentActionsUsed    Int                  @default(0)
  unlockedAppIds      String[]
  overageEnabled      Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  owner               User                 @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members             User[]               @relation("WorkspaceMembers")
  agents              Agent[]
  contacts            Contact[]
  securityAlerts      SecurityAlert[]
  conversations       Conversation[]
  workflows           Workflow[]
  workflowRuns        WorkflowRun[]
  transactions        Transaction[]
  instrumentDiscoveries InstrumentDiscovery[]
  activeSystemEffects ActiveSystemEffect[]
  securityEdicts      SecurityEdict[]
  threatFeeds         ThreatFeed[]
  contributions       Contribution[]
  globalAgenticEvents GlobalAgenticEvent[] @relation("WinningWorkspace")
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

// --- Agentic & Workflow Models ---

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean       @default(true)
  triggerType String        @default("api")
  workspaceId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workspaceId    String
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  workflow  Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

// --- Economic Engine Models ---

model Transaction {
  id             String          @id @default(cuid())
  workspaceId    String
  userId         String?
  type           TransactionType
  amount         Decimal
  description    String
  status         TransactionStatus @default(COMPLETED)
  createdAt      DateTime        @default(now())

  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?
  boonAmount      Decimal?
  judasFactor     Decimal?
  userPsyche      UserPsyche?
  aegisSignature  String?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id])
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model PulseProfile {
  id                    String        @id @default(cuid())
  userId                String        @unique
  baselineLuck          Float         @default(0.4)
  amplitude             Float         @default(0.15)
  frequency             Float         @default(0.01)
  phaseOffset           Float
  consecutiveLosses     Int           @default(0)
  lastEventTimestamp    DateTime      @default(now())

  frustration           Float         @default(0.0)
  flowState             Float         @default(0.0)
  riskAversion          Float         @default(0.0)
  lastResolvedPhase     PulsePhase?
  lastInteractionType   PulseInteractionType?
  
  nextTributeGuaranteedWin Boolean? @default(false)
  loadedDieBuffCount    Int?     @default(0)
  hadesBargainActive    Boolean? @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}


model PotentialAccrualLog {
  id               String   @id @default(cuid())
  workspaceId      String
  userId           String
  instrumentId     String
  luckWeight       Float
  potentialAwarded Decimal
  narrativeContext String
  createdAt        DateTime @default(now())
  aegisSignature   String?
}

model ChaosCard {
  id           String @id @default(cuid())
  key          String @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

model ActiveSystemEffect {
    id          String   @id @default(cuid())
    workspaceId String
    cardKey     String
    expiresAt   DateTime
    createdAt   DateTime @default(now())
    
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

// --- Nudge Engine ---
model InstrumentDiscovery {
    id              String @id @default(cuid())
    userId          String
    workspaceId     String
    instrumentId    String // e.g., 'reno-mode' or 'GEOLOGIC_TIME'
    firstViewedAt   DateTime @default(now())
    converted       Boolean @default(false)
    dtt             Int? // Discovery to Tribute Time in minutes
    nudgeSentAt     DateTime?
    
    user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}


// --- Utility & Application Models ---

model Contact {
  id          String   @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  userId            String?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

model SecurityEdict {
  id          String   @id @default(cuid())
  workspaceId String
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}


model ThreatFeed {
  id          String   @id @default(cuid())
  workspaceId String
  url         String
  createdAt   DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  messages    Json[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Contribution {
  id          String   @id @default(cuid())
  amount      Decimal
  userId      String
  workspaceId String
  eventId     String
  createdAt   DateTime @default(now())
  
  user        User               @relation(fields: [userId], references: [id])
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
}

model GlobalAgenticEvent {
  id                 String   @id @default(cuid())
  eventName          String
  status             EventStatus @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal  @default(0)
  expiresAt          DateTime
  shardReward        String
  winningWorkspaceId String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  contributions      Contribution[]
  winningWorkspace   Workspace?      @relation("WinningWorkspace", fields: [winningWorkspaceId], references: [id])
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  FAILED
}


model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String            @map("integration_manifest_id")
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum IntegrationStatus {
    active
    inactive
    error
}
