// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String @id @default(cuid())
  email       String @unique
  firstName   String?
  lastName    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  ownedWorkspaces Workspace[]     @relation("WorkspaceOwner")
  workspaces      WorkspaceUser[]
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String
  owner   User   @relation("WorkspaceOwner", fields: [ownerId], references: [id])

  users           WorkspaceUser[]
  contacts        Contact[]
  workflows       Workflow[]
  workflowRuns    WorkflowRun[]
  agents          Agent[]
  securityAlerts  SecurityAlert[]
  
  planTier         String  @default("Apprentice")
  agentActionsUsed Int     @default(0)
  overageEnabled   Boolean @default(false)
}

model WorkspaceUser {
  workspaceId String
  userId      String
  role        String   @default("member") // e.g., 'owner', 'admin', 'member'
  createdAt   DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([workspaceId, userId])
}


model Contact {
  id        String   @id @default(cuid())
  email     String?  @unique
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Workflow {
  id          String      @id @default(cuid())
  name        String
  isActive    Boolean     @default(true)
  triggerType String      @default("api")
  definition  Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  runs WorkflowRun[]

  @@index([workspaceId])
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Agent {
  id                 String      @id @default(cuid())
  name               String
  description        String?
  status             AgentStatus @default(idle)
  assignedWorkflowId String?
  lastActivityAt     DateTime?   @default(now())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}
