// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL")
//   directUrl = env("POSTGRES_URL_NON_POOLING")
// }
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

model User {
  id                    String                @id @default(cuid())
  firstName             String?               @map("first_name")
  lastName              String?               @map("last_name")
  email                 String                @unique
  password              String
  role                  UserRole              @default(OPERATOR)
  psyche                UserPsyche            @default(ZEN_ARCHITECT)
  agentAlias            String?               @map("agent_alias")
  lastLoginAt           DateTime?             @map("last_login_at")
  reclamationGraceUntil DateTime?             @map("reclamation_grace_until")
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")
  corePainIndex         Int?                  @map("core_pain_index")
  foundingVow           String?               @map("founding_vow")
  foundingGoal          String?               @map("founding_goal")
  foundingBenediction   String?               @map("founding_benediction")
  firstWhisper          String?               @map("first_whisper")

  // Relations
  ownedWorkspaces       Workspace[]           @relation("OwnedWorkspaces")
  workspaces            Workspace[]           @relation("WorkspaceMembers")
  accounts              Account[]             @relation("UserAccounts")
  sessions              Session[]             @relation("UserSessions")
  conversations         Conversation[]
  ownedChaosCards       ChaosCard[]
  instrumentDiscoveries InstrumentDiscovery[]
  pulseProfile          PulseProfile?
  transactions          Transaction[]
}

model Workspace {
  id                    String                @id @default(cuid())
  name                  String
  planTier              PlanTier              @default(Apprentice) @map("plan_tier")
  credits               Decimal               @default(0.0)
  agentActionsUsed      Int                   @default(0) @map("agent_actions_used")
  overageEnabled        Boolean               @default(false) @map("overage_enabled")
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")
  ownerId               String                @map("owner_id")
  unlockedAppIds        String[]              @map("unlocked_app_ids")

  // Relations
  owner                 User                  @relation("OwnedWorkspaces", fields: [ownerId], references: [id], onDelete: Cascade)
  members               User[]                @relation("WorkspaceMembers")
  agents                Agent[]
  contacts              Contact[]
  securityAlerts        SecurityAlert[]
  threatFeeds           ThreatFeed[]
  conversations         Conversation[]
  instrumentDiscoveries InstrumentDiscovery[]
  activeSystemEffects   ActiveSystemEffect[]
  transactions          Transaction[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  integrations          Integration[]         @relation("WorkspaceIntegrations")
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus @default(idle)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  workspaceId   String      @map("workspace_id")
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowRuns  WorkflowRun[]

  @@index([workspaceId])
}

model Contact {
  id          String    @id @default(cuid())
  email       String?   @unique
  firstName   String?   @map("first_name")
  lastName    String?   @map("last_name")
  phone       String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low) @map("risk_level")
  timestamp         DateTime          @default(now())
  actionableOptions String[]          @map("actionable_options")
  workspaceId       String            @map("workspace_id")
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  lastFetched DateTime? @map("last_fetched")
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@unique([userId])
  @@index([workspaceId])
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

model ChaosCard {
  id           String         @id @default(cuid())
  key          String         @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  createdAt    DateTime       @default(now()) @map("created_at")
  owners       User[]

  @@map("chaos_cards")
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  workspaceId  String    @map("workspace_id")
  instrumentId String    @map("instrument_id")
  firstViewedAt DateTime @default(now()) @map("first_viewed_at")
  nudgeSentAt  DateTime? @map("nudge_sent_at")
  converted    Boolean   @default(false)
  dtt          Int?      @map("discovery_to_tribute_time")

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, instrumentId])
  @@index([userId])
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String    @map("workspace_id")
  cardKey     String    @map("card_key")
  createdAt   DateTime  @default(now()) @map("created_at")
  expiresAt   DateTime  @map("expires_at")

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  
  @@index([workspaceId])
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Transaction {
  id            String            @id @default(cuid())
  workspaceId   String            @map("workspace_id")
  type          TransactionType
  amount        Decimal
  description   String
  status        TransactionStatus
  createdAt     DateTime          @default(now()) @map("created_at")
  userId        String?           @map("user_id")
  user          User?             @relation(fields: [userId], references: [id])
  agentId       String?           @map("agent_id")
  instrumentId  String?           @map("instrument_id")
  luckWeight    Float?            @map("luck_weight")
  outcome       String?
  boonAmount    Decimal?          @map("boon_amount")
  tributeAmount Decimal?          @map("tribute_amount")
  userPsyche    UserPsyche?       @map("user_psyche")
  judasFactor   Decimal?          @map("judas_factor")

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId, createdAt])
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}

model PulseProfile {
  id                      String                @id @default(cuid())
  userId                  String                @unique @map("user_id")
  user                    User                  @relation(fields: [userId], references: [id])
  baselineLuck            Float                 @default(0.4) @map("baseline_luck")
  amplitude               Float                 @default(0.15)
  frequency               Float                 @default(0.01)
  phaseOffset             Float                 @map("phase_offset")
  lastEventTimestamp      DateTime              @default(now()) @map("last_event_timestamp")
  lastResolvedPhase       PulsePhase            @default(EQUILIBRIUM) @map("last_resolved_phase")
  lastInteractionType     PulseInteractionType? @map("last_interaction_type")
  consecutiveLosses       Int                   @default(0) @map("consecutive_losses")
  frustration             Float                 @default(0)
  flowState               Float                 @default(0) @map("flow_state")
  riskAversion            Float                 @default(0.5) @map("risk_aversion")
  loadedDieBuffCount      Int                   @default(0) @map("loaded_die_buff_count")
  nextTributeGuaranteedWin Boolean              @default(false) @map("next_tribute_guaranteed_win")
  hadesBargainActive      Boolean               @default(false) @map("hades_bargain_active")

  @@map("pulse_profiles")
}

model IntegrationManifest {
  id          String        @id @default(cuid())
  name        String
  description String
  iconUrl     String
  authMethod  String
  setupGuideUrl String
  integrations Integration[]
}

enum IntegrationStatus {
  active
  inactive
  error
}

model Integration {
  id                    String            @id @default(cuid())
  integrationManifestId String            @map("integration_manifest_id")
  manifest              IntegrationManifest @relation(fields: [integrationManifestId], references: [id])
  name                  String
  configDetails         Json              @map("config_details")
  status                IntegrationStatus @default(active)
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")

  workspaceId           String            @map("workspace_id")
  workspace             Workspace         @relation("WorkspaceIntegrations", fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  description String?
  isActive    Boolean       @default(true) @map("is_active")
  triggerType String        @default("api") @map("trigger_type")
  definition  Json
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  workspaceId String        @map("workspace_id")
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String            @map("workflow_id")
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String            @map("workspace_id")
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  agentId        String?           @map("agent_id")
  agent          Agent?            @relation(fields: [agentId], references: [id])
  status         WorkflowRunStatus
  startedAt      DateTime          @default(now()) @map("started_at")
  finishedAt     DateTime?         @map("finished_at")
  triggerPayload Json?             @map("trigger_payload")
  output         Json?
  log            Json?

  @@index([workflowId])
  @@index([workspaceId])
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
