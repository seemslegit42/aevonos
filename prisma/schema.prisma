// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

// ENUMS
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}


// MODELS
model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole                @default(OPERATOR)
  agentAlias              String?
  psyche                  UserPsyche
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Float?
  foundingBenediction     String?
  firstWhisper            String?
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  unlockedChaosCardKeys   String[]
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  workspaces              Workspace[]             @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]             @relation("WorkspaceOwner")
  transactions            Transaction[]
  securityAlerts          SecurityAlert[]
  pulseProfile            PulseProfile?
  contributions           Contribution[]
  discoveries             InstrumentDiscovery[]
}

model Workspace {
  id                      String                  @id @default(cuid())
  name                    String
  planTier                PlanTier                @default(Apprentice)
  credits                 Decimal                 @default(0)
  agentActionsUsed        Int                     @default(0)
  unlockedAppIds          String[]
  overageEnabled          Boolean                 @default(true)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  owner                   User                    @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId                 String
  members                 User[]                  @relation("WorkspaceMembers")

  agents                  Agent[]
  contacts                Contact[]
  transactions            Transaction[]
  securityAlerts          SecurityAlert[]
  workflows               Workflow[]
  workflowRuns            WorkflowRun[]
  integrations            Integration[]
  threatFeeds             ThreatFeed[]
  conversations           Conversation[]
  activeSystemEffects     ActiveSystemEffect[]
  discoveries             InstrumentDiscovery[]
  winningEvents           GlobalAgenticEvent[]
  contributions           Contribution[]
}

model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus @default(idle)
  configuration Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?  @unique
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
}

model Transaction {
  id            String            @id @default(cuid())
  type          TransactionType
  amount        Decimal
  description   String
  status        TransactionStatus @default(PENDING)
  createdAt     DateTime          @default(now())

  // For Tributes
  instrumentId  String?
  luckWeight    Float?
  outcome       String?
  tributeAmount Decimal?
  boonAmount    Decimal?
  judasFactor   Decimal?
  userPsyche    UserPsyche?

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
}

model ChaosCard {
  key          String         @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
}

model PulseProfile {
  id                        String                @id @default(cuid())
  user                      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String                @unique
  baselineLuck              Float                 @default(0.4)
  amplitude                 Float                 @default(0.15)
  frequency                 Float                 @default(0.01)
  phaseOffset               Float
  consecutiveLosses         Int                   @default(0)
  lastEventTimestamp        DateTime              @default(now())
  lastResolvedPhase         PulsePhase            @default(EQUILIBRIUM)
  lastInteractionType       PulseInteractionType?
  frustration               Float                 @default(0)
  flowState                 Float                 @default(0)
  riskAversion              Float                 @default(0)
  loadedDieBuffCount        Int?                  @default(0)
  nextTributeGuaranteedWin  Boolean?              @default(false)
  hadesBargainActive        Boolean?              @default(false)
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  isActive    Boolean       @default(true)
  triggerType String        @default("api")
  definition  Json
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  runs        WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model Integration {
  id                    String            @id @default(cuid())
  name                  String
  status                IntegrationStatus @default(active)
  integrationManifestId String
  configDetails         Json?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  messages    Json
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model ActiveSystemEffect {
  id          String   @id @default(cuid())
  cardKey     String
  expiresAt   DateTime
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  instrumentId  String
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false)
  dtt           Int?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   String
}

model GlobalAgenticEvent {
  id                 String       @id @default(cuid())
  eventName          String
  status             EventStatus  @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal      @default(0)
  expiresAt          DateTime
  createdAt          DateTime     @default(now())
  shardReward        String?
  winningWorkspaceId String?
  winningWorkspace   Workspace?   @relation(fields: [winningWorkspaceId], references: [id])

  contributions      Contribution[]
}

model Contribution {
  id          String   @id @default(cuid())
  amount      Decimal
  createdAt   DateTime @default(now())

  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])

  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  userId      String
  user        User               @relation(fields: [userId], references: [id])
}
