// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole               @default(OPERATOR)
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  agentAlias              String?                @default("BEEP")
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  foundingVow             String?
  foundingGoal            String?
  firstWhisper            String?
  corePainIndex           Int?
  unlockedChaosCardKeys   String[]
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]            @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  discoveries             InstrumentDiscovery[]
  contributions           Contribution[]
  Conversation            Conversation?
}

model Workspace {
  id                   String                 @id @default(cuid())
  name                 String
  ownerId              String
  planTier             PlanTier               @default(Apprentice)
  credits              Decimal                @default(0) @db.Decimal(10, 2)
  agentActionsUsed     Int                    @default(0)
  overageEnabled       Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  owner                User                   @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members              User[]                 @relation("WorkspaceMembers")
  agents               Agent[]
  contacts             Contact[]
  securityAlerts       SecurityAlert[]
  workflows            Workflow[]
  workflowRuns         WorkflowRun[]
  transactions         Transaction[]
  integrations         Integration[]
  threatFeeds          ThreatFeed[]
  discoveries          InstrumentDiscovery[]
  activeSystemEffects  ActiveSystemEffect[]
  contributions        Contribution[]
  Conversation         Conversation[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  userId            String?
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
}

model Transaction {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  userId         String?
  user           User?             @relation(fields: [userId], references: [id])
  type           TransactionType
  amount         Decimal           @db.Decimal(10, 2)
  description    String
  status         TransactionStatus
  createdAt      DateTime          @default(now())
  instrumentId   String?
  luckWeight     Float?
  outcome        String?
  tributeAmount  Decimal?          @db.Decimal(10, 2)
  boonAmount     Decimal?          @db.Decimal(10, 2)
  userPsyche     UserPsyche?
  judasFactor    Decimal?          @db.Decimal(10, 8)
}

model Workflow {
  id           String        @id @default(cuid())
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  definition   Json
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  workflowRuns WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  status         WorkflowRunStatus
  triggerPayload Json
  output         Json?
  log            Json[]
  startedAt      DateTime
  finishedAt     DateTime?
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  integrationManifestId String
  name                  String
  status                IntegrationStatus
  configDetails         Json
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Json[]
  updatedAt   DateTime  @updatedAt
}

model PulseProfile {
  id                       String               @id @default(cuid())
  userId                   String               @unique
  user                     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  baselineLuck             Float                @default(0.5)
  amplitude                Float                @default(0.15)
  frequency                Float                @default(0.01)
  phaseOffset              Float
  consecutiveLosses        Int                  @default(0)
  lastEventTimestamp       DateTime             @default(now())
  lastResolvedPhase        PulsePhase?
  lastInteractionType      PulseInteractionType?
  frustration              Float                @default(0)
  flowState                Float                @default(0)
  riskAversion             Float                @default(0)
  loadedDieBuffCount       Int?                 @default(0)
  nextTributeGuaranteedWin Boolean?             @default(false)
  hadesBargainActive       Boolean?             @default(false)
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId String
  firstViewedAt DateTime  @default(now())
  converted    Boolean   @default(false)
  dtt          Int? // Discovery-to-Tribute time in minutes
  nudgeSentAt  DateTime?
}

model ChaosCard {
  key          String         @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  cardKey     String
  expiresAt   DateTime
}

model GlobalAgenticEvent {
  id                 String         @id @default(cuid())
  eventName          String
  status             EventStatus    @default(ACTIVE)
  poolTarget         Decimal        @db.Decimal(12, 2)
  currentPool        Decimal        @default(0) @db.Decimal(12, 2)
  expiresAt          DateTime
  shardReward        String?
  winningWorkspaceId String?
  createdAt          DateTime       @default(now())
  contributions      Contribution[]
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal            @db.Decimal(10, 2)
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  createdAt   DateTime           @default(now())
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}
