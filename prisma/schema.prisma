
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole  @default(OPERATOR)
  psyche                  UserPsyche
  agentAlias              String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  foundingVow             String?
  foundingGoal            String?
  firstWhisper            String?
  corePainIndex           Float?
  unlockedChaosCardKeys   String[]
  pulseProfile            PulseProfile?
  workspaces              Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[] @relation("WorkspaceOwner")
  transactions            Transaction[]
  discoveries             InstrumentDiscovery[]
}

model Workspace {
  id                 String    @id @default(cuid())
  name               String
  ownerId            String
  owner              User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  planTier           PlanTier
  credits            Decimal   @default(0.0)
  agentActionsUsed   Int       @default(0)
  overageEnabled     Boolean   @default(true)
  unlockedAppIds     String[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  members            User[]    @relation("WorkspaceMembers")
  agents             Agent[]
  contacts           Contact[]
  transactions       Transaction[]
  securityAlerts     SecurityAlert[]
  workflows          Workflow[]
  workflowRuns       WorkflowRun[]
  threatFeeds        ThreatFeed[]
  conversations      Conversation[]
  discoveries        InstrumentDiscovery[]
  activeSystemEffects ActiveSystemEffect[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Transaction {
  id             String           @id @default(cuid())
  workspaceId    String
  workspace      Workspace        @relation(fields: [workspaceId], references: [id])
  userId         String?
  user           User?            @relation(fields: [userId], references: [id])
  type           TransactionType
  amount         Decimal
  description    String
  status         TransactionStatus
  instrumentId   String?
  luckWeight     Float?
  outcome        String?
  tributeAmount  Decimal?
  boonAmount     Decimal?
  judasFactor    Decimal?
  userPsyche     UserPsyche?
  createdAt      DateTime         @default(now())
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  userId            String?
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  definition   Json
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  runs         WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  status         WorkflowRunStatus
  triggerPayload Json
  output         Json?
  log            Json[]
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Json[]
  updatedAt   DateTime @updatedAt
}

model ThreatFeed {
  id          String   @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime @default(now())
}

model Integration {
  id                    String            @id @default(cuid())
  name                  String
  workspaceId           String
  integrationManifestId String
  status                IntegrationStatus
  configDetails         Json
}

model PulseProfile {
  id                   String                @id @default(cuid())
  userId               String                @unique
  user                 User                  @relation(fields: [userId], references: [id])
  baselineLuck         Float                 @default(0.4)
  amplitude            Float                 @default(0.15)
  frequency            Float                 @default(0.01)
  phaseOffset          Float
  consecutiveLosses    Int                   @default(0)
  lastEventTimestamp   DateTime              @default(now())
  lastResolvedPhase    PulsePhase?
  lastInteractionType  PulseInteractionType?
  frustration          Float                 @default(0)
  flowState            Float                 @default(0)
  riskAversion         Float                 @default(0)
  nextTributeGuaranteedWin Boolean?           @default(false)
  loadedDieBuffCount   Int?                  @default(0)
  hadesBargainActive   Boolean?              @default(false)
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId  String
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false)
  dtt           Int?
  nudgeSentAt   DateTime?
}

model GlobalAgenticEvent {
  id                  String         @id @default(cuid())
  eventName           String
  status              EventStatus    @default(ACTIVE)
  poolTarget          Decimal
  currentPool         Decimal        @default(0)
  createdAt           DateTime       @default(now())
  expiresAt           DateTime
  winningWorkspaceId  String?
  shardReward         String
  contributions       Contribution[]
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  workspaceId String
  userId      String
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  createdAt   DateTime           @default(now())
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  cardKey     String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
}

model ChaosCard {
  key         String         @id
  name        String
  description String
  cardClass   ChaosCardClass
  cost        Int
  systemEffect String
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}
