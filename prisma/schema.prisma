
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String
  firstName               String?
  lastName                String?
  agentAlias              String                  @default("BEEP")
  role                    UserRole                @default(OPERATOR)
  psyche                  UserPsyche              @default(ZEN_ARCHITECT)
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  reclamationGraceUntil   DateTime?
  corePainIndex           Float?
  lastLoginAt             DateTime?               @updatedAt
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  workspaces              Workspace[]             @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]             @relation("WorkspaceOwner")
  transactions            Transaction[]
  unlockedChaosCardKeys   String[]
  pulseProfile            PulseProfile?
  discoveries             InstrumentDiscovery[]
  contributions           Contribution[]
  securityAlerts          SecurityAlert[]
  conversations           Conversation[]
}

model Workspace {
  id                    String                 @id @default(cuid())
  name                  String
  ownerId               String
  owner                 User                   @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members               User[]                 @relation("WorkspaceMembers")
  planTier              PlanTier               @default(Apprentice)
  credits               Decimal                @default(100.0)
  agentActionsUsed      Int                    @default(0)
  overageEnabled        Boolean                @default(false)
  unlockedAppIds        String[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  agents                Agent[]
  contacts              Contact[]
  securityAlerts        SecurityAlert[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  transactions          Transaction[]
  threatFeeds           ThreatFeed[]
  integrations          Integration[]
  discoveries           InstrumentDiscovery[]
  activeSystemEffects   ActiveSystemEffect[]
  winningWagers         GlobalAgenticEvent[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([email, workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  definition   Json
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs         WorkflowRun[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json
  output         Json?
  log            Json[]
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Transaction {
  id              String            @id @default(cuid())
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus
  userId          String?
  user            User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  agentId         String?
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?
  boonAmount      Decimal?
  judasFactor     Decimal?
  userPsyche      UserPsyche?
  createdAt       DateTime          @default(now())
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  messages    Json
  updatedAt   DateTime @updatedAt
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model ChaosCard {
  key          String         @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey     String
  expiresAt   DateTime
}

model PulseProfile {
  id                       String               @id @default(cuid())
  userId                   String               @unique
  user                     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  baselineLuck             Float                @default(0.4)
  amplitude                Float                @default(0.15)
  frequency                Float                @default(0.01)
  phaseOffset              Float
  lastEventTimestamp       DateTime             @default(now())
  consecutiveLosses        Int                  @default(0)
  frustration              Float                @default(0)
  flowState                Float                @default(0)
  riskAversion             Float                @default(0.5)
  lastResolvedPhase        PulsePhase           @default(EQUILIBRIUM)
  lastInteractionType      PulseInteractionType @default(SYSTEM)
  nextTributeGuaranteedWin Boolean              @default(false)
  hadesBargainActive       Boolean              @default(false)
  loadedDieBuffCount       Int                  @default(0)
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId  String
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false)
  dtt           Int?
  nudgeSentAt   DateTime?
}

model GlobalAgenticEvent {
  id                 String       @id @default(cuid())
  eventName          String
  status             EventStatus  @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal      @default(0)
  shardReward        String
  createdAt          DateTime     @default(now())
  expiresAt          DateTime
  winningWorkspaceId String?
  winningWorkspace   Workspace?   @relation(fields: [winningWorkspaceId], references: [id], onDelete: SetNull)
  contributions      Contribution[]
}

model Contribution {
  id          String               @id @default(cuid())
  eventId     String
  event       GlobalAgenticEvent   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  workspaceId String
  userId      String
  user        User                 @relation(fields: [userId], references: [id])
  amount      Decimal
  createdAt   DateTime             @default(now())
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
  SYSTEM
}

enum EventStatus {
  ACTIVE
  CONCLUDED
}
