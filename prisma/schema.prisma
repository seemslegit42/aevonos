
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enum definitions based on schema descriptions and code usage
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PulsePhase {
    CREST
    TROUGH
    EQUILIBRIUM
}

enum PulseInteractionType {
    WIN
    LOSS
}

// Main models
model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String
  firstName               String?
  lastName                String?
  emailVerified           DateTime?
  image                   String?
  role                    UserRole  @default(OPERATOR)
  psyche                  UserPsyche
  agentAlias              String?
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Float?
  foundingBenediction     String?
  firstWhisper            String?
  reclamationGraceUntil   DateTime?
  lastLoginAt             DateTime? @default(now())

  unlockedChaosCardKeys   String[]

  accounts         Account[]
  sessions         Session[]
  ownedWorkspace   Workspace? @relation("WorkspaceOwner")
  workspaces       Workspace[] @relation("WorkspaceMembers")
  transactions     Transaction[]
  pulseProfile     PulseProfile?
  instrumentDiscoveries InstrumentDiscovery[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Workspace {
  id                 String   @id @default(cuid())
  name               String
  ownerId            String   @unique
  owner              User     @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members            User[]   @relation("WorkspaceMembers")
  planTier           PlanTier @default(Apprentice)
  credits            Decimal  @default(0)
  agentActionsUsed   Int      @default(0)
  overageEnabled     Boolean  @default(false)

  unlockedAppIds     String[]

  agents           Agent[]
  contacts         Contact[]
  securityAlerts   SecurityAlert[]
  threatFeeds      ThreatFeed[]
  transactions     Transaction[]
  conversations    Conversation[]
  workflows        Workflow[]
  workflowRuns     WorkflowRun[]
  integrations     Integration[]
  activeSystemEffects ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workflow {
  id           String   @id @default(cuid())
  name         String
  definition   Json
  isActive     Boolean  @default(true)
  triggerType  String   @default("api")
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs         WorkflowRun[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  @@index([workflowId])
}

model Transaction {
  id              String           @id @default(cuid())
  workspaceId     String
  workspace       Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId          String?
  user            User?            @relation(fields: [userId], references: [id], onDelete:SetNull)
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus @default(COMPLETED)
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?
  boonAmount      Decimal?
  judasFactor     Decimal?
  userPsyche      UserPsyche?

  createdAt       DateTime         @default(now())
}

model PulseProfile {
  id                  String  @id @default(cuid())
  userId              String  @unique
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  baselineLuck        Float   @default(0.5)
  amplitude           Float   @default(0.15)
  frequency           Float   @default(0.01)
  phaseOffset         Float
  consecutiveLosses   Int     @default(0)
  lastEventTimestamp  DateTime @default(now())
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)
  lastInteractionType PulseInteractionType @default(WIN)
  frustration         Float   @default(0.0)
  flowState           Float   @default(0.0)
  riskAversion        Float   @default(0.5)
  nextTributeGuaranteedWin Boolean? @default(false)
  loadedDieBuffCount Int? @default(0)
  hadesBargainActive Boolean? @default(false)
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
}
model ChaosCard {
    key         String @id
    name        String
    description String
    cardClass   ChaosCardClass
    cost        Int
    systemEffect String?
}
model ActiveSystemEffect {
    id          String   @id @default(cuid())
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    cardKey     String
    expiresAt   DateTime
    createdAt   DateTime @default(now())
}

model Contact {
  id          String   @id @default(cuid())
  email       String?  @unique
  firstName   String?
  lastName    String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ThreatFeed {
    id          String   @id @default(cuid())
    url         String
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    
    createdAt   DateTime @default(now())
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InstrumentDiscovery {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId   String
  firstViewedAt  DateTime  @default(now())
  converted      Boolean   @default(false)
  dtt            Int?
  nudgeSentAt    DateTime?

  @@unique([userId, instrumentId])
}

enum IntegrationStatus {
  active
  inactive
  error
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json

  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}
