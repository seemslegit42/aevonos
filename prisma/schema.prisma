// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ===================================
// Core Tenancy & User Models
// ===================================

model User {
  id                    String        @id @default(cuid())
  email                 String        @unique
  password              String
  firstName             String?
  lastName              String?
  role                  UserRole      @default(OPERATOR)
  psyche                UserPsyche
  agentAlias            String?
  corePainIndex         Int?
  foundingVow           String?
  foundingGoal          String?
  foundingBenediction   String?
  firstWhisper          String?
  reclamationGraceUntil DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  lastLoginAt           DateTime?
  workspaces            Workspace[]   @relation("WorkspaceMembers")
  ownedWorkspaces       Workspace[]   @relation("WorkspaceOwner")
  transactions          Transaction[]
  conversations         Conversation[]
  ownedChaosCards       ChaosCard[]
  pulseProfile          PulseProfile?
  instrumentDiscoveries InstrumentDiscovery[]
}

model Workspace {
  id                String                 @id @default(cuid())
  name              String
  owner             User                   @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId           String
  members           User[]                 @relation("WorkspaceMembers")
  planTier          PlanTier               @default(Apprentice)
  credits           Decimal                @default(0.00) @db.Decimal(12, 2)
  agentActionsUsed  Int                    @default(0)
  overageEnabled    Boolean                @default(true)
  unlockedAppIds    String[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  agents            Agent[]
  contacts          Contact[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  transactions      Transaction[]
  conversations     Conversation[]
  activeSystemEffects ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
}

// ===================================
// Economic Engine Models
// ===================================

model Transaction {
  id              String            @id @default(cuid())
  workspace       Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  user            User?             @relation(fields: [userId], references: [id])
  userId          String?
  type            TransactionType
  /// The net amount of the transaction. For Tributes, this is boon - tribute.
  amount          Decimal           @db.Decimal(12, 2)
  description     String
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now())

  // For Tributes to Folly Instruments
  /// The key of the Chaos Card or Folly Instrument used.
  instrumentId    String?
  /// The user's luck value at the time of the tribute.
  luckWeight      Float?
  /// The outcome of the tribute (e.g., 'win', 'loss', 'pity_boon').
  outcome         String?
  tributeAmount   Decimal?          @db.Decimal(12, 2)
  boonAmount      Decimal?          @db.Decimal(12, 2)
  userPsyche      UserPsyche?
  /// A decimal representing the reduction factor in a 'hollow win' scenario from the Judas Algorithm.
  judasFactor     Decimal? @db.Decimal(12, 4)

  @@index([workspaceId])
  @@index([userId])
}


// ===================================
// Agentic & Workflow Models
// ===================================

model Agent {
  id          String      @id @default(cuid())
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([workspaceId])
}


model Workflow {
  id           String        @id @default(cuid())
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  name         String
  definition   Json
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  runs         WorkflowRun[]

  @@index([workspaceId])
}

model WorkflowRun {
  id             String      @id @default(cuid())
  workflow       Workflow    @relation(fields: [workflowId], references: [id])
  workflowId     String
  workspace      Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime    @default(now())
  finishedAt     DateTime?

  @@index([workflowId])
}


// ===================================
// Application & Utility Models
// ===================================

model Contact {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, email])
  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  url         String
  lastFetched DateTime?
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}

model Conversation {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  messages    Json[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// ===================================
// Klepsydra / Psyche Engine Models
// ===================================

model PulseProfile {
  id                    String        @id @default(cuid())
  user                  User          @relation(fields: [userId], references: [id])
  userId                String        @unique
  baselineLuck          Float         @default(0.4)
  amplitude             Float         @default(0.15)
  frequency             Float         @default(0.01)
  phaseOffset           Float
  consecutiveLosses     Int           @default(0)
  lastEventTimestamp    DateTime      @default(now())
  nextTributeGuaranteedWin Boolean?   @default(false)
  hadesBargainActive    Boolean?      @default(false)
  loadedDieBuffCount    Int?          @default(0)
  lastInteractionType   PulseInteractionType?
  lastResolvedPhase     PulsePhase?

  /// User's frustration level, 0.0 to 1.0
  frustration           Float         @default(0.1)
  /// User's flow state level, 0.0 to 1.0
  flowState             Float         @default(0.1)
  /// User's risk aversion level, 0.0 to 1.0
  riskAversion          Float         @default(0.3)
}

model ChaosCard {
  id            String    @id @default(cuid())
  key           String    @unique
  name          String
  description   String
  cardClass     ChaosCardClass
  cost          Int
  systemEffect  String
  users         User[]
  createdAt     DateTime  @default(now())
}

model ActiveSystemEffect {
  id           String    @id @default(cuid())
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  cardKey      String
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  instrumentId  String    // e.g., app id or chaos card key
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false)
  nudgeSentAt   DateTime?
  /// Discovery-to-Tribute time in minutes
  dtt           Int?

  @@unique([userId, instrumentId])
}


// ===================================
// Enums
// ===================================
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulseInteractionType {
    WIN
    LOSS
}

enum PulsePhase {
    CREST
    TROUGH
    EQUILIBRIUM
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}
