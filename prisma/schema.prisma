// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String        @id @default(cuid())
  email           String        @unique
  password        String
  firstName       String?
  lastName        String?
  role            UserRole      @default(OPERATOR)
  lastLoginAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  workspaces      Workspace[]   @relation("WorkspaceMembers")
  ownedWorkspaces Workspace[]   @relation("WorkspaceOwner")
  transactions    Transaction[]
  ownedChaosCards ChaosCard[]   @relation("UserOwnedChaosCards")
  pulseProfile    PulseProfile?
}

model Workspace {
  id                String        @id @default(cuid())
  name              String
  owner             User          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId           String
  members           User[]        @relation("WorkspaceMembers")
  planTier          PlanTier      @default(Apprentice)
  credits           Decimal       @default(0.0)
  agentActionsUsed  Int           @default(0)
  overageEnabled    Boolean       @default(false)
  unlockedAppIds    String[]      @default([])
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  agents            Agent[]
  securityAlerts    SecurityAlert[]
  contacts          Contact[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  transactions      Transaction[]
  threatFeeds       ThreatFeed[]
  integrations      Integration[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId       String
  createdAt         DateTime          @default(now())
}

model Contact {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, email])
}

model Workflow {
  id            String          @id @default(cuid())
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   String
  name          String
  isActive      Boolean         @default(true)
  triggerType   String          @default("api")
  definition    Json
  runs          WorkflowRun[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId    String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId     String
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Transaction {
  id            String          @id @default(cuid())
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   String
  user          User?           @relation(fields: [userId], references: [id])
  userId        String?
  agentId       String?
  type          TransactionType
  amount        Decimal
  description   String
  status        TransactionStatus @default(PENDING)
  createdAt     DateTime        @default(now())

  // Fields for TributeLog
  instrumentId  String?
  luckWeight    Float?
  outcome       String?
  boonAmount    Decimal?
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime  @default(now())
}

model Integration {
  id                    String    @id @default(cuid())
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId           String
  integrationManifestId String // Corresponds to the ID in the static manifest config
  name                  String
  status                String    @default("active") // e.g., active, inactive, error
  configDetails         Json?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model ChaosCard {
  id           String         @id @default(cuid())
  key          String         @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  owners       User[]         @relation("UserOwnedChaosCards")
}

model PulseProfile {
  id                 String     @id @default(cuid())
  user               User       @relation(fields: [userId], references: [id])
  userId             String     @unique
  amplitude          Float      @default(0.1)
  frequency          Float      @default(0.1)
  phaseOffset        Float
  baselineLuck       Float      @default(0.5)
  lastEventTimestamp DateTime   @default(now())
  consecutiveLosses  Int        @default(0)
  lastResolvedPhase  PulsePhase @default(EQUILIBRIUM)
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
  none
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}
