// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  password              String
  firstName             String?
  lastName              String?
  role                  UserRole              @default(OPERATOR)
  psyche                UserPsyche
  agentAlias            String?
  lastLoginAt           DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  foundingVow           String?
  foundingGoal          String?
  reclamationGraceUntil DateTime?

  workspaces           Workspace[]           @relation("WorkspaceMembers")
  ownedWorkspaces      Workspace[]           @relation("WorkspaceOwner")
  transactions         Transaction[]
  ownedChaosCards      ChaosCard[]
  pulseProfile         PulseProfile?
  instrumentDiscoveries InstrumentDiscovery[]
  conversations        Conversation[]
}

model Workspace {
  id                String    @id @default(cuid())
  name              String
  ownerId           String
  credits           Decimal   @default(0.0)
  planTier          PlanTier  @default(Apprentice)
  agentActionsUsed  Int       @default(0)
  unlockedAppIds    String[]
  overageEnabled    Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  owner               User                  @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members             User[]                @relation("WorkspaceMembers")
  agents              Agent[]
  contacts            Contact[]
  securityAlerts      SecurityAlert[]
  threatFeeds         ThreatFeed[]
  transactions        Transaction[]
  workflows           Workflow[]
  workflowRuns        WorkflowRun[]
  integrations        Integration[]
  activeSystemEffects ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
  conversations        Conversation[]

  @@index([ownerId])
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String // e.g., 'winston-wolfe', 'dr-syntax'
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ThreatFeed {
  id          String   @id @default(cuid())
  url         String
  workspaceId String
  createdAt   DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                String            @id @default(cuid())
  workspaceId       String
  userId            String?
  type              TransactionType
  amount            Decimal
  description       String
  status            TransactionStatus @default(PENDING)
  createdAt         DateTime          @default(now())
  
  instrumentId      String? // e.g., a Chaos Card key or MicroApp ID
  luckWeight        Float?
  outcome           String?
  boonAmount        Decimal?
  userPsyche        UserPsyche?

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  user      User?       @relation(fields: [userId], references: [id])

  @@index([workspaceId])
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api") // "api", "schedule", "event"
  definition   Json
  workspaceId  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs      WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workspaceId    String
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime
  finishedAt     DateTime?

  workflow  Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id])
}

model Integration {
    id                    String              @id @default(cuid())
    workspaceId           String
    integrationManifestId String              @map("integration_manifest_id")
    name                  String
    status                IntegrationStatus   @default(active)
    configDetails         Json                @map("config_details")
    createdAt             DateTime            @default(now())
    updatedAt             DateTime            @updatedAt

    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model PulseProfile {
    id                 String   @id @default(cuid())
    userId             String   @unique
    baselineLuck       Float    @default(0.5)
    amplitude          Float    @default(0.2)
    frequency          Float    @default(0.01) // cycles per minute
    phaseOffset        Float    @default(0.0)
    consecutiveLosses  Int      @default(0)
    lastEventTimestamp DateTime @default(now())
    lastResolvedPhase  PulsePhase @default(EQUILIBRIUM)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChaosCard {
    id          String         @id @default(cuid())
    key         String         @unique
    name        String
    description String
    cardClass   ChaosCardClass
    cost        Int
    systemEffect String
    owners      User[]
}

model ActiveSystemEffect {
    id          String   @id @default(cuid())
    workspaceId String
    cardKey     String
    expiresAt   DateTime
    createdAt   DateTime @default(now())

    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Conversation {
    id          String   @id @default(cuid())
    userId      String   @unique
    workspaceId String
    messages    Json // Stores an array of LangChain message objects
    updatedAt   DateTime @updatedAt
  
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model InstrumentDiscovery {
    id              String    @id @default(cuid())
    userId          String
    workspaceId     String
    instrumentId    String // Can be MicroApp ID or Chaos Card key
    firstViewedAt   DateTime  @default(now())
    converted       Boolean   @default(false)
    dtt             Int?      // Discovery-to-Tribute time in minutes
    nudgeSentAt     DateTime?

    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([userId, instrumentId])
}


enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
    ZEN_ARCHITECT
    SYNDICATE_ENFORCER
    RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE // Special type for Folly Instruments
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum IntegrationStatus {
    active
    paused
    error
}

enum PulsePhase {
  CREST // High luck
  TROUGH // Low luck
  EQUILIBRIUM // Neutral
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}
