// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ===================================
// ENUMS
// ===================================

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum TransactionType {
  DEBIT
  CREDIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum PurchaseOrderStatus {
  PENDING
  SUBMITTED
  CONFIRMED
  SHIPPED
  RECEIVED
  CANCELLED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum EventStatus {
  ACTIVE
  CONCLUDED
}

// ===================================
// CORE TENANCY MODELS
// ===================================

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  firstName             String?
  lastName              String?
  role                  UserRole              @default(OPERATOR)
  lastLoginAt           DateTime?
  agentAlias            String?
  psyche                UserPsyche            @default(ZEN_ARCHITECT)
  foundingVow           String?
  foundingGoal          String?
  corePainIndex         Int?
  foundingBenediction   String?
  firstWhisper          String?
  firstCommand          String?
  unlockedChaosCardKeys String[]              @default([])
  reclamationGraceUntil DateTime?
  hasAbyssalScar        Boolean               @default(false)
  ownedWorkspaces       Workspace[]           @relation("OwnedWorkspaces")
  workspaces            Workspace[]           @relation("WorkspaceMembers")
  pulseProfile          PulseProfile?
  transactions          Transaction[]
  alerts                SecurityAlert[]
  discoveries           InstrumentDiscovery[]
  contributions         Contribution[]
}

model Workspace {
  id                  String               @id @default(cuid())
  name                String
  planTier            PlanTier             @default(Apprentice)
  credits             Decimal              @default(0.0)
  agentActionsUsed    Int                  @default(0)
  overageEnabled      Boolean              @default(false)
  potential           Decimal              @default(0.0)
  unlockedAppIds      String[]             @default([])
  ownerId             String
  owner               User                 @relation("OwnedWorkspaces", fields: [ownerId], references: [id])
  members             User[]               @relation("WorkspaceMembers")
  agents              Agent[]
  workflows           Workflow[]
  workflowRuns        WorkflowRun[]
  contacts            Contact[]
  alerts              SecurityAlert[]
  transactions        Transaction[]
  discoveries         InstrumentDiscovery[]
  pulseEngineConfig   PulseEngineConfig?
  threatFeeds         ThreatFeed[]
  securityEdicts      SecurityEdict[]
  integrations        Integration[]
  products            Product[]
  suppliers           Supplier[]
  purchaseOrders      PurchaseOrder[]
  contributions       Contribution[]
  systemEffects       ActiveSystemEffect[]
}

// ===================================
// AGENTIC & WORKFLOW MODELS
// ===================================

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String // Maps to a specific agent kernel, e.g., 'dr-syntax'
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean       @default(true)
  triggerType String        @default("api") // e.g., 'api', 'schedule', 'event'
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  runs        WorkflowRun[]
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workflowId     String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId    String
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  messages    Json[] // Array of serialized LangChain message objects
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, workspaceId])
}

// ===================================
// ECONOMIC ENGINE MODELS
// ===================================

model Transaction {
  id                 String            @id @default(cuid())
  workspaceId        String
  type               TransactionType
  amount             Decimal           @db.Decimal(18, 8)
  status             TransactionStatus @default(PENDING)
  description        String
  instrumentId       String?
  createdAt          DateTime          @default(now())
  aegisSignature     String?
  outcome            String?
  luckWeight         Float?
  tributeAmount      Decimal?          @db.Decimal(18, 8)
  boonAmount         Decimal?          @db.Decimal(18, 8)
  judasFactor        Decimal?          @db.Decimal(18, 17)
  isTransmutation    Boolean?          @default(false)
  realWorldAmount    Decimal?          @db.Decimal(18, 2)
  realWorldCurrency  String?
  vendorName         String?
  transmutationTithe Decimal?          @db.Decimal(18, 8)
  user               User?             @relation(fields: [userId], references: [id])
  userId             String?
  workspace          Workspace         @relation(fields: [workspaceId], references: [id])
  userPsyche         UserPsyche? // For VAS calculation
}

model PulseProfile {
  id                       String                @id @default(cuid())
  userId                   String                @unique
  amplitude                Float                 @default(0.2)
  frequency                Float                 @default(0.01)
  phaseOffset              Float
  baselineLuck             Float                 @default(0.5)
  lastEventTimestamp       DateTime              @default(now())
  consecutiveLosses        Int                   @default(0)
  lastResolvedPhase        PulsePhase?
  lastInteractionType      PulseInteractionType?
  frustration              Float                 @default(0.1)
  flowState                Float                 @default(0.1)
  riskAversion             Float                 @default(0.5)
  nextTributeGuaranteedWin Boolean?
  loadedDieBuffCount       Int?
  hadesBargainActive       Boolean?
  user                     User                  @relation(fields: [userId], references: [id])
}

model PotentialAccrualLog {
  id               String   @id @default(cuid())
  workspaceId      String
  userId           String
  instrumentId     String
  timestamp        DateTime @default(now())
  luckWeight       Float
  potentialAwarded Decimal  @db.Decimal(18, 8)
  narrativeContext String
  aegisSignature   String?
}

model PulseEngineConfig {
  id                     String  @id @default(cuid())
  workspaceId            String  @unique
  pityThreshold          Int     @default(5)
  festivalTriggerPercent Int     @default(20) /// The percentage drop in TVI that triggers a festival.
  transmutationTithe     Decimal @default(0.18) @db.Decimal(5, 4)
  workspace              Workspace @relation(fields: [workspaceId], references: [id])
}

model ChaosCard {
  key          String         @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String?
}

model ActiveSystemEffect {
  id          String   @id @default(cuid())
  workspaceId String
  cardKey     String // Corresponds to ChaosCard key
  expiresAt   DateTime
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

// ===================================
// UTILITY & APPLICATION MODELS
// ===================================

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?   @unique
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  user              User?             @relation(fields: [userId], references: [id])
  userId            String?
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model SecurityEdict {
  id          String  @id @default(cuid())
  description String
  isActive    Boolean @default(true)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String            @db.Uuid
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
}

// ===================================
// INVENTORY & SUPPLY CHAIN MODELS
// ===================================
model Product {
  id                String              @id @default(cuid())
  name              String
  description       String?
  stockLevel        Int                 @default(0)
  workspaceId       String
  workspace         Workspace           @relation(fields: [workspaceId], references: [id])
  PurchaseOrderItem PurchaseOrderItem[]
}

model Supplier {
  id            String          @id @default(cuid())
  name          String
  contactEmail  String
  workspaceId   String
  workspace     Workspace       @relation(fields: [workspaceId], references: [id])
  PurchaseOrder PurchaseOrder[]
}

model PurchaseOrder {
  id          String              @id @default(cuid())
  status      PurchaseOrderStatus @default(PENDING)
  createdAt   DateTime            @default(now())
  workspaceId String
  workspace   Workspace           @relation(fields: [workspaceId], references: [id])
  supplierId  String
  supplier    Supplier            @relation(fields: [supplierId], references: [id])
  items       PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  quantity        Int
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  productId       String
  product         Product       @relation(fields: [productId], references: [id])
}

// ===================================
// NUDGE ENGINE & COMMUNITY MODELS
// ===================================
model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  workspaceId   String
  instrumentId  String // Corresponds to artifact id
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false)
  nudgeSentAt   DateTime?
  dtt           Int? /// Discovery-to-Tribute time in minutes
  user          User      @relation(fields: [userId], references: [id])
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  userId      String
  workspaceId String
  eventId     String
  user        User               @relation(fields: [userId], references: [id])
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
}

model GlobalAgenticEvent {
  id                 String         @id @default(cuid())
  eventName          String
  status             EventStatus    @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal        @default(0)
  createdAt          DateTime       @default(now())
  expiresAt          DateTime
  shardReward        String // A key for a system effect or special Chaos Card
  winningWorkspaceId String?
  contributions      Contribution[]
}
