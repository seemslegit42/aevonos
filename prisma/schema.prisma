// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaces    Workspace[] @relation("WorkspaceMembers")
  transactions  Transaction[]
}

model Workspace {
  id                String    @id @default(cuid())
  name              String
  ownerId           String
  owner             User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members           User[]    @relation("WorkspaceMembers")
  planTier          PlanTier  @default(Apprentice)
  agentActionsUsed  Int       @default(0)
  credits           Decimal   @default(0.00)
  overageEnabled    Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  agents            Agent[]
  securityAlerts    SecurityAlert[]
  contacts          Contact[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  threatFeeds       ThreatFeed[]
  integrations      Integration[]
  transactions      Transaction[]
}

model Agent {
  id           String      @id @default(cuid())
  name         String
  type         String
  description  String?
  status       AgentStatus @default(idle)
  workspaceId  String
  workspace    Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  lastActivityAt DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  transactions  Transaction[]
}

model SecurityAlert {
    id              String @id @default(cuid())
    type            String
    explanation     String
    riskLevel       SecurityRiskLevel
    timestamp       DateTime @default(now())
    actionableOptions String[]
    workspaceId     String
    workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([email, workspaceId])
}

model Workflow {
  id          String   @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean  @default(true)
  triggerType String   @default("api")
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WorkflowRun {
  id              String   @id @default(cuid())
  workflowId      String
  workflow        Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status          WorkflowRunStatus @default(pending)
  triggerPayload  Json?
  output          Json?
  log             Json[]
  startedAt       DateTime @default(now())
  finishedAt      DateTime?
}

model ThreatFeed {
    id          String @id @default(cuid())
    url         String
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([url, workspaceId])
}

model Integration {
    id                  String @id @default(cuid())
    integrationManifestId String // UUID of the manifest this instance is based on
    workspaceId         String
    workspace           Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    name                String
    status              String
    configDetails       Json
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
}

model Transaction {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type        TransactionType
  amount      Decimal
  description String
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  agentId     String?
  agent       Agent?   @relation(fields: [agentId], references: [id])
  createdAt   DateTime @default(now())
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
    none
    low
    medium
    high
    critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum TransactionType {
  CREDIT
  DEBIT
}
