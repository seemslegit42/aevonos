// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  role                    UserRole                @default(OPERATOR)
  firstName               String?
  lastName                String?
  lastLoginAt             DateTime?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  psyche                  UserPsyche              @default(ZEN_ARCHITECT)
  agentAlias              String?
  unlockedChaosCardKeys   String[]                @default([])
  reclamationGraceUntil   DateTime?
  corePainIndex           Int?
  foundingVow             String?
  foundingGoal            String?
  firstWhisper            String?
  firstCommand            String?
  hasAbyssalScar          Boolean                 @default(false)
  workspaces              Workspace[]             @relation("WorkspaceMembers")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  conversation            Conversation?
  securityAlerts          SecurityAlert[]
  instrumentDiscoveries   InstrumentDiscovery[]
}

model Workspace {
  id                      String                  @id @default(cuid())
  name                    String
  ownerId                 String
  planTier                PlanTier                @default(Apprentice)
  credits                 Decimal                 @default(100.0)
  agentActionsUsed        Int                     @default(0)
  overageEnabled          Boolean                 @default(true)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  members                 User[]                  @relation("WorkspaceMembers")
  contacts                Contact[]
  agents                  Agent[]
  workflows               Workflow[]
  workflowRuns            WorkflowRun[]
  transactions            Transaction[]
  conversations           Conversation[]
  securityAlerts          SecurityAlert[]
  threatFeeds             ThreatFeed[]
  securityEdicts          SecurityEdict[]
  unlockedAppIds          String[]                @default([])
  activeSystemEffects     ActiveSystemEffect[]
  instrumentDiscoveries   InstrumentDiscovery[]
  potential               Decimal                 @default(0.0)
  potentialAccrualLogs    PotentialAccrualLog[]
  globalEventContributions Contribution[]
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model Agent {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  description String?
  type        String // e.g., 'winston-wolfe', 'kif-kroker'
  status      AgentStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([workspaceId])
}

model Workflow {
  id           String         @id @default(cuid())
  workspaceId  String
  workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name         String
  definition   Json
  isActive     Boolean        @default(true)
  triggerType  String         @default("api")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  runs         WorkflowRun[]

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  triggerPayload Json?
  output         Json?
  log            Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([workflowId])
}

model Transaction {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  agentId           String?
  instrumentId      String?
  type              TransactionType
  amount            Decimal
  description       String
  status            TransactionStatus
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  aegisSignature    String?           @doc("A cryptographic signature from Aegis to verify integrity.")
  isTransmutation   Boolean           @default(false)
  realWorldAmount   Decimal?
  realWorldCurrency String?
  vendorName        String?
  transmutationTithe Decimal?
  luckWeight        Float?
  outcome           String?
  tributeAmount     Decimal?
  boonAmount        Decimal?
  judasFactor       Decimal?
  userPsyche        UserPsyche?

  @@index([workspaceId])
  @@index([userId])
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json[] // Array of serialized BaseMessage objects
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}

model SecurityEdict {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  description String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}


model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  integrationManifestId String            @doc("FK to a static manifest definition")
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json              @doc("Encrypted API keys, etc.")
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([workspaceId])
}

model PulseProfile {
  id                       String               @id @default(cuid())
  userId                   String               @unique
  user                     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  amplitude                Float                @default(0.15)
  frequency                Float                @default(0.01)
  phaseOffset              Float
  baselineLuck             Float                @default(0.4)
  lastEventTimestamp       DateTime             @default(now())
  consecutiveLosses        Int                  @default(0)
  lastResolvedPhase        PulsePhase?
  lastInteractionType      PulseInteractionType?
  frustration              Float                @default(0.0)
  flowState                Float                @default(0.0)
  riskAversion             Float                @default(0.5)
  nextTributeGuaranteedWin Boolean?
  loadedDieBuffCount       Int?
  hadesBargainActive       Boolean?

  @@index([userId])
}

model ChaosCard {
  key         String         @id
  name        String
  description String
  cardClass   ChaosCardClass
  cost        Int
  systemEffect String?
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  cardKey     String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime

  @@index([workspaceId])
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId String    @doc("The ID of the MicroApp or ChaosCard from the artifact manifest.")
  firstViewedAt DateTime  @default(now())
  converted    Boolean   @default(false)
  dtt          Int?      @doc("Discovery-to-Tribute time in minutes.")
  nudgeSentAt  DateTime?

  @@unique([userId, instrumentId])
  @@index([userId])
}

model PotentialAccrualLog {
  id               String    @id @default(cuid())
  workspaceId      String
  workspace        Workspace @relation(fields: [workspaceId], references: [id])
  userId           String
  instrumentId     String
  createdAt        DateTime  @default(now())
  luckWeight       Float
  potentialAwarded Decimal
  narrativeContext String?
  aegisSignature   String?   @doc("Signature from Aegis to verify integrity.")
}

model GlobalAgenticEvent {
  id                 String         @id @default(cuid())
  eventName          String
  status             EventStatus    @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal        @default(0)
  createdAt          DateTime       @default(now())
  expiresAt          DateTime
  winningWorkspaceId String?
  shardReward        String?
  contributions      Contribution[]
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  userId      String
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  createdAt   DateTime           @default(now())
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

