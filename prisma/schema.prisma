// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl    = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String        @id @default(cuid())
  email           String        @unique
  password        String
  firstName       String?
  lastName        String?
  role            UserRole      @default(ADMIN)
  psyche          UserPsyche    @default(ZEN_ARCHITECT)
  agentAlias      String        @default("BEEP")
  foundingVow     String?       // "What must end?"
  foundingGoal    String?       // "What are you building?"
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  lastLoginAt     DateTime?
  workspaces      Workspace[]   @relation("WorkspaceMembers")
  ownedWorkspaces Workspace[]   @relation("WorkspaceOwner")
  transactions    Transaction[]
  conversation    Conversation?
  pulseProfile    PulseProfile?
  ownedChaosCards ChaosCard[]
  discoveries     InstrumentDiscovery[]
}

model Workspace {
  id                  String        @id @default(cuid())
  name                String
  ownerId             String
  owner               User          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members             User[]        @relation("WorkspaceMembers")
  planTier            PlanTier      @default(Artisan)
  credits             Decimal       @default(0.0)
  agentActionsUsed    Int           @default(0)
  overageEnabled      Boolean       @default(true)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  agents              Agent[]
  securityAlerts      SecurityAlert[]
  contacts            Contact[]
  workflows           Workflow[]
  workflowRuns        WorkflowRun[]
  integrations        Integration[]
  threatFeeds         ThreatFeed[]
  conversations       Conversation[]
  unlockedAppIds      String[]      @default([])
  discoveries         InstrumentDiscovery[]
  activeSystemEffects ActiveSystemEffect[] // Added relation

  @@index([ownerId])
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @default(low)
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, email])
}

model Workflow {
  id           String          @id @default(cuid())
  name         String
  isActive     Boolean         @default(true)
  triggerType  String          @default("api")
  definition   Json
  workspaceId  String
  workspace    Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  runs         WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json
  output         Json?
  log            Json[]
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  integrationManifestId String // UUID pointing to a static manifest
  name                  String
  status                IntegrationStatus @default(inactive)
  configDetails         Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@unique([workspaceId, url])
}

model Transaction {
  id           String            @id @default(cuid())
  workspaceId  String
  workspace    Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type         TransactionType
  amount       Decimal
  description  String
  status       TransactionStatus @default(PENDING)
  userId       String?
  user         User?             @relation(fields: [userId], references: [id])
  agentId      String?
  instrumentId String?
  luckWeight   Float?
  outcome      String?
  boonAmount   Decimal?
  userPsyche   UserPsyche?
  createdAt    DateTime          @default(now())
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PulseProfile {
  id                 String      @id @default(cuid())
  userId             String      @unique
  user               User        @relation(fields: [userId], references: [id])
  amplitude          Float       @default(0.2)
  frequency          Float       @default(0.00347) // ~1 cycle per 4.8 hours
  phaseOffset        Float
  baselineLuck       Float
  lastEventTimestamp DateTime    @default(now())
  consecutiveLosses  Int         @default(0)
  lastResolvedPhase  PulsePhase  @default(EQUILIBRIUM)
}

model ChaosCard {
  id           String   @id @default(cuid())
  key          String   @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  owners       User[]
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId String // key of the Chaos Card or id of MicroApp
  firstViewedAt DateTime  @default(now())
  nudgeSentAt  DateTime?
  converted    Boolean   @default(false)
  dtt          Int? // Discovery to Tribute time in minutes

  @@unique([userId, instrumentId])
}

model ActiveSystemEffect {
  id        String   @id @default(cuid())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey   String   // The key from the chaosCardManifest
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([workspaceId])
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  idle
  active
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}
