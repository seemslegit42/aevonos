// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums defined from various parts of the application
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
  COMMAND_SUCCESS
  COMMAND_FAILURE
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  FAILED
}

// Models reconstructed based on application code analysis
model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole                @default(OPERATOR)
  psyche                  UserPsyche              @default(ZEN_ARCHITECT)
  agentAlias              String?
  lastLoginAt             DateTime?
  unlockedChaosCardKeys   String[]                @default([])
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Float?
  foundingBenediction     String?
  firstWhisper            String?
  reclamationGraceUntil   DateTime?
  workspaces              Workspace[]
  transactions            Transaction[]
  securityAlerts          SecurityAlert[]
  pulseProfile            PulseProfile?
  conversation            Conversation?
  discoveries             InstrumentDiscovery[]
  contributions           Contribution[]
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
}

model Workspace {
  id                      String                  @id @default(cuid())
  name                    String
  ownerId                 String
  planTier                PlanTier                @default(Apprentice)
  credits                 Decimal                 @default(0.0)
  agentActionsUsed        Int                     @default(0)
  overageEnabled          Boolean                 @default(false)
  unlockedAppIds          String[]                @default([])
  owner                   User                    @relation(fields: [ownerId], references: [id])
  members                 User[]
  agents                  Agent[]
  contacts                Contact[]
  securityAlerts          SecurityAlert[]
  workflows               Workflow[]
  workflowRuns            WorkflowRun[]
  transactions            Transaction[]
  integrations            Integration[]
  threatFeeds             ThreatFeed[]
  conversation            Conversation?
  activeEffects           ActiveSystemEffect[]
  discoveries             InstrumentDiscovery[]
  contributions           Contribution[]
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  user              User?             @relation(fields: [userId], references: [id])
  userId            String?
}

model Transaction {
  id              String            @id @default(cuid())
  workspaceId     String
  workspace       Workspace         @relation(fields: [workspaceId], references: [id])
  userId          String?
  user            User?             @relation(fields: [userId], references: [id])
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  boonAmount      Decimal?
  tributeAmount   Decimal?
  judasFactor     Decimal?
  userPsyche      UserPsyche?
  createdAt       DateTime          @default(now())
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  isActive    Boolean       @default(true)
  triggerType String        @default("api")
  definition  Json
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId String
  runs        WorkflowRun[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  status         WorkflowRunStatus
  triggerPayload Json?
  output         Json?
  log            Json[]
  startedAt      DateTime
  finishedAt     DateTime?
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  integrationManifestId String
  name                  String
  status                IntegrationStatus
  configDetails         Json
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  workspaceId String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Json[]
  updatedAt   DateTime  @updatedAt
}

model ChaosCard {
  key          String         @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Float
  systemEffect String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId  String
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false)
  dtt           Int?
  nudgeSentAt   DateTime?

  @@unique([userId, instrumentId])
}

model PulseProfile {
  id                         String               @id @default(cuid())
  userId                     String               @unique
  user                       User                 @relation(fields: [userId], references: [id])
  baselineLuck               Float                @default(0.4)
  amplitude                  Float                @default(0.15)
  frequency                  Float                @default(0.01)
  phaseOffset                Float
  consecutiveLosses          Int                  @default(0)
  lastEventTimestamp         DateTime             @default(now())
  lastResolvedPhase          PulsePhase           @default(EQUILIBRIUM)
  lastInteractionType        PulseInteractionType @default(COMMAND_SUCCESS)
  frustration                Float                @default(0)
  flowState                  Float                @default(0)
  riskAversion               Float                @default(0.5)
  nextTributeGuaranteedWin   Boolean?             @default(false)
  loadedDieBuffCount         Int?                 @default(0)
  hadesBargainActive         Boolean?             @default(false)
}

model GlobalAgenticEvent {
  id                 String         @id @default(cuid())
  eventName          String
  status             EventStatus    @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal        @default(0)
  expiresAt          DateTime
  shardReward        String
  winningWorkspaceId String?
  contributions      Contribution[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model Contribution {
  id          String             @id @default(cuid())
  amount      Decimal
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  createdAt   DateTime           @default(now())
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())

  @@unique([workspaceId, cardKey])
}
