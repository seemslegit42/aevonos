
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==============================================================================
// ENUMS
// ==============================================================================
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}


// ==============================================================================
// MODELS
// ==============================================================================

model User {
  id                      String        @id @default(cuid())
  email                   String        @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole      @default(OPERATOR)
  psyche                  UserPsyche
  agentAlias              String?
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  
  // Vow data from onboarding
  foundingVow             String?       @map("founding_vow")
  foundingGoal            String?       @map("founding_goal")

  ownedChaosCards         ChaosCard[]   @relation("UserOwnedChaosCards")

  workspaces              Workspace[]   @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]   @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  discoveries             InstrumentDiscovery[]
  conversations           Conversation[]
}

model Workspace {
  id                  String       @id @default(cuid())
  name                String
  ownerId             String
  owner               User         @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  planTier            PlanTier     @default(Apprentice)
  credits             Decimal      @default(0.0)
  agentActionsUsed    Int          @default(0) @map("agent_actions_used")
  overageEnabled      Boolean      @default(true) @map("overage_enabled")
  unlockedAppIds      String[]     @map("unlocked_app_ids")
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  members             User[]       @relation("WorkspaceMembers")
  agents              Agent[]
  workflows           Workflow[]
  workflowRuns        WorkflowRun[]
  contacts            Contact[]
  securityAlerts      SecurityAlert[]
  threatFeeds         ThreatFeed[]
  integrations        Integration[]
  activeSystemEffects ActiveSystemEffect[]
  transactions        Transaction[]
  conversations       Conversation[]
  discoveries         InstrumentDiscovery[]
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Json     @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PulseProfile {
  id                  String     @id @default(cuid())
  userId              String     @unique
  user                User       @relation(fields: [userId], references: [id])
  amplitude           Float      @default(0.15) // How much luck deviates
  frequency           Float      @default(0.01) // How fast the luck wave oscillates
  phaseOffset         Float      @default(0.0)  // User-specific starting point on the wave
  baselineLuck        Float      @default(0.5)  // The user's base chance of a 'win'
  consecutiveLosses   Int        @default(0)
  lastEventTimestamp  DateTime   @default(now())
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)
}

model Agent {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  name        String
  type        String // e.g., 'aegis-scanner', 'winston-wolfe'
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Workflow {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  name        String
  definition  Json
  isActive    Boolean     @default(true)
  triggerType String      @default("api")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  runs        WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?             @default("[]")
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, email])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  actionableOptions String[]
  timestamp         DateTime          @default(now())
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  url         String
  createdAt   DateTime  @default(now())
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  integrationManifestId String
  name                  String
  status                IntegrationStatus @default(inactive)
  configDetails         Json? // Encrypted API keys, etc.
}

model Transaction {
  id            String            @id @default(cuid())
  workspaceId   String
  workspace     Workspace         @relation(fields: [workspaceId], references: [id])
  userId        String?
  user          User?             @relation(fields: [userId], references: [id])
  agentId       String?
  type          TransactionType
  amount        Decimal           // Net amount. For tributes, this is boonAmount - tributeAmount
  description   String
  status        TransactionStatus
  createdAt     DateTime          @default(now())

  // For Folly Instruments (Klepsydra Engine)
  instrumentId  String?
  luckWeight    Float?
  outcome       String?
  boonAmount    Decimal?          // Gross win amount before tribute is subtracted
  userPsyche    UserPsyche?
}

model ChaosCard {
  id           String @id @default(cuid())
  key          String @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String

  owners       User[] @relation("UserOwnedChaosCards")
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
}

model InstrumentDiscovery {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId  String // app.id or card.key
  firstViewedAt DateTime @default(now())
  converted     Boolean  @default(false)
  dtt           Int?     @map("discovery_to_tribute_minutes")
  nudgeSentAt   DateTime? @map("nudge_sent_at")
  
  @@unique([userId, instrumentId])
}
