
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

// ==============================================================================
// CORE TENANCY MODELS
// ==============================================================================

model User {
  id                    String                  @id @default(cuid())
  email                 String                  @unique
  password              String
  firstName             String?                 @map("first_name")
  lastName              String?                 @map("last_name")
  role                  UserRole                @default(OPERATOR)
  psyche                UserPsyche              @default(ZEN_ARCHITECT)
  agentAlias            String?                 @map("agent_alias")
  corePainIndex         Int?                    @map("core_pain_index")
  foundingVow           String?                 @map("founding_vow")
  foundingGoal          String?                 @map("founding_goal")
  foundingBenediction   String?                 @map("founding_benediction")
  firstWhisper          String?                 @map("first_whisper")
  reclamationGraceUntil DateTime?               @map("reclamation_grace_until")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  lastLoginAt           DateTime?               @map("last_login_at")

  workspaces            Workspace[]
  transactions          Transaction[]
  accounts              Account[]
  sessions              Session[]

  // RELATIONS (no @map)
  conversations         Conversation[]
  ownedChaosCards       ChaosCard[]
  instrumentDiscoveries InstrumentDiscovery[]
  pulseProfile          PulseProfile?

  @@map("users")
}

model Workspace {
  id                String   @id @default(cuid())
  name              String
  ownerId           String   @map("owner_id")
  planTier          PlanTier @default(Apprentice) @map("plan_tier")
  credits           Decimal  @default(0.0)
  potential         Decimal  @default(0.0) // Not used yet, but part of the spec
  agentActionsUsed  Int      @default(0) @map("agent_actions_used")
  overageEnabled    Boolean  @default(true) @map("overage_enabled")
  unlockedAppIds    String[] @default([]) @map("unlocked_app_ids")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  owner             User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members           User[]

  // RELATIONS (no @map)
  agents            Agent[]
  contacts          Contact[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  conversations     Conversation[]
  transactions      Transaction[]
  activeEffects     ActiveSystemEffect[]
  integrations      Integration[]
  instrumentDiscoveries InstrumentDiscovery[]

  @@map("workspaces")
}

// ==============================================================================
// AGENTIC & WORKFLOW MODELS
// ==============================================================================

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String // e.g., 'winston-wolfe'
  description String?
  status      AgentStatus @default(idle)
  workspaceId String      @map("workspace_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("agents")
}

model Workflow {
  id          String           @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean          @default(true) @map("is_active")
  triggerType String           @default("api") @map("trigger_type")
  workspaceId String           @map("workspace_id")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]

  @@map("workflows")
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String            @map("workflow_id")
  workspaceId    String            @map("workspace_id")
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?             @map("trigger_payload")
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now()) @map("started_at")
  finishedAt     DateTime?         @map("finished_at")

  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workflow_runs")
}

// ==============================================================================
// ECONOMIC ENGINE MODELS (OBELISK & KLEPSYDRA)
// ==============================================================================

model Transaction {
  id             String          @id @default(cuid())
  workspaceId    String          @map("workspace_id")
  userId         String?         @map("user_id")
  type           TransactionType
  amount         Decimal // For DEBIT, this is the cost. For CREDIT, the amount added. For TRIBUTE, this is the net change (boonAmount - tributeAmount).
  description    String
  status         TransactionStatus @default(PENDING)
  createdAt      DateTime        @default(now()) @map("created_at")

  // Fields for Tribute transactions
  instrumentId    String?        @map("instrument_id")
  luckWeight      Float?         @map("luck_weight")
  outcome         String?
  tributeAmount   Decimal?       @map("tribute_amount")
  boonAmount      Decimal?       @map("boon_amount")
  judasFactor     Decimal?       @map("judas_factor")
  userPsyche      UserPsyche?    @map("user_psyche")

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

model PulseProfile {
  id                    String        @id @default(cuid())
  userId                String        @unique @map("user_id")
  baselineLuck          Float         @default(0.4) @map("baseline_luck")
  amplitude             Float         @default(0.15)
  frequency             Float         @default(0.01)
  phaseOffset           Float         @map("phase_offset")
  consecutiveLosses     Int           @default(0) @map("consecutive_losses")
  lastEventTimestamp    DateTime      @default(now()) @map("last_event_timestamp")
  lastResolvedPhase     PulsePhase    @default(EQUILIBRIUM) @map("last_resolved_phase")
  lastInteractionType   PulseInteractionType @default(WIN) @map("last_interaction_type")

  // Dynamic psychological state (0-1 range)
  frustration         Float         @default(0)
  flowState           Float         @default(0) @map("flow_state")
  riskAversion        Float         @default(0.5) @map("risk_aversion")
  
  // Buffs
  loadedDieBuffCount      Int?          @map("loaded_die_buff_count")
  nextTributeGuaranteedWin Boolean?     @map("next_tribute_guaranteed_win")
  hadesBargainActive      Boolean?     @map("hades_bargain_active")

  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChaosCard {
  id           String         @id @default(cuid())
  key          String         @unique
  name         String
  description  String
  cardClass    ChaosCardClass @map("card_class")
  cost         Int
  systemEffect String         @map("system_effect")

  owners       User[]
  @@map("chaos_cards")
}

model ActiveSystemEffect {
  id          String   @id @default(cuid())
  workspaceId String   @map("workspace_id")
  cardKey     String   @map("card_key") // e.g., 'ACROPOLIS_MARBLE'
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, expiresAt])
  @@map("active_system_effects")
}

// ==============================================================================
// UTILITY & APPLICATION MODELS
// ==============================================================================

model Contact {
  id          String    @id @default(cuid())
  firstName   String?   @map("first_name")
  lastName    String?   @map("last_name")
  email       String?
  phone       String?
  workspaceId String    @map("workspace_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  @@map("contacts")
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel @map("risk_level")
  timestamp         DateTime          @default(now())
  actionableOptions String[]          @map("actionable_options")
  workspaceId       String            @map("workspace_id")

  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  @@map("security_alerts")
}

model ThreatFeed {
  id          String   @id @default(cuid())
  url         String
  workspaceId String   @map("workspace_id")
  createdAt   DateTime @default(now()) @map("created_at")

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  @@map("threat_feeds")
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique @map("user_id")
  workspaceId String    @map("workspace_id")
  messages    Json[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  @@map("conversations")
}

model InstrumentDiscovery {
    id              String      @id @default(cuid())
    userId          String      @map("user_id")
    workspaceId     String      @map("workspace_id")
    instrumentId    String      @map("instrument_id")
    firstViewedAt   DateTime    @default(now()) @map("first_viewed_at")
    converted       Boolean     @default(false)
    dtt             Int?        @map("discovery_to_tribute_time_minutes")
    nudgeSentAt     DateTime?   @map("nudge_sent_at")

    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace       Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([userId, instrumentId])
    @@map("instrument_discoveries")
}

model IntegrationManifest {
  id          String        @id @default(cuid())
  name        String
  description String
  iconUrl     String        @map("icon_url")
  authMethod  String        @map("auth_method")
  setupGuideUrl String      @map("setup_guide_url")

  instances   Integration[]
  @@map("integration_manifests")
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String            @map("workspace_id")
  integrationManifestId String            @map("integration_manifest_id")
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?             @map("config_details")
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")

  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  manifest              IntegrationManifest @relation(fields: [integrationManifestId], references: [id], onDelete: Cascade)
  @@map("integrations")
}

// ==============================================================================
// AUTH MODELS (NEXT-AUTH)
// ==============================================================================

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ==============================================================================
// ENUMS
// ==============================================================================

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum IntegrationStatus {
    active
    inactive
    error
}
