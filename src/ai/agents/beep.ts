'use server';

/**
 * @fileOverview This file defines the BEEP agent kernel.
 * BEEP (Behavioral Event & Execution Processor) is the central orchestrator of ΛΞVON OS.
 *
 * - processUserCommand - The function to call to process the command.
 * - UserCommandInput - The input type for the processUserCommand function.
 * - UserCommandOutput - The output type for the processUserCommand function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { drSyntaxCritique } from '@/ai/agents/dr-syntax';
import { DrSyntaxInputSchema, DrSyntaxOutputSchema } from '@/ai/agents/dr-syntax-schemas';
import { aegisAnomalyScan } from '@/ai/agents/aegis';
import { AegisAnomalyScanOutputSchema } from '@/ai/agents/aegis-schemas';


// Define tools available to BEEP
const critiqueContentTool = ai.defineTool(
    {
        name: 'critiqueContent',
        description: 'Sends content to Dr. Syntax for a harsh but effective critique. Use this when a user asks for a review, critique, or feedback on a piece of text, code, or a prompt. Extract the content and content type from the user command.',
        inputSchema: DrSyntaxInputSchema,
        outputSchema: DrSyntaxOutputSchema,
    },
    async (input) => await drSyntaxCritique(input)
);

const runAegisScanTool = ai.defineTool(
    {
        name: 'runAegisScan',
        description: 'Initiates a security scan using the Aegis subsystem. Use this when the user asks to "run a scan", "check for threats", or other security-related commands.',
        inputSchema: z.object({}), // No specific input needed from user command, we'll use a canned description
        outputSchema: AegisAnomalyScanOutputSchema,
    },
    async () => await aegisAnomalyScan({ activityDescription: 'User initiated a manual security scan via BEEP.' })
);


const LaunchableAppTypeSchema = z.enum([
    'file-explorer',
    'terminal',
    'echo-control',
]);

const AppToLaunchSchema = z.object({
    type: LaunchableAppTypeSchema,
    title: z.string().optional().describe("A specific title for this app instance, if applicable. Otherwise, the default will be used."),
    description: z.string().optional().describe("A specific description for this app instance, if applicable. Otherwise, the default will be used."),
});

const AgentReportSchema = z.discriminatedUnion('agent', [
  z.object({
    agent: z.literal('dr-syntax'),
    report: DrSyntaxOutputSchema.describe(
      'The full report object from the Dr. Syntax agent.'
    ),
  }),
  z.object({
    agent: z.literal('aegis'),
    report: AegisAnomalyScanOutputSchema.describe(
      'The full report object from the Aegis agent.'
    ),
  }),
]);


const UserCommandInputSchema = z.object({
  userCommand: z
    .string()
    .describe(
      'A natural language command from the user about what they want to do or launch.'
    ),
});
export type UserCommandInput = z.infer<typeof UserCommandInputSchema>;

const UserCommandOutputSchema = z.object({
    appsToLaunch: z
        .array(AppToLaunchSchema)
        .describe(
          'An array of Micro-Apps that BEEP has determined should be launched on the Canvas based on the user command. This can be empty.'
        ),
    agentReports: z
        .array(AgentReportSchema)
        .optional()
        .describe("An array of reports generated by other agents after BEEP delegated tasks to them. This should be populated with the result of any tool calls."),
    suggestedCommands: z
        .array(z.string())
        .describe(
          'If no specific app can be launched or action taken, provide an array of suggested commands or actions the user could take next. This is for conversational repair.'
        ),
    responseText: z.string().describe('A natural language response to the user confirming the action or asking for clarification.'),
});
export type UserCommandOutput = z.infer<typeof UserCommandOutputSchema>;

export async function processUserCommand(
  input: UserCommandInput
): Promise<UserCommandOutput> {
  return userCommandFlow(input);
}

const userCommandPrompt = ai.definePrompt({
  name: 'userCommandPrompt',
  input: {schema: UserCommandInputSchema},
  output: {schema: UserCommandOutputSchema},
  tools: [critiqueContentTool, runAegisScanTool],
  prompt: `You are BEEP (Behavioral Event & Execution Processor), the central orchestrator of ΛΞVON OS. Your primary function is to interpret user commands and translate them into actions, such as launching Micro-Apps or delegating tasks to other agents.

You have access to the following Micro-Apps which you can launch:
- file-explorer: A tool to browse and manage files.
- terminal: A command-line interface for direct system access.
- echo-control: An app to recall and summarize the last session.

You also have tools to delegate tasks to other agents:
- critiqueContent: Use this tool when the user provides content and asks for a critique, review, or feedback.
- runAegisScan: Use this tool when the user asks to run a security scan or check for threats.

Your process:
1.  Analyze the user's command.
2.  If the user asks for a critique, a security scan, or another action that requires a tool, use the appropriate tool. After the tool runs, you MUST place the resulting report in the 'agentReports' field of your final JSON output.
3.  If the user is asking to open an app (e.g., "open terminal"), populate the 'appsToLaunch' array.
4.  If the command is abstract and you cannot take a direct action, provide helpful next steps in 'suggestedCommands'.
5.  Always provide a concise, helpful, and slightly formal response in 'responseText'.

User Command: {{{userCommand}}}
`,
});

const userCommandFlow = ai.defineFlow(
  {
    name: 'userCommandFlow',
    inputSchema: UserCommandInputSchema,
    outputSchema: UserCommandOutputSchema,
  },
  async (input) => {
    const { output } = await userCommandPrompt(input);
    if (!output) {
      throw new Error("BEEP failed to produce a valid output.");
    }
    return output;
  }
);
