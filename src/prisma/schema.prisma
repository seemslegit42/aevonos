
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  firstName               String?
  lastName                String?
  password                String
  agentAlias              String?
  psyche                  UserPsyche
  role                    UserRole  @default(OPERATOR)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Float?
  foundingBenediction     String?
  firstWhisper            String?

  workspaces            Workspace[]
  transactions          Transaction[]
  contributions         Contribution[]
  pulseProfile          PulseProfile?
  instrumentDiscoveries InstrumentDiscovery[]
  unlockedChaosCardKeys String[]
}

model Workspace {
  id               String    @id @default(cuid())
  name             String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  ownerId          String
  planTier         PlanTier  @default(Apprentice)
  agentActionsUsed Int       @default(0)
  credits          Decimal   @default(0.0)
  overageEnabled   Boolean   @default(false)
  unlockedAppIds   String[]

  owner     User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members   User[]
  agents    Agent[]
  contacts  Contact[]
  workflows Workflow[]
  runs      WorkflowRun[]
  alerts    SecurityAlert[]
  feeds     ThreatFeed[]
  events    GlobalAgenticEvent[] @relation("WinningWorkspaceEvents")
  contributions Contribution[]
  integrations Integration[]
  transactions  Transaction[]
  discoveries   InstrumentDiscovery[]
}

model PulseProfile {
  id                     String  @id @default(cuid())
  user                   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String  @unique
  baselineLuck           Float   @default(0.4) // The user's natural "luck" anchor
  amplitude              Float   @default(0.15) // How much luck deviates from baseline
  frequency              Float   @default(0.01) // How quickly the luck wave oscillates
  phaseOffset            Float   // Ensures users' waves are out of sync
  consecutiveLosses      Int     @default(0) // Counter for the Pity Boon protocol
  lastEventTimestamp     DateTime @default(now()) // Timestamp of the last tribute event
  lastResolvedPhase      PulsePhase? // The phase the user was in after their last interaction
  lastInteractionType    PulseInteractionType?
  
  // Dynamic Psychological State - updated with every significant interaction
  frustration            Float   @default(0) // 0 to 1 scale
  flowState              Float   @default(0) // 0 to 1 scale
  riskAversion           Float   @default(0) // 0 to 1 scale
  
  // Buffs from Ritual Boons / Mercenary Cards
  loadedDieBuffCount     Int     @default(0)
  nextTributeGuaranteedWin Boolean @default(false)
  hadesBargainActive     Boolean @default(false)
}

model Contact {
  id          String    @id @default(cuid())
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Workflow {
  id          String    @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean   @default(true)
  triggerType String    @default("api")
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  workspace Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs      WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus
  triggerPayload Json
  output         Json?
  log            Json[]
  workflowId     String
  workspaceId    String
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  workflow  Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  userId            String?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ThreatFeed {
  id          String @id @default(cuid())
  url         String
  workspaceId String

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Transaction {
  id              String           @id @default(cuid())
  workspaceId     String
  userId          String?
  agentId         String?
  instrumentId    String?          // The ID of the MicroApp or Chaos Card that triggered the transaction
  type            TransactionType
  amount          Decimal          // For DEBIT/CREDIT, the direct amount. For TRIBUTE, the net change (boon - cost).
  status          TransactionStatus
  description     String
  createdAt       DateTime         @default(now())

  // Fields specific to TRIBUTE transactions for the Klepsydra Engine
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?         // The gross amount of the tribute before the boon is calculated.
  boonAmount      Decimal?         // The amount of the boon granted.
  judasFactor     Decimal?         // The reduction factor in a "hollow win"
  userPsyche      UserPsyche?      // The user's psyche at the time of the tribute.

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete:SetNull)
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  messages    Json[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String // This is the UUID from the static manifest file.
  name                  String
  status                IntegrationStatus
  configDetails         Json // Encrypted API keys, tokens, settings, etc.
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model GlobalAgenticEvent {
  id                 String  @id @default(cuid())
  eventName          String
  status             EventStatus @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal @default(0.0)
  expiresAt          DateTime
  shardReward        String // The key of the reward (e.g., a Chaos Card ID for a system effect)
  winningWorkspaceId String?
  
  winningWorkspace Workspace? @relation("WinningWorkspaceEvents", fields: [winningWorkspaceId], references: [id])
  contributions Contribution[]
}

model Contribution {
  id          String @id @default(cuid())
  amount      Decimal
  timestamp   DateTime @default(now())
  workspaceId String
  userId      String
  eventId     String

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  user User @relation(fields: [userId], references: [id])
  event GlobalAgenticEvent @relation(fields: [eventId], references: [id])
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  workspaceId   String
  instrumentId  String // Key of the MicroApp or ChaosCard
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false) // Set to true when the user makes a tribute/purchase
  dtt           Int?      // Discovery-to-Tribute time in minutes
  nudgeSentAt   DateTime?
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, instrumentId])
}

// System-wide effects from Chaos Cards, etc.
model ActiveSystemEffect {
  id          String   @id @default(cuid())
  workspaceId String
  cardKey     String   // The key of the Chaos Card that triggered the effect
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([workspaceId, expiresAt])
}

model ChaosCard {
  id            String          @id
  name          String
  description   String
  cardClass     ChaosCardClass
  cost          Int
  systemEffect  String?
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  processing
  idle
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}

enum IntegrationStatus {
    active
    inactive
    error
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}
