// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String?
  firstName               String?
  lastName                String?
  role                    UserRole                @default(OPERATOR)
  psyche                  UserPsyche              @default(ZEN_ARCHITECT)
  agentAlias              String?
  lastLoginAt             DateTime?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  unlockedChaosCardKeys   String[]
  reclamationGraceUntil   DateTime?
  foundingVow             String?
  foundingGoal            String?
  foundingBenediction     String?
  firstWhisper            String?
  corePainIndex           Float?
  workspaces              Workspace[]             @relation("WorkspaceMembers")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  instrumentDiscoveries   InstrumentDiscovery[]
  contributions           Contribution[]

  @@map("users")
}

model Workspace {
  id                 String               @id @default(cuid())
  name               String
  ownerId            String
  owner              User                 @relation("WorkspaceMembers", fields: [ownerId], references: [id])
  planTier           PlanTier             @default(Apprentice)
  credits            Decimal              @default(0.0)
  agentActionsUsed   Int                  @default(0)
  overageEnabled     Boolean              @default(false)
  unlockedAppIds     String[]
  members            User[]               @relation("WorkspaceMembers")
  agents             Agent[]
  contacts           Contact[]
  securityAlerts     SecurityAlert[]
  workflows          Workflow[]
  workflowRuns       WorkflowRun[]
  transactions       Transaction[]
  conversations      Conversation[]
  integrations       Integration[]
  threatFeeds        ThreatFeed[]
  activeSystemEffect ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
  contributions      Contribution[]
  winningEvents      GlobalAgenticEvent[]

  @@map("workspaces")
}

model Agent {
  id          String      @id @default(cuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("agents")
}

model Contact {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  email       String?   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("contacts")
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  userId            String?
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]

  @@map("security_alerts")
}

model Workflow {
  id           String        @id @default(cuid())
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  definition   Json
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  workflowRuns WorkflowRun[]

  @@map("workflows")
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  @@map("workflow_runs")
}

model Transaction {
  id             String           @id @default(cuid())
  workspaceId    String
  workspace      Workspace        @relation(fields: [workspaceId], references: [id])
  userId         String?
  user           User?            @relation(fields: [userId], references: [id])
  type           TransactionType
  amount         Decimal
  description    String
  status         TransactionStatus @default(COMPLETED)
  createdAt      DateTime         @default(now())
  instrumentId   String?
  luckWeight     Float?
  tributeAmount  Decimal?
  boonAmount     Decimal?
  judasFactor    Decimal?
  outcome        String?
  userPsyche     UserPsyche?
  eventId        String?
  event          GlobalAgenticEvent? @relation(fields: [eventId], references: [id])


  @@map("transactions")
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Json     @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
  integrationManifestId String            @map("integration_manifest_id")
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json?

  @@map("integrations")
}

model ThreatFeed {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  url         String
  createdAt   DateTime  @default(now())

  @@map("threat_feeds")
}

model ChaosCard {
  key          String         @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("chaos_cards")
}

model PulseProfile {
  id                  String                @id @default(cuid())
  userId              String                @unique
  user                User                  @relation(fields: [userId], references: [id])
  baselineLuck        Float                 @default(0.4)
  amplitude           Float                 @default(0.15)
  frequency           Float                 @default(0.01)
  phaseOffset         Float
  consecutiveLosses   Int                   @default(0)
  lastEventTimestamp  DateTime              @default(now())
  lastResolvedPhase   PulsePhase?
  lastInteractionType PulseInteractionType?
  frustration         Float                 @default(0.0)
  flowState           Float                 @default(0.0)
  riskAversion        Float                 @default(0.0)
  nextTributeGuaranteedWin Boolean? @default(false)
  loadedDieBuffCount       Int?     @default(0)
  hadesBargainActive       Boolean? @default(false)

  @@map("pulse_profiles")
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())

  @@map("active_system_effects")
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  instrumentId String
  firstViewedAt DateTime  @default(now())
  converted    Boolean   @default(false)
  dtt          Int? // Discovery-to-Tribute time in minutes
  nudgeSentAt  DateTime?

  @@unique([userId, instrumentId])
  @@map("instrument_discoveries")
}

model GlobalAgenticEvent {
  id                 String      @id @default(cuid())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  eventName          String
  status             EventStatus @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal     @default(0.0)
  expiresAt          DateTime
  winningWorkspaceId String?
  winningWorkspace   Workspace?  @relation(fields: [winningWorkspaceId], references: [id])
  contributions      Contribution[]
  shardReward        String?
  transactions       Transaction[]
  
  @@map("global_agentic_events")
}

model Contribution {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now())
  amount      Decimal
  eventId     String
  event       GlobalAgenticEvent @relation(fields: [eventId], references: [id])
  workspaceId String
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  userId      String
  user        User               @relation(fields: [userId], references: [id])

  @@map("contributions")
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
  BOON
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  COMMAND_SUCCESS
  COMMAND_FAILURE
  WIN
  LOSS
}

enum EventStatus {
  ACTIVE
  CONCLUDED
}
