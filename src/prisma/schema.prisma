// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  firstName               String?
  lastName                String?
  password                String?
  role                    UserRole               @default(OPERATOR)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  lastLoginAt             DateTime?
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspaces         Workspace[]            @relation("WorkspaceOwner")
  transactions            Transaction[]
  agentAlias              String?                @default("BEEP")
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  foundingVow             String?
  foundingGoal            String?
  conversations           Conversation[]
  pulseProfile            PulseProfile?
  ownedChaosCards         ChaosCard[]
  instrumentDiscoveries   InstrumentDiscovery[]
}

model Workspace {
  id                    String              @id @default(cuid())
  name                  String
  owner                 User                @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId               String
  members               User[]              @relation("WorkspaceMembers")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  planTier              PlanTier            @default(Apprentice)
  credits               Decimal             @default(0)
  agentActionsUsed      Int                 @default(0)
  overageEnabled        Boolean             @default(true)
  unlockedAppIds        String[]            @default([])
  reclamationGraceUntil DateTime?
  agents                Agent[]
  contacts              Contact[]
  transactions          Transaction[]
  securityAlerts        SecurityAlert[]
  threatFeeds           ThreatFeed[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  conversations         Conversation[]
  instrumentDiscoveries InstrumentDiscovery[]
  activeSystemEffects   ActiveSystemEffect[]
}

model Agent {
  id            String      @id @default(cuid())
  name          String
  type          String
  description   String?
  status        AgentStatus @default(idle)
  configuration Json?
  workspace     Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([email, workspaceId])
}

model Transaction {
  id           String            @id @default(cuid())
  workspace    Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  user         User?             @relation(fields: [userId], references: [id])
  userId       String?
  type         TransactionType
  amount       Decimal
  description  String
  status       TransactionStatus @default(PENDING)
  createdAt    DateTime          @default(now())
  instrumentId String?
  luckWeight   Float?
  outcome      String?
  boonAmount   Decimal?
  userPsyche   UserPsyche?
}

model SecurityAlert {
  id                String            @id @default(cuid())
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
}

model Workflow {
  id           String          @id @default(cuid())
  name         String
  isActive     Boolean         @default(true)
  triggerType  String          @default("api")
  definition   Json
  workspace    Workspace       @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  workflowRuns WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workflowId     String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  status         WorkflowRunStatus @default(pending)
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  triggerPayload Json?
  output         Json?
  log            Json?
}

model Conversation {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  messages    Json
  updatedAt   DateTime  @updatedAt
}

model PulseProfile {
  id                 String     @id @default(cuid())
  user               User       @relation(fields: [userId], references: [id])
  userId             String     @unique
  baselineLuck       Float      @default(0.5)
  amplitude          Float      @default(0.15)
  frequency          Float      @default(0.005) // cycles per minute
  phaseOffset        Float      @default(0)
  lastEventTimestamp DateTime   @default(now())
  consecutiveLosses  Int        @default(0)
  lastResolvedPhase  PulsePhase @default(EQUILIBRIUM)
}

model ChaosCard {
  id           String   @id @default(cuid())
  key          String   @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  owners       User[]
}

model ActiveSystemEffect {
    id          String    @id @default(cuid())
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId String
    cardKey     String
    expiresAt   DateTime
    createdAt   DateTime  @default(now())
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  instrumentId String // ID of ChaosCard or MicroApp
  firstViewedAt DateTime  @default(now())
  converted    Boolean   @default(false)
  dtt          Int? // Difference-to-Tribute in minutes
  nudgeSentAt  DateTime?

  @@unique([userId, instrumentId])
}


enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum SecurityRiskLevel {
  low
  medium
  high
  critical
  none
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
}