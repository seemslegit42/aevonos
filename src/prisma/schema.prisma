// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "rhel-openssl-1.1.x"]
}

// AUTH & CORE TENANCY
model User {
  id                    String        @id @default(cuid())
  email                 String        @unique
  password              String
  firstName             String?
  lastName              String?
  role                  UserRole      @default(OPERATOR)
  psyche                UserPsyche    @default(ZEN_ARCHITECT)
  agentAlias            String?       @default("BEEP")
  lastLoginAt           DateTime?
  reclamationGraceUntil DateTime?
  corePainIndex         Int?
  foundingVow           String?
  foundingGoal          String?
  foundingBenediction   String?
  firstWhisper          String?
  unlockedChaosCardKeys String[]      @default([])
  workspaces            Workspace[]   @relation("WorkspaceMembers")
  transactions          Transaction[]
  contributions         Contribution[]
  discoveries           InstrumentDiscovery[]
  pulseProfile          PulseProfile?
  conversation          Conversation?
  securityAlerts        SecurityAlert[]
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model Workspace {
  id              String         @id @default(cuid())
  name            String
  ownerId         String
  owner           User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members         User[]         @relation("WorkspaceMembers")
  planTier        PlanTier       @default(Apprentice)
  credits         Decimal        @default(100.0)
  agentActionsUsed Int           @default(0)
  unlockedAppIds  String[]       @default([])
  overageEnabled  Boolean        @default(true)
  agents          Agent[]
  contacts        Contact[]
  securityAlerts  SecurityAlert[]
  threatFeeds     ThreatFeed[]
  workflows       Workflow[]
  workflowRuns    WorkflowRun[]
  transactions    Transaction[]
  contributions   Contribution[]
  discoveries     InstrumentDiscovery[]
  activeEffects   ActiveSystemEffect[]
  integrations    Integration[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// AGENTS & WORKFLOWS
model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Workflow {
  id            String          @id @default(cuid())
  name          String
  isActive      Boolean         @default(true)
  triggerType   String          @default("api")
  definition    Json
  workspaceId   String
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs          WorkflowRun[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json[]
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

// ECONOMY
model Transaction {
  id              String           @id @default(cuid())
  workspaceId     String
  workspace       Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId          String?
  user            User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  type            TransactionType
  amount          Decimal
  description     String
  status          TransactionStatus @default(PENDING)
  instrumentId    String?
  luckWeight      Float?
  outcome         String?
  tributeAmount   Decimal?
  boonAmount      Decimal?
  judasFactor     Decimal?
  userPsyche      UserPsyche?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model PulseProfile {
  id                   String                @id @default(cuid())
  userId               String                @unique
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  baselineLuck         Float                 @default(0.4)
  amplitude            Float                 @default(0.15)
  frequency            Float                 @default(0.01)
  phaseOffset          Float
  consecutiveLosses    Int                   @default(0)
  lastEventTimestamp   DateTime              @default(now())
  lastResolvedPhase    PulsePhase            @default(EQUILIBRIUM)
  lastInteractionType  PulseInteractionType  @default(INITIALIZATION)
  frustration          Float                 @default(0)
  flowState            Float                 @default(0)
  riskAversion         Float                 @default(0.5)
  nextTributeGuaranteedWin Boolean?           @default(false)
  loadedDieBuffCount   Int?                  @default(0)
  hadesBargainActive   Boolean?              @default(false)
}

model InstrumentDiscovery {
  id            String     @id @default(cuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId   String
  workspace     Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId  String
  firstViewedAt DateTime   @default(now())
  nudgeSentAt   DateTime?
  converted     Boolean    @default(false)
  dtt           Int?
}

model ChaosCard {
  id           String         @id
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
}

// SECURITY
model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

// UTILITY
model Contact {
  id          String     @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspaceId String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([email, workspaceId])
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  messages    Json[]
  updatedAt   DateTime  @updatedAt
}

// GAE - Black Wager
model GlobalAgenticEvent {
  id                 String         @id @default(cuid())
  eventName          String
  status             EventStatus    @default(ACTIVE)
  poolTarget         Decimal
  currentPool        Decimal        @default(0)
  expiresAt          DateTime
  shardReward        String
  winningWorkspaceId String?
  contributions      Contribution[]
  createdAt          DateTime       @default(now())
}

model Contribution {
  id          String               @id @default(cuid())
  amount      Decimal
  workspaceId String
  workspace   Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId     String
  event       GlobalAgenticEvent   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt   DateTime             @default(now())
}

model Integration {
    id                    String            @id @default(cuid())
    workspaceId           String
    workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    integrationManifestId String // Maps to the static manifest
    name                  String
    status                IntegrationStatus @default(active)
    configDetails         Json // Encrypted credentials, tokens, etc.
    createdAt             DateTime          @default(now())
    updatedAt             DateTime          @updatedAt
}

// ENUMS
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum PulsePhase {
    CREST
    TROUGH
    EQUILIBRIUM
}

enum PulseInteractionType {
    WIN
    LOSS
    COMMAND_SUCCESS
    COMMAND_FAILURE
    INITIALIZATION
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
    BOON
}

enum EventStatus {
  ACTIVE
  CONCLUDED
  CANCELLED
}

enum IntegrationStatus {
    active
    inactive
    error
}
