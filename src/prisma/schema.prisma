
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  password                String
  firstName               String?
  lastName                String?
  role                    UserRole               @default(OPERATOR)
  psyche                  UserPsyche             @default(ZEN_ARCHITECT)
  agentAlias              String?
  lastLoginAt             DateTime?
  reclamationGraceUntil   DateTime?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  workspaces              Workspace[]            @relation("WorkspaceMembers")
  ownedWorkspace          Workspace?             @relation("WorkspaceOwner")
  transactions            Transaction[]
  pulseProfile            PulseProfile?
  ownedChaosCards         ChaosCard[]
  instrumentDiscoveries   InstrumentDiscovery[]
  conversations           Conversation[]
  foundingVow             String?
  foundingGoal            String?
  corePainIndex           Float?
  firstWhisper            String?

  // Auth.js specific fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Workspace {
  id                String       @id @default(cuid())
  name              String
  ownerId           String
  planTier          PlanTier
  credits           Decimal      @default(0.0)
  agentActionsUsed  Int          @default(0)
  overageEnabled    Boolean      @default(true)
  unlockedAppIds    String[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  owner             User         @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members           User[]       @relation("WorkspaceMembers")
  agents            Agent[]
  contacts          Contact[]
  securityAlerts    SecurityAlert[]
  threatFeeds       ThreatFeed[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  transactions      Transaction[]
  integrations      Integration[]
  activeSystemEffects ActiveSystemEffect[]
  discoveries       InstrumentDiscovery[]
  conversations     Conversation[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  definition   Json
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  runs         WorkflowRun[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflowId     String
  workspaceId    String
  status         WorkflowRunStatus
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
  triggerPayload Json?
  output         Json?
  log            Json?
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Transaction {
  id           String          @id @default(cuid())
  workspaceId  String
  userId       String?
  type         TransactionType
  amount       Decimal
  description  String
  status       TransactionStatus
  createdAt    DateTime        @default(now())
  workspace    Workspace       @relation(fields: [workspaceId], references: [id])
  user         User?           @relation(fields: [userId], references: [id])
  // For Tributes
  instrumentId String?
  luckWeight   Float?
  outcome      String?
  boonAmount   Decimal?
  userPsyche   UserPsyche?
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String
  name                  String
  status                IntegrationStatus
  configDetails         Json
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  workspace             Workspace         @relation(fields: [workspaceId], references: [id])
}

model PulseProfile {
  id                  String     @id @default(cuid())
  userId              String     @unique
  user                User       @relation(fields: [userId], references: [id])
  baselineLuck        Float      @default(0.5)
  amplitude           Float      @default(0.15)
  frequency           Float      @default(0.01)
  phaseOffset         Float
  lastEventTimestamp  DateTime   @default(now())
  consecutiveLosses   Int        @default(0)
  lastResolvedPhase   PulsePhase @default(EQUILIBRIUM)
  riskAversion        Float      @default(0.5) @db.Real
  frustration         Float      @default(0.0) @db.Real
  flowState           Float      @default(0.0) @db.Real
  lastInteractionType String?
}

model ChaosCard {
  id           Int      @id @default(autoincrement())
  key          String   @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  users        User[]
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  workspaceId String
  cardKey     String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, cardKey])
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  userId       String
  workspaceId  String
  instrumentId String // This can be a MicroApp ID or a ChaosCard key
  firstViewedAt DateTime @default(now())
  converted    Boolean   @default(false)
  nudgeSentAt  DateTime?
  dtt          Int?      // Discovery-to-Tribute time in minutes
  user         User      @relation(fields: [userId], references: [id])
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String    @unique
  workspaceId String
  messages    Json[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model Directory {
  id        String   @id @default(cuid())
  name      String
  path      String   @unique
  parentId  String?
  parent    Directory?  @relation("DirectoryChildren", fields: [parentId], references: [id])
  children  Directory[] @relation("DirectoryChildren")
  files     File[]
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model File {
  id          String   @id @default(cuid())
  name        String
  path        String   @unique
  directoryId String
  directory   Directory @relation(fields: [directoryId], references: [id])
  mimeType    String
  size        Int
  storageRef  String // e.g., gs://bucket/path/to/file
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  stockLevel    Int
  reorderLevel  Int
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
}

model Supplier {
  id          String   @id @default(cuid())
  name        String
  contactInfo Json?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model PurchaseOrder {
  id            String   @id @default(cuid())
  productId     String
  quantity      Int
  supplierId    String
  status        String // e.g., 'PENDING', 'SHIPPED', 'RECEIVED'
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
}

model IntelligenceCase {
    id                  String      @id @default(cuid())
    targetName          String
    caseStatus          String      // e.g., 'ACTIVE', 'CLOSED'
    osintReport         Json?
    behavioralAnalysis  Json?
    decoyReport         Json?
    dossier             Json?
    workspaceId         String
    workspace           Workspace @relation(fields: [workspaceId], references: [id])
}

model Expense {
    id                  String      @id @default(cuid())
    description         String
    amount              Decimal
    category            String
    judgement           String?
    workspaceId         String
    workspace           Workspace @relation(fields: [workspaceId], references: [id])
}

model LogEntry {
    id                  String      @id @default(cuid())
    source              String      // e.g., 'Lahey', 'Foremanator'
    rawLog              String
    parsedLog           Json?
    workspaceId         String
    workspace           Workspace @relation(fields: [workspaceId], references: [id])
}

model Receipt {
    id                  String      @id @default(cuid())
    vendor              String
    amount              Decimal
    transactionDate     DateTime
    lead                String?
    storageRef          String
    workspaceId         String
    workspace           Workspace @relation(fields: [workspaceId], references: [id])
}

model SagaEvent {
    id                  String      @id @default(cuid())
    category            String
    description         String
    martyrPoints        Int
    workspaceId         String
    workspace           Workspace @relation(fields: [workspaceId], references: [id])
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  paused
  error
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum ChaosCardClass {
    AESTHETIC
    AGENTIC
    SYSTEMIC
    SYNDICATE
}
