
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  password              String
  firstName             String?               @map("first_name")
  lastName              String?               @map("last_name")
  emailVerified         DateTime?             @map("email_verified")
  image                 String?
  role                  UserRole              @default(OPERATOR)
  psyche                UserPsyche
  agentAlias            String?               @map("agent_alias")
  corePainIndex         Int?                  @map("core_pain_index")
  foundingVow           String?               @map("founding_vow")
  foundingGoal          String?               @map("founding_goal")
  foundingBenediction   String?               @map("founding_benediction")
  firstWhisper          String?               @map("first_whisper")
  reclamationGraceUntil DateTime?             @map("reclamation_grace_until")
  lastLoginAt           DateTime?             @map("last_login_at")
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")
  accounts              Account[]
  sessions              Session[]
  ownedWorkspaces       Workspace[]           @relation("WorkspaceOwner")
  workspaces            Workspace[]           @relation("WorkspaceMembers")
  transactions          Transaction[]
  conversation          Conversation?
  unlockedChaosCardKeys String[]              @default([]) @map("unlocked_chaos_card_keys")
  pulseProfile          PulseProfile?
  instrumentDiscoveries InstrumentDiscovery[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Workspace {
  id                String                @id @default(cuid())
  name              String
  ownerId           String                @unique @map("owner_id")
  planTier          PlanTier              @default(Apprentice) @map("plan_tier")
  credits           Decimal               @default(100.0)
  agentActionsUsed  Int                   @default(0) @map("agent_actions_used")
  overageEnabled    Boolean               @default(true) @map("overage_enabled")
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @updatedAt @map("updated_at")
  owner             User                  @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members           User[]                @relation("WorkspaceMembers")
  agents            Agent[]
  contacts          Contact[]
  securityAlerts    SecurityAlert[]
  transactions      Transaction[]
  threatFeeds       ThreatFeed[]
  unlockedAppIds    String[]              @default([]) @map("unlocked_app_ids")
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  integrations      Integration[]
  conversations     Conversation[]
  activeEffects     ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  workspaceId String      @map("workspace_id")
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?   @map("first_name")
  lastName    String?   @map("last_name")
  email       String?
  phone       String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]
  workspaceId       String            @map("workspace_id")
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Transaction {
  id             String            @id @default(cuid())
  type           TransactionType
  amount         Decimal
  description    String
  status         TransactionStatus @default(COMPLETED)
  createdAt      DateTime          @default(now()) @map("created_at")
  workspaceId    String            @map("workspace_id")
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId         String?           @map("user_id")
  user           User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  agentId        String?           @map("agent_id")
  instrumentId   String?           @map("instrument_id")
  luckWeight     Float?            @map("luck_weight")
  outcome        String?
  boonAmount     Decimal?          @map("boon_amount")
  tributeAmount  Decimal?          @map("tribute_amount")
  judasFactor    Decimal?          @map("judas_factor")
  userPsyche     UserPsyche?       @map("user_psyche")
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  createdAt   DateTime  @default(now()) @map("created_at")
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  definition   Json
  isActive     Boolean       @default(true)
  triggerType  String        @default("api")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  workspaceId  String        @map("workspace_id")
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowRuns WorkflowRun[]
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?             @map("trigger_payload")
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now()) @map("started_at")
  finishedAt     DateTime?         @map("finished_at")
  workspaceId    String            @map("workspace_id")
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workflowId     String            @map("workflow_id")
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model Integration {
  id                    String              @id @default(cuid())
  integrationManifestId String              @map("integration_manifest_id")
  name                  String
  status                IntegrationStatus   @default(active)
  configDetails         Json                @map("config_details")
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")
  workspaceId           String              @map("workspace_id")
  workspace             Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String    @id @default(cuid())
  messages    Json[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  userId      String    @unique @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ChaosCard {
  id           String         @id @default(cuid())
  key          String         @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
}

model ActiveSystemEffect {
  id          String    @id @default(cuid())
  cardKey     String    @map("card_key")
  expiresAt   DateTime  @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  instrumentId String    @map("instrument_id")
  firstViewedAt DateTime @default(now()) @map("first_viewed_at")
  converted   Boolean   @default(false)
  dtt         Int?      @map("dtt")
  nudgeSentAt DateTime? @map("nudge_sent_at")
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, instrumentId])
}


model PulseProfile {
  id                   String                @id @default(cuid())
  baselineLuck         Float                 @default(0.4) @map("baseline_luck")
  amplitude            Float                 @default(0.15)
  frequency            Float                 @default(0.01)
  phaseOffset          Float                 @map("phase_offset")
  lastEventTimestamp   DateTime              @default(now()) @map("last_event_timestamp")
  consecutiveLosses    Int                   @default(0) @map("consecutive_losses")
  frustration          Float                 @default(0)
  flowState            Float                 @default(0) @map("flow_state")
  riskAversion         Float                 @default(0.5) @map("risk_aversion")
  lastResolvedPhase    PulsePhase            @default(EQUILIBRIUM) @map("last_resolved_phase")
  lastInteractionType  PulseInteractionType? @map("last_interaction_type")
  loadedDieBuffCount   Int?                  @map("loaded_die_buff_count")
  nextTributeGuaranteedWin Boolean?            @map("next_tribute_guaranteed_win")
  hadesBargainActive   Boolean?              @map("hades_bargain_active")
  
  userId               String                @unique @map("user_id")
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}


enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum AgentStatus {
  idle
  active
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum IntegrationStatus {
  active
  paused
  error
  disconnected
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}
