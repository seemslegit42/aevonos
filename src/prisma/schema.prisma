
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  password     String
  firstName    String?
  lastName     String?
  role         UserRole  @default(OPERATOR)
  agentAlias   String    @default("BEEP")
  psyche       UserPsyche @default(ZEN_ARCHITECT)
  foundingVow  String?
  foundingGoal String?
  
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaces    Workspace[] @relation("WorkspaceMembers")

  transactions Transaction[]
  discoveries  InstrumentDiscovery[]
  pulseProfile PulseProfile?
  conversation Conversation?

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLoginAt  DateTime?
}

model Workspace {
  id               String    @id @default(cuid())
  name             String
  planTier         PlanTier  @default(Apprentice)
  credits          Decimal   @default(0.0) @db.Decimal(10, 2)
  agentActionsUsed Int       @default(0)
  overageEnabled   Boolean   @default(true)
  unlockedAppIds   String[]  @default([])

  owner   User   @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  members User[] @relation("WorkspaceMembers")
  
  agents       Agent[]
  workflows    Workflow[]
  workflowRuns WorkflowRun[]
  contacts     Contact[]
  securityAlerts SecurityAlert[]
  threatFeeds  ThreatFeed[]
  integrations Integration[]
  transactions Transaction[]
  discoveries  InstrumentDiscovery[]
  conversations Conversation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workflow {
  id           String      @id @default(cuid())
  name         String
  definition   Json
  isActive     Boolean     @default(true)
  triggerType  String      @default("api") // "api", "schedule", "event"
  
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String
  
  runs         WorkflowRun[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId     String
  workspaceId    String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status         WorkflowRunStatus
  triggerPayload Json
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?
}

model Contact {
  id        String   @id @default(cuid())
  email     String?
  firstName String?
  lastName  String?
  phone     String?
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]          @default([])
  
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId       String
}

model ThreatFeed {
  id          String   @id @default(cuid())
  url         String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model Integration {
  id                    String            @id @default(cuid())
  name                  String
  status                IntegrationStatus
  configDetails         Json
  
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId           String
  
  integrationManifestId String
}

model Transaction {
  id          String          @id @default(cuid())
  workspaceId String
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?           @relation(fields: [userId], references: [id], onDelete:SetNull)
  agentId     String?
  
  type        TransactionType
  amount      Decimal         @db.Decimal(10, 2)
  description String
  status      TransactionStatus @default(PENDING)
  
  // For tributes
  instrumentId String?
  luckWeight   Float?
  outcome      String?
  boonAmount   Decimal?        @db.Decimal(10, 2)
  userPsyche   UserPsyche?
  
  createdAt   DateTime        @default(now())
}

model ChaosCard {
  id            String    @id @default(cuid())
  key           String    @unique
  name          String
  description   String
  cardClass     ChaosCardClass
  cost          Int
  systemEffect  String
  owners        User[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model PulseProfile {
  id                  String      @id @default(cuid())
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String      @unique
  
  lastResolvedPhase   PulsePhase  @default(EQUILIBRIUM)
  lastEventTimestamp  DateTime    @default(now())
  consecutiveLosses   Int         @default(0)
  
  // Core sinusoidal parameters for the user's luck rhythm
  amplitude           Float       @default(0.2)
  frequency           Float       @default(0.01) // cycles per minute
  phaseOffset         Float
  baselineLuck        Float       @default(0.5)
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instrumentId  String // key of the Chaos Card or MicroApp
  firstViewedAt DateTime  @default(now())
  converted     Boolean   @default(false)
  convertedAt   DateTime?
  nudgeSentAt   DateTime?
  dtt           Int? // discovery-to-tribute in minutes
  
  @@unique([userId, instrumentId])
}

model Conversation {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  messages    Json     @default("[]")
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  idle
  processing
  active
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}
