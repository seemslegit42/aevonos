// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ENUMS

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum UserPsyche {
  ZEN_ARCHITECT
  SYNDICATE_ENFORCER
  RISK_AVERSE_ARTISAN
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PulsePhase {
  CREST
  TROUGH
  EQUILIBRIUM
}

enum PulseInteractionType {
  WIN
  LOSS
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum WorkflowRunStatus {
  pending
  running
  completed
  failed
  paused
}

enum IntegrationStatus {
  active
  paused
  error
}

// MODELS

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password              String
  firstName             String?   @map("first_name")
  lastName              String?   @map("last_name")
  role                  UserRole  @default(OPERATOR)
  psyche                UserPsyche @default(ZEN_ARCHITECT)
  agentAlias            String?   @map("agent_alias")
  corePainIndex         Int?      @map("core_pain_index")
  foundingVow           String?   @map("founding_vow")
  foundingGoal          String?   @map("founding_goal")
  foundingBenediction   String?   @map("founding_benediction")
  firstWhisper          String?   @map("first_whisper")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  lastLoginAt           DateTime? @map("last_login_at")
  reclamationGraceUntil DateTime? @map("reclamation_grace_until")

  workspaces            Workspace[]
  transactions          Transaction[]
  conversations         Conversation[]
  instrumentDiscoveries InstrumentDiscovery[]
  ownedChaosCards       ChaosCard[]
  pulseProfile          PulseProfile?

  @@map("users")
}

model Workspace {
  id                    String                 @id @default(cuid())
  name                  String
  ownerId               String                 @map("owner_id")
  planTier              PlanTier               @default(Apprentice) @map("plan_tier")
  credits               Decimal                @default(0.0)
  agentActionsUsed      Int                    @default(0) @map("agent_actions_used")
  overageEnabled        Boolean                @default(false) @map("overage_enabled")
  unlockedAppIds        String[]               @map("unlocked_app_ids")
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  owner                 User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members               User[]
  agents                Agent[]
  contacts              Contact[]
  transactions          Transaction[]
  conversations         Conversation[]
  securityAlerts        SecurityAlert[]
  threatFeeds           ThreatFeed[]
  workflows             Workflow[]
  workflowRuns          WorkflowRun[]
  integrations          Integration[]
  activeEffects         ActiveSystemEffect[]
  instrumentDiscoveries InstrumentDiscovery[]

  @@map("workspaces")
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  workspaceId String      @map("workspace_id")
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("agents")
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String?  @map("first_name")
  lastName    String?  @map("last_name")
  email       String?
  phone       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  workspaceId String   @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([email, workspaceId])
  @@map("contacts")
}

model Transaction {
  id            String           @id @default(cuid())
  type          TransactionType
  amount        Decimal
  description   String
  status        TransactionStatus
  instrumentId  String?          @map("instrument_id")
  luckWeight    Float?           @map("luck_weight")
  outcome       String?
  tributeAmount Decimal?         @map("tribute_amount")
  boonAmount    Decimal?         @map("boon_amount")
  judasFactor   Decimal?         @map("judas_factor")
  userPsyche    UserPsyche?      @map("user_psyche")
  createdAt     DateTime         @default(now()) @map("created_at")
  userId        String?          @map("user_id")
  user          User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  agentId       String?          @map("agent_id")
  workspaceId   String           @map("workspace_id")
  workspace     Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String   @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Json
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("conversations")
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]          @map("actionable_options")
  workspaceId       String            @map("workspace_id")
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("security_alerts")
}

model ThreatFeed {
  id          String   @id @default(cuid())
  url         String
  createdAt   DateTime @default(now()) @map("created_at")
  workspaceId String   @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("threat_feeds")
}

model ChaosCard {
  id           String         @id @default(cuid())
  key          String         @unique
  name         String
  description  String
  cardClass    ChaosCardClass @map("card_class")
  cost         Int
  systemEffect String         @map("system_effect")
  createdAt    DateTime       @default(now()) @map("created_at")
  owners       User[]

  @@map("chaos_cards")
}

model ActiveSystemEffect {
  id          String   @id @default(cuid())
  cardKey     String   @map("card_key")
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  workspaceId String   @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("active_system_effects")
}

model InstrumentDiscovery {
  id            String    @id @default(cuid())
  instrumentId  String    @map("instrument_id")
  userId        String    @map("user_id")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId   String    @map("workspace_id")
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  firstViewedAt DateTime  @default(now()) @map("first_viewed_at")
  converted     Boolean   @default(false)
  dtt           Int?      @map("discovery_to_tribute_time")
  nudgeSentAt   DateTime? @map("nudge_sent_at")

  @@unique([userId, instrumentId])
  @@map("instrument_discoveries")
}

model PulseProfile {
  id                       String                @id @default(cuid())
  userId                   String                @unique @map("user_id")
  user                     User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  baselineLuck             Float                 @default(0.4) @map("baseline_luck")
  amplitude                Float                 @default(0.15)
  frequency                Float                 @default(0.01)
  phaseOffset              Float                 @map("phase_offset")
  lastEventTimestamp       DateTime              @default(now()) @map("last_event_timestamp")
  consecutiveLosses        Int                   @default(0) @map("consecutive_losses")
  lastResolvedPhase        PulsePhase            @default(EQUILIBRIUM) @map("last_resolved_phase")
  lastInteractionType      PulseInteractionType? @map("last_interaction_type")
  frustration              Float                 @default(0.0)
  flowState                Float                 @default(0.0) @map("flow_state")
  riskAversion             Float                 @default(0.5) @map("risk_aversion")
  loadedDieBuffCount       Int?                  @map("loaded_die_buff_count")
  nextTributeGuaranteedWin Boolean?              @map("next_tribute_guaranteed_win")
  hadesBargainActive       Boolean?              @map("hades_bargain_active")

  @@map("pulse_profiles")
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  definition  Json
  isActive    Boolean       @default(true) @map("is_active")
  triggerType String        @default("api") @map("trigger_type")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  workspaceId String        @map("workspace_id")
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs        WorkflowRun[]

  @@map("workflows")
}

model WorkflowRun {
  id             String            @id @default(cuid())
  status         WorkflowRunStatus
  triggerPayload Json?             @map("trigger_payload")
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now()) @map("started_at")
  finishedAt     DateTime?         @map("finished_at")
  workflowId     String            @map("workflow_id")
  workflow       Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspaceId    String            @map("workspace_id")
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workflow_runs")
}

model Integration {
  id                    String            @id @default(cuid())
  name                  String
  status                IntegrationStatus
  configDetails         Json?             @map("config_details")
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")
  integrationManifestId String            @map("integration_manifest_id")
  workspaceId           String            @map("workspace_id")
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("integrations")
}
