
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String
  firstName         String?
  lastName          String?
  agentAlias        String?
  psyche            UserPsyche        @default(ZEN_ARCHITECT)
  role              UserRole          @default(OPERATOR)
  lastLoginAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  ownedChaosCards   ChaosCard[]       @relation("UserOwnedChaosCards")
  ownedWorkspaces   Workspace[]       @relation("WorkspaceOwner")
  workspaceMemberships Workspace[]    @relation("WorkspaceMembers")
  transactions      Transaction[]
  instrumentDiscoveries InstrumentDiscovery[]
  pulseProfile      PulseProfile?
  foundingVow       String?
  foundingGoal      String?
}

model Workspace {
  id                String            @id @default(cuid())
  name              String
  owner             User              @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId           String
  planTier          PlanTier          @default(Apprentice)
  credits           Decimal           @default(0.0)
  agentActionsUsed  Int               @default(0)
  overageEnabled    Boolean           @default(false)
  unlockedAppIds    String[]          @default([])
  members           User[]            @relation("WorkspaceMembers")
  agents            Agent[]
  securityAlerts    SecurityAlert[]
  contacts          Contact[]
  workflows         Workflow[]
  workflowRuns      WorkflowRun[]
  threatFeeds       ThreatFeed[]
  transactions      Transaction[]
  instrumentDiscoveries InstrumentDiscovery[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  type        String
  description String?
  status      AgentStatus @default(idle)
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([workspaceId])
}

model SecurityAlert {
  id                String            @id @default(cuid())
  type              String
  explanation       String
  riskLevel         SecurityRiskLevel
  timestamp         DateTime          @default(now())
  actionableOptions String[]          @default([])
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String

  @@index([workspaceId])
}

model Contact {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model Workflow {
  id           String          @id @default(cuid())
  name         String
  isActive     Boolean         @default(true)
  triggerType  String          @default("api")
  definition   Json
  workspace    Workspace       @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  runs         WorkflowRun[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([workspaceId])
}

model WorkflowRun {
  id             String            @id @default(cuid())
  workflow       Workflow          @relation(fields: [workflowId], references: [id])
  workflowId     String
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  status         WorkflowRunStatus @default(pending)
  triggerPayload Json?
  output         Json?
  log            Json?
  startedAt      DateTime          @default(now())
  finishedAt     DateTime?

  @@index([workflowId])
  @@index([workspaceId])
}

model Integration {
  id                    String            @id @default(cuid())
  workspaceId           String
  integrationManifestId String
  name                  String
  status                IntegrationStatus @default(active)
  configDetails         Json
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([workspaceId])
}

model ThreatFeed {
  id          String    @id @default(cuid())
  url         String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())

  @@index([workspaceId])
}

model Transaction {
  id           String            @id @default(cuid())
  workspace    Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  user         User?             @relation(fields: [userId], references: [id])
  userId       String?
  type         TransactionType
  amount       Decimal
  description  String
  status       TransactionStatus
  instrumentId String?
  luckWeight   Float?
  outcome      String?
  boonAmount   Decimal?
  userPsyche   UserPsyche?
  createdAt    DateTime          @default(now())

  @@index([workspaceId])
  @@index([userId])
}

model ChaosCard {
  id           String   @id @default(cuid())
  key          String   @unique
  name         String
  description  String
  cardClass    ChaosCardClass
  cost         Int
  systemEffect String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  owners       User[]   @relation("UserOwnedChaosCards")
}

model InstrumentDiscovery {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  instrumentId String
  firstViewedAt DateTime  @default(now())
  nudgeSentAt  DateTime?
  converted    Boolean   @default(false)
  dtt          Int? // Difference in time to tribute (in minutes)

  @@unique([userId, instrumentId])
}

model PulseProfile {
  id                 String      @id @default(cuid())
  user               User        @relation(fields: [userId], references: [id])
  userId             String      @unique
  amplitude          Float       @default(0.2) // How much luck can swing
  frequency          Float       @default(0.1) // How quickly luck swings
  phaseOffset        Float       @default(0.0) // Desynchronizes users
  baselineLuck       Float       @default(0.5) // User's base chance of success
  lastEventTimestamp DateTime    @default(now())
  consecutiveLosses  Int         @default(0)
  lastResolvedPhase  PulsePhase  @default(EQUILIBRIUM)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

enum AgentStatus {
  active
  idle
  processing
  paused
  error
}

enum SecurityRiskLevel {
  none
  low
  medium
  high
  critical
}

enum PlanTier {
  Apprentice
  Artisan
  Priesthood
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  AUDITOR
}

enum IntegrationStatus {
  active
  inactive
  error
}

enum TransactionType {
  CREDIT
  DEBIT
  TRIBUTE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum UserPsyche {
  ZEN_ARCHITECT // Balanced, serene, focused on flow.
  SYNDICATE_ENFORCER // High risk, high reward, aggressive.
  RISK_AVERSE_ARTISAN // Cautious, methodical, prefers stability.
}

enum ChaosCardClass {
  AESTHETIC
  AGENTIC
  SYSTEMIC
  SYNDICATE
}

enum PulsePhase {
  CREST // High luck
  TROUGH // Low luck
  EQUILIBRIUM // Normal luck
}
